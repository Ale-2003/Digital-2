
Laboratorio 7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007894  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000698  08007a58  08007a58  00008a58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080080f0  080080f0  0000a024  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080080f0  080080f0  000090f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080080f8  080080f8  0000a024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080080f8  080080f8  000090f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080080fc  080080fc  000090fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000024  20000000  08008100  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000249c  20000024  08008124  0000a024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200024c0  08008124  0000a4c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f40b  00000000  00000000  0000a054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002827  00000000  00000000  0001945f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d48  00000000  00000000  0001bc88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a36  00000000  00000000  0001c9d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023054  00000000  00000000  0001d406  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001387d  00000000  00000000  0004045a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cbfba  00000000  00000000  00053cd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011fc91  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035bc  00000000  00000000  0011fcd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  00123290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000024 	.word	0x20000024
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08007a40 	.word	0x08007a40

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000028 	.word	0x20000028
 8000200:	08007a40 	.word	0x08007a40

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295
 8000224:	f04f 30ff 	movne.w	r0, #4294967295
 8000228:	f000 b988 	b.w	800053c <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9d08      	ldr	r5, [sp, #32]
 800024a:	468e      	mov	lr, r1
 800024c:	4604      	mov	r4, r0
 800024e:	4688      	mov	r8, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14a      	bne.n	80002ea <__udivmoddi4+0xa6>
 8000254:	428a      	cmp	r2, r1
 8000256:	4617      	mov	r7, r2
 8000258:	d962      	bls.n	8000320 <__udivmoddi4+0xdc>
 800025a:	fab2 f682 	clz	r6, r2
 800025e:	b14e      	cbz	r6, 8000274 <__udivmoddi4+0x30>
 8000260:	f1c6 0320 	rsb	r3, r6, #32
 8000264:	fa01 f806 	lsl.w	r8, r1, r6
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	40b7      	lsls	r7, r6
 800026e:	ea43 0808 	orr.w	r8, r3, r8
 8000272:	40b4      	lsls	r4, r6
 8000274:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000278:	fa1f fc87 	uxth.w	ip, r7
 800027c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000280:	0c23      	lsrs	r3, r4, #16
 8000282:	fb0e 8811 	mls	r8, lr, r1, r8
 8000286:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028a:	fb01 f20c 	mul.w	r2, r1, ip
 800028e:	429a      	cmp	r2, r3
 8000290:	d909      	bls.n	80002a6 <__udivmoddi4+0x62>
 8000292:	18fb      	adds	r3, r7, r3
 8000294:	f101 30ff 	add.w	r0, r1, #4294967295
 8000298:	f080 80ea 	bcs.w	8000470 <__udivmoddi4+0x22c>
 800029c:	429a      	cmp	r2, r3
 800029e:	f240 80e7 	bls.w	8000470 <__udivmoddi4+0x22c>
 80002a2:	3902      	subs	r1, #2
 80002a4:	443b      	add	r3, r7
 80002a6:	1a9a      	subs	r2, r3, r2
 80002a8:	b2a3      	uxth	r3, r4
 80002aa:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ae:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002b6:	fb00 fc0c 	mul.w	ip, r0, ip
 80002ba:	459c      	cmp	ip, r3
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0x8e>
 80002be:	18fb      	adds	r3, r7, r3
 80002c0:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c4:	f080 80d6 	bcs.w	8000474 <__udivmoddi4+0x230>
 80002c8:	459c      	cmp	ip, r3
 80002ca:	f240 80d3 	bls.w	8000474 <__udivmoddi4+0x230>
 80002ce:	443b      	add	r3, r7
 80002d0:	3802      	subs	r0, #2
 80002d2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d6:	eba3 030c 	sub.w	r3, r3, ip
 80002da:	2100      	movs	r1, #0
 80002dc:	b11d      	cbz	r5, 80002e6 <__udivmoddi4+0xa2>
 80002de:	40f3      	lsrs	r3, r6
 80002e0:	2200      	movs	r2, #0
 80002e2:	e9c5 3200 	strd	r3, r2, [r5]
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d905      	bls.n	80002fa <__udivmoddi4+0xb6>
 80002ee:	b10d      	cbz	r5, 80002f4 <__udivmoddi4+0xb0>
 80002f0:	e9c5 0100 	strd	r0, r1, [r5]
 80002f4:	2100      	movs	r1, #0
 80002f6:	4608      	mov	r0, r1
 80002f8:	e7f5      	b.n	80002e6 <__udivmoddi4+0xa2>
 80002fa:	fab3 f183 	clz	r1, r3
 80002fe:	2900      	cmp	r1, #0
 8000300:	d146      	bne.n	8000390 <__udivmoddi4+0x14c>
 8000302:	4573      	cmp	r3, lr
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xc8>
 8000306:	4282      	cmp	r2, r0
 8000308:	f200 8105 	bhi.w	8000516 <__udivmoddi4+0x2d2>
 800030c:	1a84      	subs	r4, r0, r2
 800030e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000312:	2001      	movs	r0, #1
 8000314:	4690      	mov	r8, r2
 8000316:	2d00      	cmp	r5, #0
 8000318:	d0e5      	beq.n	80002e6 <__udivmoddi4+0xa2>
 800031a:	e9c5 4800 	strd	r4, r8, [r5]
 800031e:	e7e2      	b.n	80002e6 <__udivmoddi4+0xa2>
 8000320:	2a00      	cmp	r2, #0
 8000322:	f000 8090 	beq.w	8000446 <__udivmoddi4+0x202>
 8000326:	fab2 f682 	clz	r6, r2
 800032a:	2e00      	cmp	r6, #0
 800032c:	f040 80a4 	bne.w	8000478 <__udivmoddi4+0x234>
 8000330:	1a8a      	subs	r2, r1, r2
 8000332:	0c03      	lsrs	r3, r0, #16
 8000334:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000338:	b280      	uxth	r0, r0
 800033a:	b2bc      	uxth	r4, r7
 800033c:	2101      	movs	r1, #1
 800033e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000342:	fb0e 221c 	mls	r2, lr, ip, r2
 8000346:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800034a:	fb04 f20c 	mul.w	r2, r4, ip
 800034e:	429a      	cmp	r2, r3
 8000350:	d907      	bls.n	8000362 <__udivmoddi4+0x11e>
 8000352:	18fb      	adds	r3, r7, r3
 8000354:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000358:	d202      	bcs.n	8000360 <__udivmoddi4+0x11c>
 800035a:	429a      	cmp	r2, r3
 800035c:	f200 80e0 	bhi.w	8000520 <__udivmoddi4+0x2dc>
 8000360:	46c4      	mov	ip, r8
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	fbb3 f2fe 	udiv	r2, r3, lr
 8000368:	fb0e 3312 	mls	r3, lr, r2, r3
 800036c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000370:	fb02 f404 	mul.w	r4, r2, r4
 8000374:	429c      	cmp	r4, r3
 8000376:	d907      	bls.n	8000388 <__udivmoddi4+0x144>
 8000378:	18fb      	adds	r3, r7, r3
 800037a:	f102 30ff 	add.w	r0, r2, #4294967295
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0x142>
 8000380:	429c      	cmp	r4, r3
 8000382:	f200 80ca 	bhi.w	800051a <__udivmoddi4+0x2d6>
 8000386:	4602      	mov	r2, r0
 8000388:	1b1b      	subs	r3, r3, r4
 800038a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800038e:	e7a5      	b.n	80002dc <__udivmoddi4+0x98>
 8000390:	f1c1 0620 	rsb	r6, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 f706 	lsr.w	r7, r2, r6
 800039a:	431f      	orrs	r7, r3
 800039c:	fa0e f401 	lsl.w	r4, lr, r1
 80003a0:	fa20 f306 	lsr.w	r3, r0, r6
 80003a4:	fa2e fe06 	lsr.w	lr, lr, r6
 80003a8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003ac:	4323      	orrs	r3, r4
 80003ae:	fa00 f801 	lsl.w	r8, r0, r1
 80003b2:	fa1f fc87 	uxth.w	ip, r7
 80003b6:	fbbe f0f9 	udiv	r0, lr, r9
 80003ba:	0c1c      	lsrs	r4, r3, #16
 80003bc:	fb09 ee10 	mls	lr, r9, r0, lr
 80003c0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c4:	fb00 fe0c 	mul.w	lr, r0, ip
 80003c8:	45a6      	cmp	lr, r4
 80003ca:	fa02 f201 	lsl.w	r2, r2, r1
 80003ce:	d909      	bls.n	80003e4 <__udivmoddi4+0x1a0>
 80003d0:	193c      	adds	r4, r7, r4
 80003d2:	f100 3aff 	add.w	sl, r0, #4294967295
 80003d6:	f080 809c 	bcs.w	8000512 <__udivmoddi4+0x2ce>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	f240 8099 	bls.w	8000512 <__udivmoddi4+0x2ce>
 80003e0:	3802      	subs	r0, #2
 80003e2:	443c      	add	r4, r7
 80003e4:	eba4 040e 	sub.w	r4, r4, lr
 80003e8:	fa1f fe83 	uxth.w	lr, r3
 80003ec:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f0:	fb09 4413 	mls	r4, r9, r3, r4
 80003f4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003f8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003fc:	45a4      	cmp	ip, r4
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1ce>
 8000400:	193c      	adds	r4, r7, r4
 8000402:	f103 3eff 	add.w	lr, r3, #4294967295
 8000406:	f080 8082 	bcs.w	800050e <__udivmoddi4+0x2ca>
 800040a:	45a4      	cmp	ip, r4
 800040c:	d97f      	bls.n	800050e <__udivmoddi4+0x2ca>
 800040e:	3b02      	subs	r3, #2
 8000410:	443c      	add	r4, r7
 8000412:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000416:	eba4 040c 	sub.w	r4, r4, ip
 800041a:	fba0 ec02 	umull	lr, ip, r0, r2
 800041e:	4564      	cmp	r4, ip
 8000420:	4673      	mov	r3, lr
 8000422:	46e1      	mov	r9, ip
 8000424:	d362      	bcc.n	80004ec <__udivmoddi4+0x2a8>
 8000426:	d05f      	beq.n	80004e8 <__udivmoddi4+0x2a4>
 8000428:	b15d      	cbz	r5, 8000442 <__udivmoddi4+0x1fe>
 800042a:	ebb8 0203 	subs.w	r2, r8, r3
 800042e:	eb64 0409 	sbc.w	r4, r4, r9
 8000432:	fa04 f606 	lsl.w	r6, r4, r6
 8000436:	fa22 f301 	lsr.w	r3, r2, r1
 800043a:	431e      	orrs	r6, r3
 800043c:	40cc      	lsrs	r4, r1
 800043e:	e9c5 6400 	strd	r6, r4, [r5]
 8000442:	2100      	movs	r1, #0
 8000444:	e74f      	b.n	80002e6 <__udivmoddi4+0xa2>
 8000446:	fbb1 fcf2 	udiv	ip, r1, r2
 800044a:	0c01      	lsrs	r1, r0, #16
 800044c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000450:	b280      	uxth	r0, r0
 8000452:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000456:	463b      	mov	r3, r7
 8000458:	4638      	mov	r0, r7
 800045a:	463c      	mov	r4, r7
 800045c:	46b8      	mov	r8, r7
 800045e:	46be      	mov	lr, r7
 8000460:	2620      	movs	r6, #32
 8000462:	fbb1 f1f7 	udiv	r1, r1, r7
 8000466:	eba2 0208 	sub.w	r2, r2, r8
 800046a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800046e:	e766      	b.n	800033e <__udivmoddi4+0xfa>
 8000470:	4601      	mov	r1, r0
 8000472:	e718      	b.n	80002a6 <__udivmoddi4+0x62>
 8000474:	4610      	mov	r0, r2
 8000476:	e72c      	b.n	80002d2 <__udivmoddi4+0x8e>
 8000478:	f1c6 0220 	rsb	r2, r6, #32
 800047c:	fa2e f302 	lsr.w	r3, lr, r2
 8000480:	40b7      	lsls	r7, r6
 8000482:	40b1      	lsls	r1, r6
 8000484:	fa20 f202 	lsr.w	r2, r0, r2
 8000488:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800048c:	430a      	orrs	r2, r1
 800048e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000492:	b2bc      	uxth	r4, r7
 8000494:	fb0e 3318 	mls	r3, lr, r8, r3
 8000498:	0c11      	lsrs	r1, r2, #16
 800049a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049e:	fb08 f904 	mul.w	r9, r8, r4
 80004a2:	40b0      	lsls	r0, r6
 80004a4:	4589      	cmp	r9, r1
 80004a6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004aa:	b280      	uxth	r0, r0
 80004ac:	d93e      	bls.n	800052c <__udivmoddi4+0x2e8>
 80004ae:	1879      	adds	r1, r7, r1
 80004b0:	f108 3cff 	add.w	ip, r8, #4294967295
 80004b4:	d201      	bcs.n	80004ba <__udivmoddi4+0x276>
 80004b6:	4589      	cmp	r9, r1
 80004b8:	d81f      	bhi.n	80004fa <__udivmoddi4+0x2b6>
 80004ba:	eba1 0109 	sub.w	r1, r1, r9
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fb09 f804 	mul.w	r8, r9, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	b292      	uxth	r2, r2
 80004cc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d0:	4542      	cmp	r2, r8
 80004d2:	d229      	bcs.n	8000528 <__udivmoddi4+0x2e4>
 80004d4:	18ba      	adds	r2, r7, r2
 80004d6:	f109 31ff 	add.w	r1, r9, #4294967295
 80004da:	d2c4      	bcs.n	8000466 <__udivmoddi4+0x222>
 80004dc:	4542      	cmp	r2, r8
 80004de:	d2c2      	bcs.n	8000466 <__udivmoddi4+0x222>
 80004e0:	f1a9 0102 	sub.w	r1, r9, #2
 80004e4:	443a      	add	r2, r7
 80004e6:	e7be      	b.n	8000466 <__udivmoddi4+0x222>
 80004e8:	45f0      	cmp	r8, lr
 80004ea:	d29d      	bcs.n	8000428 <__udivmoddi4+0x1e4>
 80004ec:	ebbe 0302 	subs.w	r3, lr, r2
 80004f0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f4:	3801      	subs	r0, #1
 80004f6:	46e1      	mov	r9, ip
 80004f8:	e796      	b.n	8000428 <__udivmoddi4+0x1e4>
 80004fa:	eba7 0909 	sub.w	r9, r7, r9
 80004fe:	4449      	add	r1, r9
 8000500:	f1a8 0c02 	sub.w	ip, r8, #2
 8000504:	fbb1 f9fe 	udiv	r9, r1, lr
 8000508:	fb09 f804 	mul.w	r8, r9, r4
 800050c:	e7db      	b.n	80004c6 <__udivmoddi4+0x282>
 800050e:	4673      	mov	r3, lr
 8000510:	e77f      	b.n	8000412 <__udivmoddi4+0x1ce>
 8000512:	4650      	mov	r0, sl
 8000514:	e766      	b.n	80003e4 <__udivmoddi4+0x1a0>
 8000516:	4608      	mov	r0, r1
 8000518:	e6fd      	b.n	8000316 <__udivmoddi4+0xd2>
 800051a:	443b      	add	r3, r7
 800051c:	3a02      	subs	r2, #2
 800051e:	e733      	b.n	8000388 <__udivmoddi4+0x144>
 8000520:	f1ac 0c02 	sub.w	ip, ip, #2
 8000524:	443b      	add	r3, r7
 8000526:	e71c      	b.n	8000362 <__udivmoddi4+0x11e>
 8000528:	4649      	mov	r1, r9
 800052a:	e79c      	b.n	8000466 <__udivmoddi4+0x222>
 800052c:	eba1 0109 	sub.w	r1, r1, r9
 8000530:	46c4      	mov	ip, r8
 8000532:	fbb1 f9fe 	udiv	r9, r1, lr
 8000536:	fb09 f804 	mul.w	r8, r9, r4
 800053a:	e7c4      	b.n	80004c6 <__udivmoddi4+0x282>

0800053c <__aeabi_idiv0>:
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000544:	2200      	movs	r2, #0
 8000546:	2140      	movs	r1, #64	@ 0x40
 8000548:	4803      	ldr	r0, [pc, #12]	@ (8000558 <SELECT+0x18>)
 800054a:	f001 ffe3 	bl	8002514 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800054e:	2001      	movs	r0, #1
 8000550:	f001 f98e 	bl	8001870 <HAL_Delay>
}
 8000554:	bf00      	nop
 8000556:	bd80      	pop	{r7, pc}
 8000558:	40020400 	.word	0x40020400

0800055c <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000560:	2201      	movs	r2, #1
 8000562:	2140      	movs	r1, #64	@ 0x40
 8000564:	4803      	ldr	r0, [pc, #12]	@ (8000574 <DESELECT+0x18>)
 8000566:	f001 ffd5 	bl	8002514 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800056a:	2001      	movs	r0, #1
 800056c:	f001 f980 	bl	8001870 <HAL_Delay>
}
 8000570:	bf00      	nop
 8000572:	bd80      	pop	{r7, pc}
 8000574:	40020400 	.word	0x40020400

08000578 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	4603      	mov	r3, r0
 8000580:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000582:	bf00      	nop
 8000584:	4b08      	ldr	r3, [pc, #32]	@ (80005a8 <SPI_TxByte+0x30>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	689b      	ldr	r3, [r3, #8]
 800058a:	f003 0302 	and.w	r3, r3, #2
 800058e:	2b02      	cmp	r3, #2
 8000590:	d1f8      	bne.n	8000584 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000592:	1df9      	adds	r1, r7, #7
 8000594:	2364      	movs	r3, #100	@ 0x64
 8000596:	2201      	movs	r2, #1
 8000598:	4803      	ldr	r0, [pc, #12]	@ (80005a8 <SPI_TxByte+0x30>)
 800059a:	f002 fe46 	bl	800322a <HAL_SPI_Transmit>
}
 800059e:	bf00      	nop
 80005a0:	3708      	adds	r7, #8
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	20000048 	.word	0x20000048

080005ac <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	460b      	mov	r3, r1
 80005b6:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80005b8:	bf00      	nop
 80005ba:	4b08      	ldr	r3, [pc, #32]	@ (80005dc <SPI_TxBuffer+0x30>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	689b      	ldr	r3, [r3, #8]
 80005c0:	f003 0302 	and.w	r3, r3, #2
 80005c4:	2b02      	cmp	r3, #2
 80005c6:	d1f8      	bne.n	80005ba <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 80005c8:	887a      	ldrh	r2, [r7, #2]
 80005ca:	2364      	movs	r3, #100	@ 0x64
 80005cc:	6879      	ldr	r1, [r7, #4]
 80005ce:	4803      	ldr	r0, [pc, #12]	@ (80005dc <SPI_TxBuffer+0x30>)
 80005d0:	f002 fe2b 	bl	800322a <HAL_SPI_Transmit>
}
 80005d4:	bf00      	nop
 80005d6:	3708      	adds	r7, #8
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	20000048 	.word	0x20000048

080005e0 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 80005e6:	23ff      	movs	r3, #255	@ 0xff
 80005e8:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80005ea:	bf00      	nop
 80005ec:	4b09      	ldr	r3, [pc, #36]	@ (8000614 <SPI_RxByte+0x34>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	689b      	ldr	r3, [r3, #8]
 80005f2:	f003 0302 	and.w	r3, r3, #2
 80005f6:	2b02      	cmp	r3, #2
 80005f8:	d1f8      	bne.n	80005ec <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80005fa:	1dba      	adds	r2, r7, #6
 80005fc:	1df9      	adds	r1, r7, #7
 80005fe:	2364      	movs	r3, #100	@ 0x64
 8000600:	9300      	str	r3, [sp, #0]
 8000602:	2301      	movs	r3, #1
 8000604:	4803      	ldr	r0, [pc, #12]	@ (8000614 <SPI_RxByte+0x34>)
 8000606:	f002 ff54 	bl	80034b2 <HAL_SPI_TransmitReceive>

	return data;
 800060a:	79bb      	ldrb	r3, [r7, #6]
}
 800060c:	4618      	mov	r0, r3
 800060e:	3708      	adds	r7, #8
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	20000048 	.word	0x20000048

08000618 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000620:	f7ff ffde 	bl	80005e0 <SPI_RxByte>
 8000624:	4603      	mov	r3, r0
 8000626:	461a      	mov	r2, r3
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	701a      	strb	r2, [r3, #0]
}
 800062c:	bf00      	nop
 800062e:	3708      	adds	r7, #8
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}

08000634 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 800063a:	4b0a      	ldr	r3, [pc, #40]	@ (8000664 <SD_ReadyWait+0x30>)
 800063c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000640:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8000642:	f7ff ffcd 	bl	80005e0 <SPI_RxByte>
 8000646:	4603      	mov	r3, r0
 8000648:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 800064a:	79fb      	ldrb	r3, [r7, #7]
 800064c:	2bff      	cmp	r3, #255	@ 0xff
 800064e:	d003      	beq.n	8000658 <SD_ReadyWait+0x24>
 8000650:	4b04      	ldr	r3, [pc, #16]	@ (8000664 <SD_ReadyWait+0x30>)
 8000652:	881b      	ldrh	r3, [r3, #0]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d1f4      	bne.n	8000642 <SD_ReadyWait+0xe>

	return res;
 8000658:	79fb      	ldrb	r3, [r7, #7]
}
 800065a:	4618      	mov	r0, r3
 800065c:	3708      	adds	r7, #8
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	20000042 	.word	0x20000042

08000668 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b084      	sub	sp, #16
 800066c:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 800066e:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8000672:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000674:	f7ff ff72 	bl	800055c <DESELECT>
	for(int i = 0; i < 10; i++)
 8000678:	2300      	movs	r3, #0
 800067a:	60bb      	str	r3, [r7, #8]
 800067c:	e005      	b.n	800068a <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 800067e:	20ff      	movs	r0, #255	@ 0xff
 8000680:	f7ff ff7a 	bl	8000578 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000684:	68bb      	ldr	r3, [r7, #8]
 8000686:	3301      	adds	r3, #1
 8000688:	60bb      	str	r3, [r7, #8]
 800068a:	68bb      	ldr	r3, [r7, #8]
 800068c:	2b09      	cmp	r3, #9
 800068e:	ddf6      	ble.n	800067e <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8000690:	f7ff ff56 	bl	8000540 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000694:	2340      	movs	r3, #64	@ 0x40
 8000696:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8000698:	2300      	movs	r3, #0
 800069a:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 800069c:	2300      	movs	r3, #0
 800069e:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 80006a0:	2300      	movs	r3, #0
 80006a2:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 80006a4:	2300      	movs	r3, #0
 80006a6:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 80006a8:	2395      	movs	r3, #149	@ 0x95
 80006aa:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 80006ac:	463b      	mov	r3, r7
 80006ae:	2106      	movs	r1, #6
 80006b0:	4618      	mov	r0, r3
 80006b2:	f7ff ff7b 	bl	80005ac <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 80006b6:	e002      	b.n	80006be <SD_PowerOn+0x56>
	{
		cnt--;
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	3b01      	subs	r3, #1
 80006bc:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 80006be:	f7ff ff8f 	bl	80005e0 <SPI_RxByte>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b01      	cmp	r3, #1
 80006c6:	d002      	beq.n	80006ce <SD_PowerOn+0x66>
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d1f4      	bne.n	80006b8 <SD_PowerOn+0x50>
	}

	DESELECT();
 80006ce:	f7ff ff45 	bl	800055c <DESELECT>
	SPI_TxByte(0XFF);
 80006d2:	20ff      	movs	r0, #255	@ 0xff
 80006d4:	f7ff ff50 	bl	8000578 <SPI_TxByte>

	PowerFlag = 1;
 80006d8:	4b03      	ldr	r3, [pc, #12]	@ (80006e8 <SD_PowerOn+0x80>)
 80006da:	2201      	movs	r2, #1
 80006dc:	701a      	strb	r2, [r3, #0]
}
 80006de:	bf00      	nop
 80006e0:	3710      	adds	r7, #16
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	20000045 	.word	0x20000045

080006ec <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 80006f0:	4b03      	ldr	r3, [pc, #12]	@ (8000700 <SD_PowerOff+0x14>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	701a      	strb	r2, [r3, #0]
}
 80006f6:	bf00      	nop
 80006f8:	46bd      	mov	sp, r7
 80006fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fe:	4770      	bx	lr
 8000700:	20000045 	.word	0x20000045

08000704 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000708:	4b03      	ldr	r3, [pc, #12]	@ (8000718 <SD_CheckPower+0x14>)
 800070a:	781b      	ldrb	r3, [r3, #0]
}
 800070c:	4618      	mov	r0, r3
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	20000045 	.word	0x20000045

0800071c <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
 8000724:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8000726:	4b13      	ldr	r3, [pc, #76]	@ (8000774 <SD_RxDataBlock+0x58>)
 8000728:	22c8      	movs	r2, #200	@ 0xc8
 800072a:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 800072c:	f7ff ff58 	bl	80005e0 <SPI_RxByte>
 8000730:	4603      	mov	r3, r0
 8000732:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8000734:	7bfb      	ldrb	r3, [r7, #15]
 8000736:	2bff      	cmp	r3, #255	@ 0xff
 8000738:	d103      	bne.n	8000742 <SD_RxDataBlock+0x26>
 800073a:	4b0e      	ldr	r3, [pc, #56]	@ (8000774 <SD_RxDataBlock+0x58>)
 800073c:	881b      	ldrh	r3, [r3, #0]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d1f4      	bne.n	800072c <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8000742:	7bfb      	ldrb	r3, [r7, #15]
 8000744:	2bfe      	cmp	r3, #254	@ 0xfe
 8000746:	d001      	beq.n	800074c <SD_RxDataBlock+0x30>
 8000748:	2300      	movs	r3, #0
 800074a:	e00f      	b.n	800076c <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	1c5a      	adds	r2, r3, #1
 8000750:	607a      	str	r2, [r7, #4]
 8000752:	4618      	mov	r0, r3
 8000754:	f7ff ff60 	bl	8000618 <SPI_RxBytePtr>
	} while(len--);
 8000758:	683b      	ldr	r3, [r7, #0]
 800075a:	1e5a      	subs	r2, r3, #1
 800075c:	603a      	str	r2, [r7, #0]
 800075e:	2b00      	cmp	r3, #0
 8000760:	d1f4      	bne.n	800074c <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 8000762:	f7ff ff3d 	bl	80005e0 <SPI_RxByte>
	SPI_RxByte();
 8000766:	f7ff ff3b 	bl	80005e0 <SPI_RxByte>

	return TRUE;
 800076a:	2301      	movs	r3, #1
}
 800076c:	4618      	mov	r0, r3
 800076e:	3710      	adds	r7, #16
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	20000040 	.word	0x20000040

08000778 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b084      	sub	sp, #16
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
 8000780:	460b      	mov	r3, r1
 8000782:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8000784:	2300      	movs	r3, #0
 8000786:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000788:	f7ff ff54 	bl	8000634 <SD_ReadyWait>
 800078c:	4603      	mov	r3, r0
 800078e:	2bff      	cmp	r3, #255	@ 0xff
 8000790:	d001      	beq.n	8000796 <SD_TxDataBlock+0x1e>
 8000792:	2300      	movs	r3, #0
 8000794:	e02f      	b.n	80007f6 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8000796:	78fb      	ldrb	r3, [r7, #3]
 8000798:	4618      	mov	r0, r3
 800079a:	f7ff feed 	bl	8000578 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 800079e:	78fb      	ldrb	r3, [r7, #3]
 80007a0:	2bfd      	cmp	r3, #253	@ 0xfd
 80007a2:	d020      	beq.n	80007e6 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 80007a4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007a8:	6878      	ldr	r0, [r7, #4]
 80007aa:	f7ff feff 	bl	80005ac <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 80007ae:	f7ff ff17 	bl	80005e0 <SPI_RxByte>
		SPI_RxByte();
 80007b2:	f7ff ff15 	bl	80005e0 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 80007b6:	e00b      	b.n	80007d0 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 80007b8:	f7ff ff12 	bl	80005e0 <SPI_RxByte>
 80007bc:	4603      	mov	r3, r0
 80007be:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 80007c0:	7bfb      	ldrb	r3, [r7, #15]
 80007c2:	f003 031f 	and.w	r3, r3, #31
 80007c6:	2b05      	cmp	r3, #5
 80007c8:	d006      	beq.n	80007d8 <SD_TxDataBlock+0x60>
			i++;
 80007ca:	7bbb      	ldrb	r3, [r7, #14]
 80007cc:	3301      	adds	r3, #1
 80007ce:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 80007d0:	7bbb      	ldrb	r3, [r7, #14]
 80007d2:	2b40      	cmp	r3, #64	@ 0x40
 80007d4:	d9f0      	bls.n	80007b8 <SD_TxDataBlock+0x40>
 80007d6:	e000      	b.n	80007da <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 80007d8:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 80007da:	bf00      	nop
 80007dc:	f7ff ff00 	bl	80005e0 <SPI_RxByte>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d0fa      	beq.n	80007dc <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 80007e6:	7bfb      	ldrb	r3, [r7, #15]
 80007e8:	f003 031f 	and.w	r3, r3, #31
 80007ec:	2b05      	cmp	r3, #5
 80007ee:	d101      	bne.n	80007f4 <SD_TxDataBlock+0x7c>
 80007f0:	2301      	movs	r3, #1
 80007f2:	e000      	b.n	80007f6 <SD_TxDataBlock+0x7e>

	return FALSE;
 80007f4:	2300      	movs	r3, #0
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	3710      	adds	r7, #16
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}

080007fe <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80007fe:	b580      	push	{r7, lr}
 8000800:	b084      	sub	sp, #16
 8000802:	af00      	add	r7, sp, #0
 8000804:	4603      	mov	r3, r0
 8000806:	6039      	str	r1, [r7, #0]
 8000808:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 800080a:	f7ff ff13 	bl	8000634 <SD_ReadyWait>
 800080e:	4603      	mov	r3, r0
 8000810:	2bff      	cmp	r3, #255	@ 0xff
 8000812:	d001      	beq.n	8000818 <SD_SendCmd+0x1a>
 8000814:	23ff      	movs	r3, #255	@ 0xff
 8000816:	e042      	b.n	800089e <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000818:	79fb      	ldrb	r3, [r7, #7]
 800081a:	4618      	mov	r0, r3
 800081c:	f7ff feac 	bl	8000578 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	0e1b      	lsrs	r3, r3, #24
 8000824:	b2db      	uxtb	r3, r3
 8000826:	4618      	mov	r0, r3
 8000828:	f7ff fea6 	bl	8000578 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	0c1b      	lsrs	r3, r3, #16
 8000830:	b2db      	uxtb	r3, r3
 8000832:	4618      	mov	r0, r3
 8000834:	f7ff fea0 	bl	8000578 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	0a1b      	lsrs	r3, r3, #8
 800083c:	b2db      	uxtb	r3, r3
 800083e:	4618      	mov	r0, r3
 8000840:	f7ff fe9a 	bl	8000578 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	b2db      	uxtb	r3, r3
 8000848:	4618      	mov	r0, r3
 800084a:	f7ff fe95 	bl	8000578 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 800084e:	79fb      	ldrb	r3, [r7, #7]
 8000850:	2b40      	cmp	r3, #64	@ 0x40
 8000852:	d102      	bne.n	800085a <SD_SendCmd+0x5c>
 8000854:	2395      	movs	r3, #149	@ 0x95
 8000856:	73fb      	strb	r3, [r7, #15]
 8000858:	e007      	b.n	800086a <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 800085a:	79fb      	ldrb	r3, [r7, #7]
 800085c:	2b48      	cmp	r3, #72	@ 0x48
 800085e:	d102      	bne.n	8000866 <SD_SendCmd+0x68>
 8000860:	2387      	movs	r3, #135	@ 0x87
 8000862:	73fb      	strb	r3, [r7, #15]
 8000864:	e001      	b.n	800086a <SD_SendCmd+0x6c>
	else crc = 1;
 8000866:	2301      	movs	r3, #1
 8000868:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 800086a:	7bfb      	ldrb	r3, [r7, #15]
 800086c:	4618      	mov	r0, r3
 800086e:	f7ff fe83 	bl	8000578 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8000872:	79fb      	ldrb	r3, [r7, #7]
 8000874:	2b4c      	cmp	r3, #76	@ 0x4c
 8000876:	d101      	bne.n	800087c <SD_SendCmd+0x7e>
 8000878:	f7ff feb2 	bl	80005e0 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 800087c:	230a      	movs	r3, #10
 800087e:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8000880:	f7ff feae 	bl	80005e0 <SPI_RxByte>
 8000884:	4603      	mov	r3, r0
 8000886:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8000888:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800088c:	2b00      	cmp	r3, #0
 800088e:	da05      	bge.n	800089c <SD_SendCmd+0x9e>
 8000890:	7bbb      	ldrb	r3, [r7, #14]
 8000892:	3b01      	subs	r3, #1
 8000894:	73bb      	strb	r3, [r7, #14]
 8000896:	7bbb      	ldrb	r3, [r7, #14]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d1f1      	bne.n	8000880 <SD_SendCmd+0x82>

	return res;
 800089c:	7b7b      	ldrb	r3, [r7, #13]
}
 800089e:	4618      	mov	r0, r3
 80008a0:	3710      	adds	r7, #16
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
	...

080008a8 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 80008a8:	b590      	push	{r4, r7, lr}
 80008aa:	b085      	sub	sp, #20
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	4603      	mov	r3, r0
 80008b0:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 80008b2:	79fb      	ldrb	r3, [r7, #7]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <SD_disk_initialize+0x14>
 80008b8:	2301      	movs	r3, #1
 80008ba:	e0d1      	b.n	8000a60 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 80008bc:	4b6a      	ldr	r3, [pc, #424]	@ (8000a68 <SD_disk_initialize+0x1c0>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	f003 0302 	and.w	r3, r3, #2
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d003      	beq.n	80008d2 <SD_disk_initialize+0x2a>
 80008ca:	4b67      	ldr	r3, [pc, #412]	@ (8000a68 <SD_disk_initialize+0x1c0>)
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	b2db      	uxtb	r3, r3
 80008d0:	e0c6      	b.n	8000a60 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 80008d2:	f7ff fec9 	bl	8000668 <SD_PowerOn>

	/* slave select */
	SELECT();
 80008d6:	f7ff fe33 	bl	8000540 <SELECT>

	/* check disk type */
	type = 0;
 80008da:	2300      	movs	r3, #0
 80008dc:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 80008de:	2100      	movs	r1, #0
 80008e0:	2040      	movs	r0, #64	@ 0x40
 80008e2:	f7ff ff8c 	bl	80007fe <SD_SendCmd>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b01      	cmp	r3, #1
 80008ea:	f040 80a1 	bne.w	8000a30 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 80008ee:	4b5f      	ldr	r3, [pc, #380]	@ (8000a6c <SD_disk_initialize+0x1c4>)
 80008f0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80008f4:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80008f6:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80008fa:	2048      	movs	r0, #72	@ 0x48
 80008fc:	f7ff ff7f 	bl	80007fe <SD_SendCmd>
 8000900:	4603      	mov	r3, r0
 8000902:	2b01      	cmp	r3, #1
 8000904:	d155      	bne.n	80009b2 <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8000906:	2300      	movs	r3, #0
 8000908:	73fb      	strb	r3, [r7, #15]
 800090a:	e00c      	b.n	8000926 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 800090c:	7bfc      	ldrb	r4, [r7, #15]
 800090e:	f7ff fe67 	bl	80005e0 <SPI_RxByte>
 8000912:	4603      	mov	r3, r0
 8000914:	461a      	mov	r2, r3
 8000916:	f104 0310 	add.w	r3, r4, #16
 800091a:	443b      	add	r3, r7
 800091c:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8000920:	7bfb      	ldrb	r3, [r7, #15]
 8000922:	3301      	adds	r3, #1
 8000924:	73fb      	strb	r3, [r7, #15]
 8000926:	7bfb      	ldrb	r3, [r7, #15]
 8000928:	2b03      	cmp	r3, #3
 800092a:	d9ef      	bls.n	800090c <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 800092c:	7abb      	ldrb	r3, [r7, #10]
 800092e:	2b01      	cmp	r3, #1
 8000930:	d17e      	bne.n	8000a30 <SD_disk_initialize+0x188>
 8000932:	7afb      	ldrb	r3, [r7, #11]
 8000934:	2baa      	cmp	r3, #170	@ 0xaa
 8000936:	d17b      	bne.n	8000a30 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000938:	2100      	movs	r1, #0
 800093a:	2077      	movs	r0, #119	@ 0x77
 800093c:	f7ff ff5f 	bl	80007fe <SD_SendCmd>
 8000940:	4603      	mov	r3, r0
 8000942:	2b01      	cmp	r3, #1
 8000944:	d807      	bhi.n	8000956 <SD_disk_initialize+0xae>
 8000946:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800094a:	2069      	movs	r0, #105	@ 0x69
 800094c:	f7ff ff57 	bl	80007fe <SD_SendCmd>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d004      	beq.n	8000960 <SD_disk_initialize+0xb8>
				} while (Timer1);
 8000956:	4b45      	ldr	r3, [pc, #276]	@ (8000a6c <SD_disk_initialize+0x1c4>)
 8000958:	881b      	ldrh	r3, [r3, #0]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d1ec      	bne.n	8000938 <SD_disk_initialize+0x90>
 800095e:	e000      	b.n	8000962 <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000960:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000962:	4b42      	ldr	r3, [pc, #264]	@ (8000a6c <SD_disk_initialize+0x1c4>)
 8000964:	881b      	ldrh	r3, [r3, #0]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d062      	beq.n	8000a30 <SD_disk_initialize+0x188>
 800096a:	2100      	movs	r1, #0
 800096c:	207a      	movs	r0, #122	@ 0x7a
 800096e:	f7ff ff46 	bl	80007fe <SD_SendCmd>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d15b      	bne.n	8000a30 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8000978:	2300      	movs	r3, #0
 800097a:	73fb      	strb	r3, [r7, #15]
 800097c:	e00c      	b.n	8000998 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 800097e:	7bfc      	ldrb	r4, [r7, #15]
 8000980:	f7ff fe2e 	bl	80005e0 <SPI_RxByte>
 8000984:	4603      	mov	r3, r0
 8000986:	461a      	mov	r2, r3
 8000988:	f104 0310 	add.w	r3, r4, #16
 800098c:	443b      	add	r3, r7
 800098e:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8000992:	7bfb      	ldrb	r3, [r7, #15]
 8000994:	3301      	adds	r3, #1
 8000996:	73fb      	strb	r3, [r7, #15]
 8000998:	7bfb      	ldrb	r3, [r7, #15]
 800099a:	2b03      	cmp	r3, #3
 800099c:	d9ef      	bls.n	800097e <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800099e:	7a3b      	ldrb	r3, [r7, #8]
 80009a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <SD_disk_initialize+0x104>
 80009a8:	230c      	movs	r3, #12
 80009aa:	e000      	b.n	80009ae <SD_disk_initialize+0x106>
 80009ac:	2304      	movs	r3, #4
 80009ae:	73bb      	strb	r3, [r7, #14]
 80009b0:	e03e      	b.n	8000a30 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80009b2:	2100      	movs	r1, #0
 80009b4:	2077      	movs	r0, #119	@ 0x77
 80009b6:	f7ff ff22 	bl	80007fe <SD_SendCmd>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b01      	cmp	r3, #1
 80009be:	d808      	bhi.n	80009d2 <SD_disk_initialize+0x12a>
 80009c0:	2100      	movs	r1, #0
 80009c2:	2069      	movs	r0, #105	@ 0x69
 80009c4:	f7ff ff1b 	bl	80007fe <SD_SendCmd>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b01      	cmp	r3, #1
 80009cc:	d801      	bhi.n	80009d2 <SD_disk_initialize+0x12a>
 80009ce:	2302      	movs	r3, #2
 80009d0:	e000      	b.n	80009d4 <SD_disk_initialize+0x12c>
 80009d2:	2301      	movs	r3, #1
 80009d4:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 80009d6:	7bbb      	ldrb	r3, [r7, #14]
 80009d8:	2b02      	cmp	r3, #2
 80009da:	d10e      	bne.n	80009fa <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80009dc:	2100      	movs	r1, #0
 80009de:	2077      	movs	r0, #119	@ 0x77
 80009e0:	f7ff ff0d 	bl	80007fe <SD_SendCmd>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b01      	cmp	r3, #1
 80009e8:	d80e      	bhi.n	8000a08 <SD_disk_initialize+0x160>
 80009ea:	2100      	movs	r1, #0
 80009ec:	2069      	movs	r0, #105	@ 0x69
 80009ee:	f7ff ff06 	bl	80007fe <SD_SendCmd>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d107      	bne.n	8000a08 <SD_disk_initialize+0x160>
 80009f8:	e00c      	b.n	8000a14 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80009fa:	2100      	movs	r1, #0
 80009fc:	2041      	movs	r0, #65	@ 0x41
 80009fe:	f7ff fefe 	bl	80007fe <SD_SendCmd>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d004      	beq.n	8000a12 <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8000a08:	4b18      	ldr	r3, [pc, #96]	@ (8000a6c <SD_disk_initialize+0x1c4>)
 8000a0a:	881b      	ldrh	r3, [r3, #0]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d1e2      	bne.n	80009d6 <SD_disk_initialize+0x12e>
 8000a10:	e000      	b.n	8000a14 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000a12:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000a14:	4b15      	ldr	r3, [pc, #84]	@ (8000a6c <SD_disk_initialize+0x1c4>)
 8000a16:	881b      	ldrh	r3, [r3, #0]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d007      	beq.n	8000a2c <SD_disk_initialize+0x184>
 8000a1c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a20:	2050      	movs	r0, #80	@ 0x50
 8000a22:	f7ff feec 	bl	80007fe <SD_SendCmd>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <SD_disk_initialize+0x188>
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8000a30:	4a0f      	ldr	r2, [pc, #60]	@ (8000a70 <SD_disk_initialize+0x1c8>)
 8000a32:	7bbb      	ldrb	r3, [r7, #14]
 8000a34:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8000a36:	f7ff fd91 	bl	800055c <DESELECT>
	SPI_RxByte();
 8000a3a:	f7ff fdd1 	bl	80005e0 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8000a3e:	7bbb      	ldrb	r3, [r7, #14]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d008      	beq.n	8000a56 <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8000a44:	4b08      	ldr	r3, [pc, #32]	@ (8000a68 <SD_disk_initialize+0x1c0>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	b2db      	uxtb	r3, r3
 8000a4a:	f023 0301 	bic.w	r3, r3, #1
 8000a4e:	b2da      	uxtb	r2, r3
 8000a50:	4b05      	ldr	r3, [pc, #20]	@ (8000a68 <SD_disk_initialize+0x1c0>)
 8000a52:	701a      	strb	r2, [r3, #0]
 8000a54:	e001      	b.n	8000a5a <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8000a56:	f7ff fe49 	bl	80006ec <SD_PowerOff>
	}

	return Stat;
 8000a5a:	4b03      	ldr	r3, [pc, #12]	@ (8000a68 <SD_disk_initialize+0x1c0>)
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	b2db      	uxtb	r3, r3
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	3714      	adds	r7, #20
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd90      	pop	{r4, r7, pc}
 8000a68:	20000000 	.word	0x20000000
 8000a6c:	20000040 	.word	0x20000040
 8000a70:	20000044 	.word	0x20000044

08000a74 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8000a74:	b480      	push	{r7}
 8000a76:	b083      	sub	sp, #12
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8000a7e:	79fb      	ldrb	r3, [r7, #7]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <SD_disk_status+0x14>
 8000a84:	2301      	movs	r3, #1
 8000a86:	e002      	b.n	8000a8e <SD_disk_status+0x1a>
	return Stat;
 8000a88:	4b04      	ldr	r3, [pc, #16]	@ (8000a9c <SD_disk_status+0x28>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	b2db      	uxtb	r3, r3
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	370c      	adds	r7, #12
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	20000000 	.word	0x20000000

08000aa0 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b084      	sub	sp, #16
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	60b9      	str	r1, [r7, #8]
 8000aa8:	607a      	str	r2, [r7, #4]
 8000aaa:	603b      	str	r3, [r7, #0]
 8000aac:	4603      	mov	r3, r0
 8000aae:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000ab0:	7bfb      	ldrb	r3, [r7, #15]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d102      	bne.n	8000abc <SD_disk_read+0x1c>
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d101      	bne.n	8000ac0 <SD_disk_read+0x20>
 8000abc:	2304      	movs	r3, #4
 8000abe:	e051      	b.n	8000b64 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000ac0:	4b2a      	ldr	r3, [pc, #168]	@ (8000b6c <SD_disk_read+0xcc>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	f003 0301 	and.w	r3, r3, #1
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <SD_disk_read+0x32>
 8000ace:	2303      	movs	r3, #3
 8000ad0:	e048      	b.n	8000b64 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000ad2:	4b27      	ldr	r3, [pc, #156]	@ (8000b70 <SD_disk_read+0xd0>)
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	f003 0304 	and.w	r3, r3, #4
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d102      	bne.n	8000ae4 <SD_disk_read+0x44>
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	025b      	lsls	r3, r3, #9
 8000ae2:	607b      	str	r3, [r7, #4]

	SELECT();
 8000ae4:	f7ff fd2c 	bl	8000540 <SELECT>

	if (count == 1)
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	2b01      	cmp	r3, #1
 8000aec:	d111      	bne.n	8000b12 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000aee:	6879      	ldr	r1, [r7, #4]
 8000af0:	2051      	movs	r0, #81	@ 0x51
 8000af2:	f7ff fe84 	bl	80007fe <SD_SendCmd>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d129      	bne.n	8000b50 <SD_disk_read+0xb0>
 8000afc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b00:	68b8      	ldr	r0, [r7, #8]
 8000b02:	f7ff fe0b 	bl	800071c <SD_RxDataBlock>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d021      	beq.n	8000b50 <SD_disk_read+0xb0>
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	603b      	str	r3, [r7, #0]
 8000b10:	e01e      	b.n	8000b50 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000b12:	6879      	ldr	r1, [r7, #4]
 8000b14:	2052      	movs	r0, #82	@ 0x52
 8000b16:	f7ff fe72 	bl	80007fe <SD_SendCmd>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d117      	bne.n	8000b50 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000b20:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b24:	68b8      	ldr	r0, [r7, #8]
 8000b26:	f7ff fdf9 	bl	800071c <SD_RxDataBlock>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d00a      	beq.n	8000b46 <SD_disk_read+0xa6>
				buff += 512;
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000b36:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	3b01      	subs	r3, #1
 8000b3c:	603b      	str	r3, [r7, #0]
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d1ed      	bne.n	8000b20 <SD_disk_read+0x80>
 8000b44:	e000      	b.n	8000b48 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8000b46:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000b48:	2100      	movs	r1, #0
 8000b4a:	204c      	movs	r0, #76	@ 0x4c
 8000b4c:	f7ff fe57 	bl	80007fe <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000b50:	f7ff fd04 	bl	800055c <DESELECT>
	SPI_RxByte();
 8000b54:	f7ff fd44 	bl	80005e0 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	bf14      	ite	ne
 8000b5e:	2301      	movne	r3, #1
 8000b60:	2300      	moveq	r3, #0
 8000b62:	b2db      	uxtb	r3, r3
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	3710      	adds	r7, #16
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	20000000 	.word	0x20000000
 8000b70:	20000044 	.word	0x20000044

08000b74 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b084      	sub	sp, #16
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	60b9      	str	r1, [r7, #8]
 8000b7c:	607a      	str	r2, [r7, #4]
 8000b7e:	603b      	str	r3, [r7, #0]
 8000b80:	4603      	mov	r3, r0
 8000b82:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000b84:	7bfb      	ldrb	r3, [r7, #15]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d102      	bne.n	8000b90 <SD_disk_write+0x1c>
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d101      	bne.n	8000b94 <SD_disk_write+0x20>
 8000b90:	2304      	movs	r3, #4
 8000b92:	e06b      	b.n	8000c6c <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000b94:	4b37      	ldr	r3, [pc, #220]	@ (8000c74 <SD_disk_write+0x100>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	b2db      	uxtb	r3, r3
 8000b9a:	f003 0301 	and.w	r3, r3, #1
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <SD_disk_write+0x32>
 8000ba2:	2303      	movs	r3, #3
 8000ba4:	e062      	b.n	8000c6c <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8000ba6:	4b33      	ldr	r3, [pc, #204]	@ (8000c74 <SD_disk_write+0x100>)
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	b2db      	uxtb	r3, r3
 8000bac:	f003 0304 	and.w	r3, r3, #4
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <SD_disk_write+0x44>
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	e059      	b.n	8000c6c <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000bb8:	4b2f      	ldr	r3, [pc, #188]	@ (8000c78 <SD_disk_write+0x104>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	f003 0304 	and.w	r3, r3, #4
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d102      	bne.n	8000bca <SD_disk_write+0x56>
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	025b      	lsls	r3, r3, #9
 8000bc8:	607b      	str	r3, [r7, #4]

	SELECT();
 8000bca:	f7ff fcb9 	bl	8000540 <SELECT>

	if (count == 1)
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	2b01      	cmp	r3, #1
 8000bd2:	d110      	bne.n	8000bf6 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000bd4:	6879      	ldr	r1, [r7, #4]
 8000bd6:	2058      	movs	r0, #88	@ 0x58
 8000bd8:	f7ff fe11 	bl	80007fe <SD_SendCmd>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d13a      	bne.n	8000c58 <SD_disk_write+0xe4>
 8000be2:	21fe      	movs	r1, #254	@ 0xfe
 8000be4:	68b8      	ldr	r0, [r7, #8]
 8000be6:	f7ff fdc7 	bl	8000778 <SD_TxDataBlock>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d033      	beq.n	8000c58 <SD_disk_write+0xe4>
			count = 0;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	603b      	str	r3, [r7, #0]
 8000bf4:	e030      	b.n	8000c58 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8000bf6:	4b20      	ldr	r3, [pc, #128]	@ (8000c78 <SD_disk_write+0x104>)
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	f003 0302 	and.w	r3, r3, #2
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d007      	beq.n	8000c12 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8000c02:	2100      	movs	r1, #0
 8000c04:	2077      	movs	r0, #119	@ 0x77
 8000c06:	f7ff fdfa 	bl	80007fe <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8000c0a:	6839      	ldr	r1, [r7, #0]
 8000c0c:	2057      	movs	r0, #87	@ 0x57
 8000c0e:	f7ff fdf6 	bl	80007fe <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8000c12:	6879      	ldr	r1, [r7, #4]
 8000c14:	2059      	movs	r0, #89	@ 0x59
 8000c16:	f7ff fdf2 	bl	80007fe <SD_SendCmd>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d11b      	bne.n	8000c58 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000c20:	21fc      	movs	r1, #252	@ 0xfc
 8000c22:	68b8      	ldr	r0, [r7, #8]
 8000c24:	f7ff fda8 	bl	8000778 <SD_TxDataBlock>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d00a      	beq.n	8000c44 <SD_disk_write+0xd0>
				buff += 512;
 8000c2e:	68bb      	ldr	r3, [r7, #8]
 8000c30:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000c34:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	3b01      	subs	r3, #1
 8000c3a:	603b      	str	r3, [r7, #0]
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d1ee      	bne.n	8000c20 <SD_disk_write+0xac>
 8000c42:	e000      	b.n	8000c46 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000c44:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8000c46:	21fd      	movs	r1, #253	@ 0xfd
 8000c48:	2000      	movs	r0, #0
 8000c4a:	f7ff fd95 	bl	8000778 <SD_TxDataBlock>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d101      	bne.n	8000c58 <SD_disk_write+0xe4>
			{
				count = 1;
 8000c54:	2301      	movs	r3, #1
 8000c56:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8000c58:	f7ff fc80 	bl	800055c <DESELECT>
	SPI_RxByte();
 8000c5c:	f7ff fcc0 	bl	80005e0 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	bf14      	ite	ne
 8000c66:	2301      	movne	r3, #1
 8000c68:	2300      	moveq	r3, #0
 8000c6a:	b2db      	uxtb	r3, r3
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3710      	adds	r7, #16
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	20000000 	.word	0x20000000
 8000c78:	20000044 	.word	0x20000044

08000c7c <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8000c7c:	b590      	push	{r4, r7, lr}
 8000c7e:	b08b      	sub	sp, #44	@ 0x2c
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	603a      	str	r2, [r7, #0]
 8000c86:	71fb      	strb	r3, [r7, #7]
 8000c88:	460b      	mov	r3, r1
 8000c8a:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8000c90:	79fb      	ldrb	r3, [r7, #7]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <SD_disk_ioctl+0x1e>
 8000c96:	2304      	movs	r3, #4
 8000c98:	e113      	b.n	8000ec2 <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (ctrl == CTRL_POWER)
 8000ca0:	79bb      	ldrb	r3, [r7, #6]
 8000ca2:	2b05      	cmp	r3, #5
 8000ca4:	d124      	bne.n	8000cf0 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8000ca6:	6a3b      	ldr	r3, [r7, #32]
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	2b02      	cmp	r3, #2
 8000cac:	d012      	beq.n	8000cd4 <SD_disk_ioctl+0x58>
 8000cae:	2b02      	cmp	r3, #2
 8000cb0:	dc1a      	bgt.n	8000ce8 <SD_disk_ioctl+0x6c>
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d002      	beq.n	8000cbc <SD_disk_ioctl+0x40>
 8000cb6:	2b01      	cmp	r3, #1
 8000cb8:	d006      	beq.n	8000cc8 <SD_disk_ioctl+0x4c>
 8000cba:	e015      	b.n	8000ce8 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8000cbc:	f7ff fd16 	bl	80006ec <SD_PowerOff>
			res = RES_OK;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000cc6:	e0fa      	b.n	8000ebe <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 8000cc8:	f7ff fcce 	bl	8000668 <SD_PowerOn>
			res = RES_OK;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000cd2:	e0f4      	b.n	8000ebe <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8000cd4:	6a3b      	ldr	r3, [r7, #32]
 8000cd6:	1c5c      	adds	r4, r3, #1
 8000cd8:	f7ff fd14 	bl	8000704 <SD_CheckPower>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000ce6:	e0ea      	b.n	8000ebe <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 8000ce8:	2304      	movs	r3, #4
 8000cea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000cee:	e0e6      	b.n	8000ebe <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000cf0:	4b76      	ldr	r3, [pc, #472]	@ (8000ecc <SD_disk_ioctl+0x250>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	f003 0301 	and.w	r3, r3, #1
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <SD_disk_ioctl+0x86>
 8000cfe:	2303      	movs	r3, #3
 8000d00:	e0df      	b.n	8000ec2 <SD_disk_ioctl+0x246>

		SELECT();
 8000d02:	f7ff fc1d 	bl	8000540 <SELECT>

		switch (ctrl)
 8000d06:	79bb      	ldrb	r3, [r7, #6]
 8000d08:	2b0d      	cmp	r3, #13
 8000d0a:	f200 80c9 	bhi.w	8000ea0 <SD_disk_ioctl+0x224>
 8000d0e:	a201      	add	r2, pc, #4	@ (adr r2, 8000d14 <SD_disk_ioctl+0x98>)
 8000d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d14:	08000e0b 	.word	0x08000e0b
 8000d18:	08000d4d 	.word	0x08000d4d
 8000d1c:	08000dfb 	.word	0x08000dfb
 8000d20:	08000ea1 	.word	0x08000ea1
 8000d24:	08000ea1 	.word	0x08000ea1
 8000d28:	08000ea1 	.word	0x08000ea1
 8000d2c:	08000ea1 	.word	0x08000ea1
 8000d30:	08000ea1 	.word	0x08000ea1
 8000d34:	08000ea1 	.word	0x08000ea1
 8000d38:	08000ea1 	.word	0x08000ea1
 8000d3c:	08000ea1 	.word	0x08000ea1
 8000d40:	08000e1d 	.word	0x08000e1d
 8000d44:	08000e41 	.word	0x08000e41
 8000d48:	08000e65 	.word	0x08000e65
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	2049      	movs	r0, #73	@ 0x49
 8000d50:	f7ff fd55 	bl	80007fe <SD_SendCmd>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	f040 80a6 	bne.w	8000ea8 <SD_disk_ioctl+0x22c>
 8000d5c:	f107 030c 	add.w	r3, r7, #12
 8000d60:	2110      	movs	r1, #16
 8000d62:	4618      	mov	r0, r3
 8000d64:	f7ff fcda 	bl	800071c <SD_RxDataBlock>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	f000 809c 	beq.w	8000ea8 <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 8000d70:	7b3b      	ldrb	r3, [r7, #12]
 8000d72:	099b      	lsrs	r3, r3, #6
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	d10d      	bne.n	8000d96 <SD_disk_ioctl+0x11a>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000d7a:	7d7b      	ldrb	r3, [r7, #21]
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	7d3b      	ldrb	r3, [r7, #20]
 8000d80:	021b      	lsls	r3, r3, #8
 8000d82:	b29b      	uxth	r3, r3
 8000d84:	4413      	add	r3, r2
 8000d86:	b29b      	uxth	r3, r3
 8000d88:	3301      	adds	r3, #1
 8000d8a:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8000d8c:	8bfb      	ldrh	r3, [r7, #30]
 8000d8e:	029a      	lsls	r2, r3, #10
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	e02d      	b.n	8000df2 <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000d96:	7c7b      	ldrb	r3, [r7, #17]
 8000d98:	f003 030f 	and.w	r3, r3, #15
 8000d9c:	b2da      	uxtb	r2, r3
 8000d9e:	7dbb      	ldrb	r3, [r7, #22]
 8000da0:	09db      	lsrs	r3, r3, #7
 8000da2:	b2db      	uxtb	r3, r3
 8000da4:	4413      	add	r3, r2
 8000da6:	b2da      	uxtb	r2, r3
 8000da8:	7d7b      	ldrb	r3, [r7, #21]
 8000daa:	005b      	lsls	r3, r3, #1
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	f003 0306 	and.w	r3, r3, #6
 8000db2:	b2db      	uxtb	r3, r3
 8000db4:	4413      	add	r3, r2
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	3302      	adds	r3, #2
 8000dba:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000dbe:	7d3b      	ldrb	r3, [r7, #20]
 8000dc0:	099b      	lsrs	r3, r3, #6
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	7cfb      	ldrb	r3, [r7, #19]
 8000dc8:	009b      	lsls	r3, r3, #2
 8000dca:	b29b      	uxth	r3, r3
 8000dcc:	4413      	add	r3, r2
 8000dce:	b29a      	uxth	r2, r3
 8000dd0:	7cbb      	ldrb	r3, [r7, #18]
 8000dd2:	029b      	lsls	r3, r3, #10
 8000dd4:	b29b      	uxth	r3, r3
 8000dd6:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000dda:	b29b      	uxth	r3, r3
 8000ddc:	4413      	add	r3, r2
 8000dde:	b29b      	uxth	r3, r3
 8000de0:	3301      	adds	r3, #1
 8000de2:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8000de4:	8bfa      	ldrh	r2, [r7, #30]
 8000de6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000dea:	3b09      	subs	r3, #9
 8000dec:	409a      	lsls	r2, r3
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8000df2:	2300      	movs	r3, #0
 8000df4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 8000df8:	e056      	b.n	8000ea8 <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e00:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8000e02:	2300      	movs	r3, #0
 8000e04:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000e08:	e055      	b.n	8000eb6 <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000e0a:	f7ff fc13 	bl	8000634 <SD_ReadyWait>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2bff      	cmp	r3, #255	@ 0xff
 8000e12:	d14b      	bne.n	8000eac <SD_disk_ioctl+0x230>
 8000e14:	2300      	movs	r3, #0
 8000e16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000e1a:	e047      	b.n	8000eac <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	2049      	movs	r0, #73	@ 0x49
 8000e20:	f7ff fced 	bl	80007fe <SD_SendCmd>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d142      	bne.n	8000eb0 <SD_disk_ioctl+0x234>
 8000e2a:	2110      	movs	r1, #16
 8000e2c:	6a38      	ldr	r0, [r7, #32]
 8000e2e:	f7ff fc75 	bl	800071c <SD_RxDataBlock>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d03b      	beq.n	8000eb0 <SD_disk_ioctl+0x234>
 8000e38:	2300      	movs	r3, #0
 8000e3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000e3e:	e037      	b.n	8000eb0 <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000e40:	2100      	movs	r1, #0
 8000e42:	204a      	movs	r0, #74	@ 0x4a
 8000e44:	f7ff fcdb 	bl	80007fe <SD_SendCmd>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d132      	bne.n	8000eb4 <SD_disk_ioctl+0x238>
 8000e4e:	2110      	movs	r1, #16
 8000e50:	6a38      	ldr	r0, [r7, #32]
 8000e52:	f7ff fc63 	bl	800071c <SD_RxDataBlock>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d02b      	beq.n	8000eb4 <SD_disk_ioctl+0x238>
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000e62:	e027      	b.n	8000eb4 <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8000e64:	2100      	movs	r1, #0
 8000e66:	207a      	movs	r0, #122	@ 0x7a
 8000e68:	f7ff fcc9 	bl	80007fe <SD_SendCmd>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d116      	bne.n	8000ea0 <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 8000e72:	2300      	movs	r3, #0
 8000e74:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000e78:	e00b      	b.n	8000e92 <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 8000e7a:	6a3c      	ldr	r4, [r7, #32]
 8000e7c:	1c63      	adds	r3, r4, #1
 8000e7e:	623b      	str	r3, [r7, #32]
 8000e80:	f7ff fbae 	bl	80005e0 <SPI_RxByte>
 8000e84:	4603      	mov	r3, r0
 8000e86:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8000e88:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000e92:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000e96:	2b03      	cmp	r3, #3
 8000e98:	d9ef      	bls.n	8000e7a <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		default:
			res = RES_PARERR;
 8000ea0:	2304      	movs	r3, #4
 8000ea2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000ea6:	e006      	b.n	8000eb6 <SD_disk_ioctl+0x23a>
			break;
 8000ea8:	bf00      	nop
 8000eaa:	e004      	b.n	8000eb6 <SD_disk_ioctl+0x23a>
			break;
 8000eac:	bf00      	nop
 8000eae:	e002      	b.n	8000eb6 <SD_disk_ioctl+0x23a>
			break;
 8000eb0:	bf00      	nop
 8000eb2:	e000      	b.n	8000eb6 <SD_disk_ioctl+0x23a>
			break;
 8000eb4:	bf00      	nop
		}

		DESELECT();
 8000eb6:	f7ff fb51 	bl	800055c <DESELECT>
		SPI_RxByte();
 8000eba:	f7ff fb91 	bl	80005e0 <SPI_RxByte>
	}

	return res;
 8000ebe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	372c      	adds	r7, #44	@ 0x2c
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd90      	pop	{r4, r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	20000000 	.word	0x20000000

08000ed0 <transmit_uart_it>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Función para enviar texto por UART
void transmit_uart_it(char *string) {
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)string, strlen(string), HAL_MAX_DELAY);
 8000ed8:	6878      	ldr	r0, [r7, #4]
 8000eda:	f7ff f993 	bl	8000204 <strlen>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	b29a      	uxth	r2, r3
 8000ee2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ee6:	6879      	ldr	r1, [r7, #4]
 8000ee8:	4803      	ldr	r0, [pc, #12]	@ (8000ef8 <transmit_uart_it+0x28>)
 8000eea:	f002 fdb7 	bl	8003a5c <HAL_UART_Transmit>
}
 8000eee:	bf00      	nop
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	200000a0 	.word	0x200000a0

08000efc <show_menu>:

// Función para mostrar el menú
void show_menu() {
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
	transmit_uart_it("\nSeleccione un archivo de texto para visualizar:\n");
 8000f00:	4809      	ldr	r0, [pc, #36]	@ (8000f28 <show_menu+0x2c>)
 8000f02:	f7ff ffe5 	bl	8000ed0 <transmit_uart_it>
	transmit_uart_it("1 - archivo1.txt\n");
 8000f06:	4809      	ldr	r0, [pc, #36]	@ (8000f2c <show_menu+0x30>)
 8000f08:	f7ff ffe2 	bl	8000ed0 <transmit_uart_it>
	transmit_uart_it("2 - archivo2.txt\n");
 8000f0c:	4808      	ldr	r0, [pc, #32]	@ (8000f30 <show_menu+0x34>)
 8000f0e:	f7ff ffdf 	bl	8000ed0 <transmit_uart_it>
	transmit_uart_it("3 - archivo3.txt\n");
 8000f12:	4808      	ldr	r0, [pc, #32]	@ (8000f34 <show_menu+0x38>)
 8000f14:	f7ff ffdc 	bl	8000ed0 <transmit_uart_it>
	transmit_uart_it("4 - salir\n");
 8000f18:	4807      	ldr	r0, [pc, #28]	@ (8000f38 <show_menu+0x3c>)
 8000f1a:	f7ff ffd9 	bl	8000ed0 <transmit_uart_it>
	transmit_uart_it("Ingrese su opción: ");
 8000f1e:	4807      	ldr	r0, [pc, #28]	@ (8000f3c <show_menu+0x40>)
 8000f20:	f7ff ffd6 	bl	8000ed0 <transmit_uart_it>
}
 8000f24:	bf00      	nop
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	08007a58 	.word	0x08007a58
 8000f2c:	08007a8c 	.word	0x08007a8c
 8000f30:	08007aa0 	.word	0x08007aa0
 8000f34:	08007ab4 	.word	0x08007ab4
 8000f38:	08007ac8 	.word	0x08007ac8
 8000f3c:	08007ad4 	.word	0x08007ad4

08000f40 <read_text_file>:

// Función para leer un archivo de texto desde la SD y enviarlo por UART
void read_text_file(const char *filename) {
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
    fres = f_open(&fil, filename, FA_READ);
 8000f48:	2201      	movs	r2, #1
 8000f4a:	6879      	ldr	r1, [r7, #4]
 8000f4c:	4819      	ldr	r0, [pc, #100]	@ (8000fb4 <read_text_file+0x74>)
 8000f4e:	f006 f81b 	bl	8006f88 <f_open>
 8000f52:	4603      	mov	r3, r0
 8000f54:	461a      	mov	r2, r3
 8000f56:	4b18      	ldr	r3, [pc, #96]	@ (8000fb8 <read_text_file+0x78>)
 8000f58:	701a      	strb	r2, [r3, #0]
    if (fres == FR_OK) {
 8000f5a:	4b17      	ldr	r3, [pc, #92]	@ (8000fb8 <read_text_file+0x78>)
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d121      	bne.n	8000fa6 <read_text_file+0x66>
        transmit_uart_it("\nArchivo abierto correctamente.\n");
 8000f62:	4816      	ldr	r0, [pc, #88]	@ (8000fbc <read_text_file+0x7c>)
 8000f64:	f7ff ffb4 	bl	8000ed0 <transmit_uart_it>

        while (f_gets(buffer, sizeof(buffer), &fil)) {
 8000f68:	e002      	b.n	8000f70 <read_text_file+0x30>
            transmit_uart_it(buffer);
 8000f6a:	4815      	ldr	r0, [pc, #84]	@ (8000fc0 <read_text_file+0x80>)
 8000f6c:	f7ff ffb0 	bl	8000ed0 <transmit_uart_it>
        while (f_gets(buffer, sizeof(buffer), &fil)) {
 8000f70:	4a10      	ldr	r2, [pc, #64]	@ (8000fb4 <read_text_file+0x74>)
 8000f72:	2164      	movs	r1, #100	@ 0x64
 8000f74:	4812      	ldr	r0, [pc, #72]	@ (8000fc0 <read_text_file+0x80>)
 8000f76:	f006 fbd6 	bl	8007726 <f_gets>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d1f4      	bne.n	8000f6a <read_text_file+0x2a>
        }

        f_close(&fil); // Cerrar archivo después de leer
 8000f80:	480c      	ldr	r0, [pc, #48]	@ (8000fb4 <read_text_file+0x74>)
 8000f82:	f006 fba6 	bl	80076d2 <f_close>
        if (fres == FR_OK) {
 8000f86:	4b0c      	ldr	r3, [pc, #48]	@ (8000fb8 <read_text_file+0x78>)
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d103      	bne.n	8000f96 <read_text_file+0x56>
          transmit_uart_it("The file is closed.\n");
 8000f8e:	480d      	ldr	r0, [pc, #52]	@ (8000fc4 <read_text_file+0x84>)
 8000f90:	f7ff ff9e 	bl	8000ed0 <transmit_uart_it>
        }
        //transmit_uart_it("\nArchivo cerrado correctamente.\n");
    } else {
        transmit_uart_it("\nError al abrir el archivo.\n");
    }
}
 8000f94:	e00a      	b.n	8000fac <read_text_file+0x6c>
        } else if (fres != FR_OK) {
 8000f96:	4b08      	ldr	r3, [pc, #32]	@ (8000fb8 <read_text_file+0x78>)
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d006      	beq.n	8000fac <read_text_file+0x6c>
          transmit_uart_it("The file was not closed.\n");
 8000f9e:	480a      	ldr	r0, [pc, #40]	@ (8000fc8 <read_text_file+0x88>)
 8000fa0:	f7ff ff96 	bl	8000ed0 <transmit_uart_it>
}
 8000fa4:	e002      	b.n	8000fac <read_text_file+0x6c>
        transmit_uart_it("\nError al abrir el archivo.\n");
 8000fa6:	4809      	ldr	r0, [pc, #36]	@ (8000fcc <read_text_file+0x8c>)
 8000fa8:	f7ff ff92 	bl	8000ed0 <transmit_uart_it>
}
 8000fac:	bf00      	nop
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	200011e0 	.word	0x200011e0
 8000fb8:	20002210 	.word	0x20002210
 8000fbc:	08007aec 	.word	0x08007aec
 8000fc0:	20002214 	.word	0x20002214
 8000fc4:	08007b10 	.word	0x08007b10
 8000fc8:	08007b28 	.word	0x08007b28
 8000fcc:	08007b44 	.word	0x08007b44

08000fd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fd4:	f000 fbda 	bl	800178c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fd8:	f000 f898 	bl	800110c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fdc:	f000 f98c 	bl	80012f8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000fe0:	f000 f962 	bl	80012a8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000fe4:	f000 f936 	bl	8001254 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000fe8:	f000 f8fe 	bl	80011e8 <MX_SPI1_Init>
  MX_FATFS_Init();
 8000fec:	f003 fd3c 	bl	8004a68 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  //Montar SD
  fres = f_mount(&fs, "/", 0);
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	4935      	ldr	r1, [pc, #212]	@ (80010c8 <main+0xf8>)
 8000ff4:	4835      	ldr	r0, [pc, #212]	@ (80010cc <main+0xfc>)
 8000ff6:	f005 ff81 	bl	8006efc <f_mount>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	4b34      	ldr	r3, [pc, #208]	@ (80010d0 <main+0x100>)
 8001000:	701a      	strb	r2, [r3, #0]
  if (fres == FR_OK) {
 8001002:	4b33      	ldr	r3, [pc, #204]	@ (80010d0 <main+0x100>)
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d103      	bne.n	8001012 <main+0x42>
    transmit_uart_it("Micro SD card is mounted successfully!\n");
 800100a:	4832      	ldr	r0, [pc, #200]	@ (80010d4 <main+0x104>)
 800100c:	f7ff ff60 	bl	8000ed0 <transmit_uart_it>
 8001010:	e006      	b.n	8001020 <main+0x50>
  } else if (fres != FR_OK) {
 8001012:	4b2f      	ldr	r3, [pc, #188]	@ (80010d0 <main+0x100>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d002      	beq.n	8001020 <main+0x50>
    transmit_uart_it("Micro SD card's mount error!\n");
 800101a:	482f      	ldr	r0, [pc, #188]	@ (80010d8 <main+0x108>)
 800101c:	f7ff ff58 	bl	8000ed0 <transmit_uart_it>
  }

  HAL_UART_Receive_IT(&huart2, &rxData, 1); // Activar interrupción UART
 8001020:	2201      	movs	r2, #1
 8001022:	492e      	ldr	r1, [pc, #184]	@ (80010dc <main+0x10c>)
 8001024:	482e      	ldr	r0, [pc, #184]	@ (80010e0 <main+0x110>)
 8001026:	f002 fda4 	bl	8003b72 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){
	  show_menu();
 800102a:	f7ff ff67 	bl	8000efc <show_menu>
	  while (userChoice == 0); // Esperar a que el usuario ingrese una opción
 800102e:	bf00      	nop
 8001030:	4b2c      	ldr	r3, [pc, #176]	@ (80010e4 <main+0x114>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	b2db      	uxtb	r3, r3
 8001036:	2b00      	cmp	r3, #0
 8001038:	d0fa      	beq.n	8001030 <main+0x60>

	  switch (userChoice) {
 800103a:	4b2a      	ldr	r3, [pc, #168]	@ (80010e4 <main+0x114>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	b2db      	uxtb	r3, r3
 8001040:	3b31      	subs	r3, #49	@ 0x31
 8001042:	2b03      	cmp	r3, #3
 8001044:	d81d      	bhi.n	8001082 <main+0xb2>
 8001046:	a201      	add	r2, pc, #4	@ (adr r2, 800104c <main+0x7c>)
 8001048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800104c:	0800105d 	.word	0x0800105d
 8001050:	08001065 	.word	0x08001065
 8001054:	0800106d 	.word	0x0800106d
 8001058:	08001075 	.word	0x08001075
	  	  case '1': read_text_file("archivo1.txt"); break;
 800105c:	4822      	ldr	r0, [pc, #136]	@ (80010e8 <main+0x118>)
 800105e:	f7ff ff6f 	bl	8000f40 <read_text_file>
 8001062:	e012      	b.n	800108a <main+0xba>
	  	  case '2': read_text_file("archivo2.txt"); break;
 8001064:	4821      	ldr	r0, [pc, #132]	@ (80010ec <main+0x11c>)
 8001066:	f7ff ff6b 	bl	8000f40 <read_text_file>
 800106a:	e00e      	b.n	800108a <main+0xba>
	  	  case '3': read_text_file("archivo3.txt"); break;
 800106c:	4820      	ldr	r0, [pc, #128]	@ (80010f0 <main+0x120>)
 800106e:	f7ff ff67 	bl	8000f40 <read_text_file>
 8001072:	e00a      	b.n	800108a <main+0xba>
	  	  case '4': transmit_uart_it("salio"); salir = 1; break;
 8001074:	481f      	ldr	r0, [pc, #124]	@ (80010f4 <main+0x124>)
 8001076:	f7ff ff2b 	bl	8000ed0 <transmit_uart_it>
 800107a:	4b1f      	ldr	r3, [pc, #124]	@ (80010f8 <main+0x128>)
 800107c:	2201      	movs	r2, #1
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	e003      	b.n	800108a <main+0xba>
	  	  default: transmit_uart_it("\nOpción no válida.\n"); break;
 8001082:	481e      	ldr	r0, [pc, #120]	@ (80010fc <main+0x12c>)
 8001084:	f7ff ff24 	bl	8000ed0 <transmit_uart_it>
 8001088:	bf00      	nop
	  }

	  if (salir == 1) {
 800108a:	4b1b      	ldr	r3, [pc, #108]	@ (80010f8 <main+0x128>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	2b01      	cmp	r3, #1
 8001090:	d113      	bne.n	80010ba <main+0xea>
		  f_mount(NULL, "", 1);
 8001092:	2201      	movs	r2, #1
 8001094:	491a      	ldr	r1, [pc, #104]	@ (8001100 <main+0x130>)
 8001096:	2000      	movs	r0, #0
 8001098:	f005 ff30 	bl	8006efc <f_mount>
		  if (fres == FR_OK) {
 800109c:	4b0c      	ldr	r3, [pc, #48]	@ (80010d0 <main+0x100>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d103      	bne.n	80010ac <main+0xdc>
		    transmit_uart_it("The Micro SD card is unmounted!\n");
 80010a4:	4817      	ldr	r0, [pc, #92]	@ (8001104 <main+0x134>)
 80010a6:	f7ff ff13 	bl	8000ed0 <transmit_uart_it>
 80010aa:	e006      	b.n	80010ba <main+0xea>
		  } else if (fres != FR_OK) {
 80010ac:	4b08      	ldr	r3, [pc, #32]	@ (80010d0 <main+0x100>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d002      	beq.n	80010ba <main+0xea>
		    transmit_uart_it("The Micro SD was not unmounted!");
 80010b4:	4814      	ldr	r0, [pc, #80]	@ (8001108 <main+0x138>)
 80010b6:	f7ff ff0b 	bl	8000ed0 <transmit_uart_it>
		  }
	  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  userChoice = 0; // Resetear la opción del usuario para la próxima iteración
 80010ba:	4b0a      	ldr	r3, [pc, #40]	@ (80010e4 <main+0x114>)
 80010bc:	2200      	movs	r2, #0
 80010be:	701a      	strb	r2, [r3, #0]
	  salir = 0;
 80010c0:	4b0d      	ldr	r3, [pc, #52]	@ (80010f8 <main+0x128>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
	  show_menu();
 80010c6:	e7b0      	b.n	800102a <main+0x5a>
 80010c8:	08007b64 	.word	0x08007b64
 80010cc:	200001a8 	.word	0x200001a8
 80010d0:	20002210 	.word	0x20002210
 80010d4:	08007b68 	.word	0x08007b68
 80010d8:	08007b90 	.word	0x08007b90
 80010dc:	20002278 	.word	0x20002278
 80010e0:	200000a0 	.word	0x200000a0
 80010e4:	20002279 	.word	0x20002279
 80010e8:	08007bb0 	.word	0x08007bb0
 80010ec:	08007bc0 	.word	0x08007bc0
 80010f0:	08007bd0 	.word	0x08007bd0
 80010f4:	08007be0 	.word	0x08007be0
 80010f8:	2000227c 	.word	0x2000227c
 80010fc:	08007be8 	.word	0x08007be8
 8001100:	08007c00 	.word	0x08007c00
 8001104:	08007c04 	.word	0x08007c04
 8001108:	08007c28 	.word	0x08007c28

0800110c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b094      	sub	sp, #80	@ 0x50
 8001110:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001112:	f107 031c 	add.w	r3, r7, #28
 8001116:	2234      	movs	r2, #52	@ 0x34
 8001118:	2100      	movs	r1, #0
 800111a:	4618      	mov	r0, r3
 800111c:	f006 fc64 	bl	80079e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001120:	f107 0308 	add.w	r3, r7, #8
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	605a      	str	r2, [r3, #4]
 800112a:	609a      	str	r2, [r3, #8]
 800112c:	60da      	str	r2, [r3, #12]
 800112e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001130:	2300      	movs	r3, #0
 8001132:	607b      	str	r3, [r7, #4]
 8001134:	4b2a      	ldr	r3, [pc, #168]	@ (80011e0 <SystemClock_Config+0xd4>)
 8001136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001138:	4a29      	ldr	r2, [pc, #164]	@ (80011e0 <SystemClock_Config+0xd4>)
 800113a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800113e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001140:	4b27      	ldr	r3, [pc, #156]	@ (80011e0 <SystemClock_Config+0xd4>)
 8001142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001144:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001148:	607b      	str	r3, [r7, #4]
 800114a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800114c:	2300      	movs	r3, #0
 800114e:	603b      	str	r3, [r7, #0]
 8001150:	4b24      	ldr	r3, [pc, #144]	@ (80011e4 <SystemClock_Config+0xd8>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001158:	4a22      	ldr	r2, [pc, #136]	@ (80011e4 <SystemClock_Config+0xd8>)
 800115a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800115e:	6013      	str	r3, [r2, #0]
 8001160:	4b20      	ldr	r3, [pc, #128]	@ (80011e4 <SystemClock_Config+0xd8>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001168:	603b      	str	r3, [r7, #0]
 800116a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800116c:	2302      	movs	r3, #2
 800116e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001170:	2301      	movs	r3, #1
 8001172:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001174:	2310      	movs	r3, #16
 8001176:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001178:	2302      	movs	r3, #2
 800117a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800117c:	2300      	movs	r3, #0
 800117e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001180:	2310      	movs	r3, #16
 8001182:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001184:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001188:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800118a:	2304      	movs	r3, #4
 800118c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800118e:	2302      	movs	r3, #2
 8001190:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001192:	2302      	movs	r3, #2
 8001194:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001196:	f107 031c 	add.w	r3, r7, #28
 800119a:	4618      	mov	r0, r3
 800119c:	f001 fd1e 	bl	8002bdc <HAL_RCC_OscConfig>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80011a6:	f000 f923 	bl	80013f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011aa:	230f      	movs	r3, #15
 80011ac:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011ae:	2302      	movs	r3, #2
 80011b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011b2:	2300      	movs	r3, #0
 80011b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011bc:	2300      	movs	r3, #0
 80011be:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011c0:	f107 0308 	add.w	r3, r7, #8
 80011c4:	2102      	movs	r1, #2
 80011c6:	4618      	mov	r0, r3
 80011c8:	f001 f9be 	bl	8002548 <HAL_RCC_ClockConfig>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80011d2:	f000 f90d 	bl	80013f0 <Error_Handler>
  }
}
 80011d6:	bf00      	nop
 80011d8:	3750      	adds	r7, #80	@ 0x50
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	40023800 	.word	0x40023800
 80011e4:	40007000 	.word	0x40007000

080011e8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80011ec:	4b17      	ldr	r3, [pc, #92]	@ (800124c <MX_SPI1_Init+0x64>)
 80011ee:	4a18      	ldr	r2, [pc, #96]	@ (8001250 <MX_SPI1_Init+0x68>)
 80011f0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011f2:	4b16      	ldr	r3, [pc, #88]	@ (800124c <MX_SPI1_Init+0x64>)
 80011f4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80011f8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011fa:	4b14      	ldr	r3, [pc, #80]	@ (800124c <MX_SPI1_Init+0x64>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001200:	4b12      	ldr	r3, [pc, #72]	@ (800124c <MX_SPI1_Init+0x64>)
 8001202:	2200      	movs	r2, #0
 8001204:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001206:	4b11      	ldr	r3, [pc, #68]	@ (800124c <MX_SPI1_Init+0x64>)
 8001208:	2200      	movs	r2, #0
 800120a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800120c:	4b0f      	ldr	r3, [pc, #60]	@ (800124c <MX_SPI1_Init+0x64>)
 800120e:	2200      	movs	r2, #0
 8001210:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001212:	4b0e      	ldr	r3, [pc, #56]	@ (800124c <MX_SPI1_Init+0x64>)
 8001214:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001218:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800121a:	4b0c      	ldr	r3, [pc, #48]	@ (800124c <MX_SPI1_Init+0x64>)
 800121c:	2210      	movs	r2, #16
 800121e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001220:	4b0a      	ldr	r3, [pc, #40]	@ (800124c <MX_SPI1_Init+0x64>)
 8001222:	2200      	movs	r2, #0
 8001224:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001226:	4b09      	ldr	r3, [pc, #36]	@ (800124c <MX_SPI1_Init+0x64>)
 8001228:	2200      	movs	r2, #0
 800122a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800122c:	4b07      	ldr	r3, [pc, #28]	@ (800124c <MX_SPI1_Init+0x64>)
 800122e:	2200      	movs	r2, #0
 8001230:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001232:	4b06      	ldr	r3, [pc, #24]	@ (800124c <MX_SPI1_Init+0x64>)
 8001234:	220a      	movs	r2, #10
 8001236:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001238:	4804      	ldr	r0, [pc, #16]	@ (800124c <MX_SPI1_Init+0x64>)
 800123a:	f001 ff6d 	bl	8003118 <HAL_SPI_Init>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001244:	f000 f8d4 	bl	80013f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001248:	bf00      	nop
 800124a:	bd80      	pop	{r7, pc}
 800124c:	20000048 	.word	0x20000048
 8001250:	40013000 	.word	0x40013000

08001254 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001258:	4b11      	ldr	r3, [pc, #68]	@ (80012a0 <MX_USART2_UART_Init+0x4c>)
 800125a:	4a12      	ldr	r2, [pc, #72]	@ (80012a4 <MX_USART2_UART_Init+0x50>)
 800125c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800125e:	4b10      	ldr	r3, [pc, #64]	@ (80012a0 <MX_USART2_UART_Init+0x4c>)
 8001260:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001264:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001266:	4b0e      	ldr	r3, [pc, #56]	@ (80012a0 <MX_USART2_UART_Init+0x4c>)
 8001268:	2200      	movs	r2, #0
 800126a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800126c:	4b0c      	ldr	r3, [pc, #48]	@ (80012a0 <MX_USART2_UART_Init+0x4c>)
 800126e:	2200      	movs	r2, #0
 8001270:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001272:	4b0b      	ldr	r3, [pc, #44]	@ (80012a0 <MX_USART2_UART_Init+0x4c>)
 8001274:	2200      	movs	r2, #0
 8001276:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001278:	4b09      	ldr	r3, [pc, #36]	@ (80012a0 <MX_USART2_UART_Init+0x4c>)
 800127a:	220c      	movs	r2, #12
 800127c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800127e:	4b08      	ldr	r3, [pc, #32]	@ (80012a0 <MX_USART2_UART_Init+0x4c>)
 8001280:	2200      	movs	r2, #0
 8001282:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001284:	4b06      	ldr	r3, [pc, #24]	@ (80012a0 <MX_USART2_UART_Init+0x4c>)
 8001286:	2200      	movs	r2, #0
 8001288:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800128a:	4805      	ldr	r0, [pc, #20]	@ (80012a0 <MX_USART2_UART_Init+0x4c>)
 800128c:	f002 fb96 	bl	80039bc <HAL_UART_Init>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001296:	f000 f8ab 	bl	80013f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	200000a0 	.word	0x200000a0
 80012a4:	40004400 	.word	0x40004400

080012a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	607b      	str	r3, [r7, #4]
 80012b2:	4b10      	ldr	r3, [pc, #64]	@ (80012f4 <MX_DMA_Init+0x4c>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b6:	4a0f      	ldr	r2, [pc, #60]	@ (80012f4 <MX_DMA_Init+0x4c>)
 80012b8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80012bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80012be:	4b0d      	ldr	r3, [pc, #52]	@ (80012f4 <MX_DMA_Init+0x4c>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012c6:	607b      	str	r3, [r7, #4]
 80012c8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80012ca:	2200      	movs	r2, #0
 80012cc:	2100      	movs	r1, #0
 80012ce:	2010      	movs	r0, #16
 80012d0:	f000 fbcd 	bl	8001a6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80012d4:	2010      	movs	r0, #16
 80012d6:	f000 fbe6 	bl	8001aa6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80012da:	2200      	movs	r2, #0
 80012dc:	2100      	movs	r1, #0
 80012de:	2011      	movs	r0, #17
 80012e0:	f000 fbc5 	bl	8001a6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80012e4:	2011      	movs	r0, #17
 80012e6:	f000 fbde 	bl	8001aa6 <HAL_NVIC_EnableIRQ>

}
 80012ea:	bf00      	nop
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	40023800 	.word	0x40023800

080012f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b08a      	sub	sp, #40	@ 0x28
 80012fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fe:	f107 0314 	add.w	r3, r7, #20
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	605a      	str	r2, [r3, #4]
 8001308:	609a      	str	r2, [r3, #8]
 800130a:	60da      	str	r2, [r3, #12]
 800130c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	613b      	str	r3, [r7, #16]
 8001312:	4b26      	ldr	r3, [pc, #152]	@ (80013ac <MX_GPIO_Init+0xb4>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001316:	4a25      	ldr	r2, [pc, #148]	@ (80013ac <MX_GPIO_Init+0xb4>)
 8001318:	f043 0304 	orr.w	r3, r3, #4
 800131c:	6313      	str	r3, [r2, #48]	@ 0x30
 800131e:	4b23      	ldr	r3, [pc, #140]	@ (80013ac <MX_GPIO_Init+0xb4>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001322:	f003 0304 	and.w	r3, r3, #4
 8001326:	613b      	str	r3, [r7, #16]
 8001328:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	60fb      	str	r3, [r7, #12]
 800132e:	4b1f      	ldr	r3, [pc, #124]	@ (80013ac <MX_GPIO_Init+0xb4>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001332:	4a1e      	ldr	r2, [pc, #120]	@ (80013ac <MX_GPIO_Init+0xb4>)
 8001334:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001338:	6313      	str	r3, [r2, #48]	@ 0x30
 800133a:	4b1c      	ldr	r3, [pc, #112]	@ (80013ac <MX_GPIO_Init+0xb4>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001342:	60fb      	str	r3, [r7, #12]
 8001344:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001346:	2300      	movs	r3, #0
 8001348:	60bb      	str	r3, [r7, #8]
 800134a:	4b18      	ldr	r3, [pc, #96]	@ (80013ac <MX_GPIO_Init+0xb4>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800134e:	4a17      	ldr	r2, [pc, #92]	@ (80013ac <MX_GPIO_Init+0xb4>)
 8001350:	f043 0301 	orr.w	r3, r3, #1
 8001354:	6313      	str	r3, [r2, #48]	@ 0x30
 8001356:	4b15      	ldr	r3, [pc, #84]	@ (80013ac <MX_GPIO_Init+0xb4>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800135a:	f003 0301 	and.w	r3, r3, #1
 800135e:	60bb      	str	r3, [r7, #8]
 8001360:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	607b      	str	r3, [r7, #4]
 8001366:	4b11      	ldr	r3, [pc, #68]	@ (80013ac <MX_GPIO_Init+0xb4>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136a:	4a10      	ldr	r2, [pc, #64]	@ (80013ac <MX_GPIO_Init+0xb4>)
 800136c:	f043 0302 	orr.w	r3, r3, #2
 8001370:	6313      	str	r3, [r2, #48]	@ 0x30
 8001372:	4b0e      	ldr	r3, [pc, #56]	@ (80013ac <MX_GPIO_Init+0xb4>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001376:	f003 0302 	and.w	r3, r3, #2
 800137a:	607b      	str	r3, [r7, #4]
 800137c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_SS_GPIO_Port, SD_SS_Pin, GPIO_PIN_SET);
 800137e:	2201      	movs	r2, #1
 8001380:	2140      	movs	r1, #64	@ 0x40
 8001382:	480b      	ldr	r0, [pc, #44]	@ (80013b0 <MX_GPIO_Init+0xb8>)
 8001384:	f001 f8c6 	bl	8002514 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SD_SS_Pin */
  GPIO_InitStruct.Pin = SD_SS_Pin;
 8001388:	2340      	movs	r3, #64	@ 0x40
 800138a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800138c:	2301      	movs	r3, #1
 800138e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001390:	2300      	movs	r3, #0
 8001392:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001394:	2301      	movs	r3, #1
 8001396:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_SS_GPIO_Port, &GPIO_InitStruct);
 8001398:	f107 0314 	add.w	r3, r7, #20
 800139c:	4619      	mov	r1, r3
 800139e:	4804      	ldr	r0, [pc, #16]	@ (80013b0 <MX_GPIO_Init+0xb8>)
 80013a0:	f000 ff24 	bl	80021ec <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80013a4:	bf00      	nop
 80013a6:	3728      	adds	r7, #40	@ 0x28
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	40023800 	.word	0x40023800
 80013b0:	40020400 	.word	0x40020400

080013b4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a07      	ldr	r2, [pc, #28]	@ (80013e0 <HAL_UART_RxCpltCallback+0x2c>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d108      	bne.n	80013d8 <HAL_UART_RxCpltCallback+0x24>
    	userChoice = rxData;
 80013c6:	4b07      	ldr	r3, [pc, #28]	@ (80013e4 <HAL_UART_RxCpltCallback+0x30>)
 80013c8:	781a      	ldrb	r2, [r3, #0]
 80013ca:	4b07      	ldr	r3, [pc, #28]	@ (80013e8 <HAL_UART_RxCpltCallback+0x34>)
 80013cc:	701a      	strb	r2, [r3, #0]
    	HAL_UART_Receive_IT(&huart2, &rxData, 1); // Habilita la recepción por interrupción
 80013ce:	2201      	movs	r2, #1
 80013d0:	4904      	ldr	r1, [pc, #16]	@ (80013e4 <HAL_UART_RxCpltCallback+0x30>)
 80013d2:	4806      	ldr	r0, [pc, #24]	@ (80013ec <HAL_UART_RxCpltCallback+0x38>)
 80013d4:	f002 fbcd 	bl	8003b72 <HAL_UART_Receive_IT>
    }
}
 80013d8:	bf00      	nop
 80013da:	3708      	adds	r7, #8
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	40004400 	.word	0x40004400
 80013e4:	20002278 	.word	0x20002278
 80013e8:	20002279 	.word	0x20002279
 80013ec:	200000a0 	.word	0x200000a0

080013f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013f4:	b672      	cpsid	i
}
 80013f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013f8:	bf00      	nop
 80013fa:	e7fd      	b.n	80013f8 <Error_Handler+0x8>

080013fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	607b      	str	r3, [r7, #4]
 8001406:	4b10      	ldr	r3, [pc, #64]	@ (8001448 <HAL_MspInit+0x4c>)
 8001408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800140a:	4a0f      	ldr	r2, [pc, #60]	@ (8001448 <HAL_MspInit+0x4c>)
 800140c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001410:	6453      	str	r3, [r2, #68]	@ 0x44
 8001412:	4b0d      	ldr	r3, [pc, #52]	@ (8001448 <HAL_MspInit+0x4c>)
 8001414:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001416:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800141a:	607b      	str	r3, [r7, #4]
 800141c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	603b      	str	r3, [r7, #0]
 8001422:	4b09      	ldr	r3, [pc, #36]	@ (8001448 <HAL_MspInit+0x4c>)
 8001424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001426:	4a08      	ldr	r2, [pc, #32]	@ (8001448 <HAL_MspInit+0x4c>)
 8001428:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800142c:	6413      	str	r3, [r2, #64]	@ 0x40
 800142e:	4b06      	ldr	r3, [pc, #24]	@ (8001448 <HAL_MspInit+0x4c>)
 8001430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001432:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001436:	603b      	str	r3, [r7, #0]
 8001438:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800143a:	2007      	movs	r0, #7
 800143c:	f000 fb0c 	bl	8001a58 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001440:	bf00      	nop
 8001442:	3708      	adds	r7, #8
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	40023800 	.word	0x40023800

0800144c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b08a      	sub	sp, #40	@ 0x28
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001454:	f107 0314 	add.w	r3, r7, #20
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	609a      	str	r2, [r3, #8]
 8001460:	60da      	str	r2, [r3, #12]
 8001462:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a19      	ldr	r2, [pc, #100]	@ (80014d0 <HAL_SPI_MspInit+0x84>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d12b      	bne.n	80014c6 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	613b      	str	r3, [r7, #16]
 8001472:	4b18      	ldr	r3, [pc, #96]	@ (80014d4 <HAL_SPI_MspInit+0x88>)
 8001474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001476:	4a17      	ldr	r2, [pc, #92]	@ (80014d4 <HAL_SPI_MspInit+0x88>)
 8001478:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800147c:	6453      	str	r3, [r2, #68]	@ 0x44
 800147e:	4b15      	ldr	r3, [pc, #84]	@ (80014d4 <HAL_SPI_MspInit+0x88>)
 8001480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001482:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001486:	613b      	str	r3, [r7, #16]
 8001488:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	60fb      	str	r3, [r7, #12]
 800148e:	4b11      	ldr	r3, [pc, #68]	@ (80014d4 <HAL_SPI_MspInit+0x88>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001492:	4a10      	ldr	r2, [pc, #64]	@ (80014d4 <HAL_SPI_MspInit+0x88>)
 8001494:	f043 0301 	orr.w	r3, r3, #1
 8001498:	6313      	str	r3, [r2, #48]	@ 0x30
 800149a:	4b0e      	ldr	r3, [pc, #56]	@ (80014d4 <HAL_SPI_MspInit+0x88>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	60fb      	str	r3, [r7, #12]
 80014a4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|GPIO_PIN_6|GPIO_PIN_7;
 80014a6:	23e0      	movs	r3, #224	@ 0xe0
 80014a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014aa:	2302      	movs	r3, #2
 80014ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ae:	2300      	movs	r3, #0
 80014b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b2:	2303      	movs	r3, #3
 80014b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014b6:	2305      	movs	r3, #5
 80014b8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ba:	f107 0314 	add.w	r3, r7, #20
 80014be:	4619      	mov	r1, r3
 80014c0:	4805      	ldr	r0, [pc, #20]	@ (80014d8 <HAL_SPI_MspInit+0x8c>)
 80014c2:	f000 fe93 	bl	80021ec <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80014c6:	bf00      	nop
 80014c8:	3728      	adds	r7, #40	@ 0x28
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	40013000 	.word	0x40013000
 80014d4:	40023800 	.word	0x40023800
 80014d8:	40020000 	.word	0x40020000

080014dc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b08a      	sub	sp, #40	@ 0x28
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e4:	f107 0314 	add.w	r3, r7, #20
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	609a      	str	r2, [r3, #8]
 80014f0:	60da      	str	r2, [r3, #12]
 80014f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a4b      	ldr	r2, [pc, #300]	@ (8001628 <HAL_UART_MspInit+0x14c>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	f040 8090 	bne.w	8001620 <HAL_UART_MspInit+0x144>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001500:	2300      	movs	r3, #0
 8001502:	613b      	str	r3, [r7, #16]
 8001504:	4b49      	ldr	r3, [pc, #292]	@ (800162c <HAL_UART_MspInit+0x150>)
 8001506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001508:	4a48      	ldr	r2, [pc, #288]	@ (800162c <HAL_UART_MspInit+0x150>)
 800150a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800150e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001510:	4b46      	ldr	r3, [pc, #280]	@ (800162c <HAL_UART_MspInit+0x150>)
 8001512:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001514:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001518:	613b      	str	r3, [r7, #16]
 800151a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800151c:	2300      	movs	r3, #0
 800151e:	60fb      	str	r3, [r7, #12]
 8001520:	4b42      	ldr	r3, [pc, #264]	@ (800162c <HAL_UART_MspInit+0x150>)
 8001522:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001524:	4a41      	ldr	r2, [pc, #260]	@ (800162c <HAL_UART_MspInit+0x150>)
 8001526:	f043 0301 	orr.w	r3, r3, #1
 800152a:	6313      	str	r3, [r2, #48]	@ 0x30
 800152c:	4b3f      	ldr	r3, [pc, #252]	@ (800162c <HAL_UART_MspInit+0x150>)
 800152e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001530:	f003 0301 	and.w	r3, r3, #1
 8001534:	60fb      	str	r3, [r7, #12]
 8001536:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001538:	230c      	movs	r3, #12
 800153a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153c:	2302      	movs	r3, #2
 800153e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001540:	2300      	movs	r3, #0
 8001542:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001544:	2303      	movs	r3, #3
 8001546:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001548:	2307      	movs	r3, #7
 800154a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800154c:	f107 0314 	add.w	r3, r7, #20
 8001550:	4619      	mov	r1, r3
 8001552:	4837      	ldr	r0, [pc, #220]	@ (8001630 <HAL_UART_MspInit+0x154>)
 8001554:	f000 fe4a 	bl	80021ec <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001558:	4b36      	ldr	r3, [pc, #216]	@ (8001634 <HAL_UART_MspInit+0x158>)
 800155a:	4a37      	ldr	r2, [pc, #220]	@ (8001638 <HAL_UART_MspInit+0x15c>)
 800155c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800155e:	4b35      	ldr	r3, [pc, #212]	@ (8001634 <HAL_UART_MspInit+0x158>)
 8001560:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001564:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001566:	4b33      	ldr	r3, [pc, #204]	@ (8001634 <HAL_UART_MspInit+0x158>)
 8001568:	2200      	movs	r2, #0
 800156a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800156c:	4b31      	ldr	r3, [pc, #196]	@ (8001634 <HAL_UART_MspInit+0x158>)
 800156e:	2200      	movs	r2, #0
 8001570:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001572:	4b30      	ldr	r3, [pc, #192]	@ (8001634 <HAL_UART_MspInit+0x158>)
 8001574:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001578:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800157a:	4b2e      	ldr	r3, [pc, #184]	@ (8001634 <HAL_UART_MspInit+0x158>)
 800157c:	2200      	movs	r2, #0
 800157e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001580:	4b2c      	ldr	r3, [pc, #176]	@ (8001634 <HAL_UART_MspInit+0x158>)
 8001582:	2200      	movs	r2, #0
 8001584:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001586:	4b2b      	ldr	r3, [pc, #172]	@ (8001634 <HAL_UART_MspInit+0x158>)
 8001588:	2200      	movs	r2, #0
 800158a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800158c:	4b29      	ldr	r3, [pc, #164]	@ (8001634 <HAL_UART_MspInit+0x158>)
 800158e:	2200      	movs	r2, #0
 8001590:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001592:	4b28      	ldr	r3, [pc, #160]	@ (8001634 <HAL_UART_MspInit+0x158>)
 8001594:	2200      	movs	r2, #0
 8001596:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001598:	4826      	ldr	r0, [pc, #152]	@ (8001634 <HAL_UART_MspInit+0x158>)
 800159a:	f000 faab 	bl	8001af4 <HAL_DMA_Init>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80015a4:	f7ff ff24 	bl	80013f0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	4a22      	ldr	r2, [pc, #136]	@ (8001634 <HAL_UART_MspInit+0x158>)
 80015ac:	63da      	str	r2, [r3, #60]	@ 0x3c
 80015ae:	4a21      	ldr	r2, [pc, #132]	@ (8001634 <HAL_UART_MspInit+0x158>)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80015b4:	4b21      	ldr	r3, [pc, #132]	@ (800163c <HAL_UART_MspInit+0x160>)
 80015b6:	4a22      	ldr	r2, [pc, #136]	@ (8001640 <HAL_UART_MspInit+0x164>)
 80015b8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80015ba:	4b20      	ldr	r3, [pc, #128]	@ (800163c <HAL_UART_MspInit+0x160>)
 80015bc:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80015c0:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015c2:	4b1e      	ldr	r3, [pc, #120]	@ (800163c <HAL_UART_MspInit+0x160>)
 80015c4:	2240      	movs	r2, #64	@ 0x40
 80015c6:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015c8:	4b1c      	ldr	r3, [pc, #112]	@ (800163c <HAL_UART_MspInit+0x160>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80015ce:	4b1b      	ldr	r3, [pc, #108]	@ (800163c <HAL_UART_MspInit+0x160>)
 80015d0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80015d4:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015d6:	4b19      	ldr	r3, [pc, #100]	@ (800163c <HAL_UART_MspInit+0x160>)
 80015d8:	2200      	movs	r2, #0
 80015da:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015dc:	4b17      	ldr	r3, [pc, #92]	@ (800163c <HAL_UART_MspInit+0x160>)
 80015de:	2200      	movs	r2, #0
 80015e0:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80015e2:	4b16      	ldr	r3, [pc, #88]	@ (800163c <HAL_UART_MspInit+0x160>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80015e8:	4b14      	ldr	r3, [pc, #80]	@ (800163c <HAL_UART_MspInit+0x160>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015ee:	4b13      	ldr	r3, [pc, #76]	@ (800163c <HAL_UART_MspInit+0x160>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80015f4:	4811      	ldr	r0, [pc, #68]	@ (800163c <HAL_UART_MspInit+0x160>)
 80015f6:	f000 fa7d 	bl	8001af4 <HAL_DMA_Init>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8001600:	f7ff fef6 	bl	80013f0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	4a0d      	ldr	r2, [pc, #52]	@ (800163c <HAL_UART_MspInit+0x160>)
 8001608:	639a      	str	r2, [r3, #56]	@ 0x38
 800160a:	4a0c      	ldr	r2, [pc, #48]	@ (800163c <HAL_UART_MspInit+0x160>)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001610:	2200      	movs	r2, #0
 8001612:	2100      	movs	r1, #0
 8001614:	2026      	movs	r0, #38	@ 0x26
 8001616:	f000 fa2a 	bl	8001a6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800161a:	2026      	movs	r0, #38	@ 0x26
 800161c:	f000 fa43 	bl	8001aa6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001620:	bf00      	nop
 8001622:	3728      	adds	r7, #40	@ 0x28
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	40004400 	.word	0x40004400
 800162c:	40023800 	.word	0x40023800
 8001630:	40020000 	.word	0x40020000
 8001634:	200000e8 	.word	0x200000e8
 8001638:	40026088 	.word	0x40026088
 800163c:	20000148 	.word	0x20000148
 8001640:	400260a0 	.word	0x400260a0

08001644 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001648:	bf00      	nop
 800164a:	e7fd      	b.n	8001648 <NMI_Handler+0x4>

0800164c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001650:	bf00      	nop
 8001652:	e7fd      	b.n	8001650 <HardFault_Handler+0x4>

08001654 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001658:	bf00      	nop
 800165a:	e7fd      	b.n	8001658 <MemManage_Handler+0x4>

0800165c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001660:	bf00      	nop
 8001662:	e7fd      	b.n	8001660 <BusFault_Handler+0x4>

08001664 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001668:	bf00      	nop
 800166a:	e7fd      	b.n	8001668 <UsageFault_Handler+0x4>

0800166c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001670:	bf00      	nop
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr

0800167a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800167a:	b480      	push	{r7}
 800167c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800167e:	bf00      	nop
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr

08001688 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800168c:	bf00      	nop
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
	...

08001698 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  if(Timer1 > 0){
 800169c:	4b0c      	ldr	r3, [pc, #48]	@ (80016d0 <SysTick_Handler+0x38>)
 800169e:	881b      	ldrh	r3, [r3, #0]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d005      	beq.n	80016b0 <SysTick_Handler+0x18>
	Timer1--;
 80016a4:	4b0a      	ldr	r3, [pc, #40]	@ (80016d0 <SysTick_Handler+0x38>)
 80016a6:	881b      	ldrh	r3, [r3, #0]
 80016a8:	3b01      	subs	r3, #1
 80016aa:	b29a      	uxth	r2, r3
 80016ac:	4b08      	ldr	r3, [pc, #32]	@ (80016d0 <SysTick_Handler+0x38>)
 80016ae:	801a      	strh	r2, [r3, #0]
  }
  if(Timer2 > 0){
 80016b0:	4b08      	ldr	r3, [pc, #32]	@ (80016d4 <SysTick_Handler+0x3c>)
 80016b2:	881b      	ldrh	r3, [r3, #0]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d005      	beq.n	80016c4 <SysTick_Handler+0x2c>
	Timer2--;
 80016b8:	4b06      	ldr	r3, [pc, #24]	@ (80016d4 <SysTick_Handler+0x3c>)
 80016ba:	881b      	ldrh	r3, [r3, #0]
 80016bc:	3b01      	subs	r3, #1
 80016be:	b29a      	uxth	r2, r3
 80016c0:	4b04      	ldr	r3, [pc, #16]	@ (80016d4 <SysTick_Handler+0x3c>)
 80016c2:	801a      	strh	r2, [r3, #0]
  }

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016c4:	f000 f8b4 	bl	8001830 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 80016c8:	f000 fa07 	bl	8001ada <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 80016cc:	bf00      	nop
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	20000040 	.word	0x20000040
 80016d4:	20000042 	.word	0x20000042

080016d8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80016dc:	4802      	ldr	r0, [pc, #8]	@ (80016e8 <DMA1_Stream5_IRQHandler+0x10>)
 80016de:	f000 fb49 	bl	8001d74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	200000e8 	.word	0x200000e8

080016ec <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80016f0:	4802      	ldr	r0, [pc, #8]	@ (80016fc <DMA1_Stream6_IRQHandler+0x10>)
 80016f2:	f000 fb3f 	bl	8001d74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80016f6:	bf00      	nop
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	20000148 	.word	0x20000148

08001700 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001704:	4802      	ldr	r0, [pc, #8]	@ (8001710 <USART2_IRQHandler+0x10>)
 8001706:	f002 fa59 	bl	8003bbc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	200000a0 	.word	0x200000a0

08001714 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001718:	4b06      	ldr	r3, [pc, #24]	@ (8001734 <SystemInit+0x20>)
 800171a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800171e:	4a05      	ldr	r2, [pc, #20]	@ (8001734 <SystemInit+0x20>)
 8001720:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001724:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001728:	bf00      	nop
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	e000ed00 	.word	0xe000ed00

08001738 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001738:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001770 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800173c:	f7ff ffea 	bl	8001714 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001740:	480c      	ldr	r0, [pc, #48]	@ (8001774 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001742:	490d      	ldr	r1, [pc, #52]	@ (8001778 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001744:	4a0d      	ldr	r2, [pc, #52]	@ (800177c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001746:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001748:	e002      	b.n	8001750 <LoopCopyDataInit>

0800174a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800174a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800174c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800174e:	3304      	adds	r3, #4

08001750 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001750:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001752:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001754:	d3f9      	bcc.n	800174a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001756:	4a0a      	ldr	r2, [pc, #40]	@ (8001780 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001758:	4c0a      	ldr	r4, [pc, #40]	@ (8001784 <LoopFillZerobss+0x22>)
  movs r3, #0
 800175a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800175c:	e001      	b.n	8001762 <LoopFillZerobss>

0800175e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800175e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001760:	3204      	adds	r2, #4

08001762 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001762:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001764:	d3fb      	bcc.n	800175e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001766:	f006 f947 	bl	80079f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800176a:	f7ff fc31 	bl	8000fd0 <main>
  bx  lr    
 800176e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001770:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001774:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001778:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 800177c:	08008100 	.word	0x08008100
  ldr r2, =_sbss
 8001780:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8001784:	200024c0 	.word	0x200024c0

08001788 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001788:	e7fe      	b.n	8001788 <ADC_IRQHandler>
	...

0800178c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001790:	4b0e      	ldr	r3, [pc, #56]	@ (80017cc <HAL_Init+0x40>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a0d      	ldr	r2, [pc, #52]	@ (80017cc <HAL_Init+0x40>)
 8001796:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800179a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800179c:	4b0b      	ldr	r3, [pc, #44]	@ (80017cc <HAL_Init+0x40>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a0a      	ldr	r2, [pc, #40]	@ (80017cc <HAL_Init+0x40>)
 80017a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80017a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017a8:	4b08      	ldr	r3, [pc, #32]	@ (80017cc <HAL_Init+0x40>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a07      	ldr	r2, [pc, #28]	@ (80017cc <HAL_Init+0x40>)
 80017ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017b4:	2003      	movs	r0, #3
 80017b6:	f000 f94f 	bl	8001a58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017ba:	2000      	movs	r0, #0
 80017bc:	f000 f808 	bl	80017d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017c0:	f7ff fe1c 	bl	80013fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017c4:	2300      	movs	r3, #0
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	40023c00 	.word	0x40023c00

080017d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017d8:	4b12      	ldr	r3, [pc, #72]	@ (8001824 <HAL_InitTick+0x54>)
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	4b12      	ldr	r3, [pc, #72]	@ (8001828 <HAL_InitTick+0x58>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	4619      	mov	r1, r3
 80017e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80017ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ee:	4618      	mov	r0, r3
 80017f0:	f000 f967 	bl	8001ac2 <HAL_SYSTICK_Config>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e00e      	b.n	800181c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2b0f      	cmp	r3, #15
 8001802:	d80a      	bhi.n	800181a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001804:	2200      	movs	r2, #0
 8001806:	6879      	ldr	r1, [r7, #4]
 8001808:	f04f 30ff 	mov.w	r0, #4294967295
 800180c:	f000 f92f 	bl	8001a6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001810:	4a06      	ldr	r2, [pc, #24]	@ (800182c <HAL_InitTick+0x5c>)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001816:	2300      	movs	r3, #0
 8001818:	e000      	b.n	800181c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
}
 800181c:	4618      	mov	r0, r3
 800181e:	3708      	adds	r7, #8
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	20000004 	.word	0x20000004
 8001828:	2000000c 	.word	0x2000000c
 800182c:	20000008 	.word	0x20000008

08001830 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001834:	4b06      	ldr	r3, [pc, #24]	@ (8001850 <HAL_IncTick+0x20>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	461a      	mov	r2, r3
 800183a:	4b06      	ldr	r3, [pc, #24]	@ (8001854 <HAL_IncTick+0x24>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4413      	add	r3, r2
 8001840:	4a04      	ldr	r2, [pc, #16]	@ (8001854 <HAL_IncTick+0x24>)
 8001842:	6013      	str	r3, [r2, #0]
}
 8001844:	bf00      	nop
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	2000000c 	.word	0x2000000c
 8001854:	20002280 	.word	0x20002280

08001858 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  return uwTick;
 800185c:	4b03      	ldr	r3, [pc, #12]	@ (800186c <HAL_GetTick+0x14>)
 800185e:	681b      	ldr	r3, [r3, #0]
}
 8001860:	4618      	mov	r0, r3
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	20002280 	.word	0x20002280

08001870 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001878:	f7ff ffee 	bl	8001858 <HAL_GetTick>
 800187c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001888:	d005      	beq.n	8001896 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800188a:	4b0a      	ldr	r3, [pc, #40]	@ (80018b4 <HAL_Delay+0x44>)
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	461a      	mov	r2, r3
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	4413      	add	r3, r2
 8001894:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001896:	bf00      	nop
 8001898:	f7ff ffde 	bl	8001858 <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	68fa      	ldr	r2, [r7, #12]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d8f7      	bhi.n	8001898 <HAL_Delay+0x28>
  {
  }
}
 80018a8:	bf00      	nop
 80018aa:	bf00      	nop
 80018ac:	3710      	adds	r7, #16
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	2000000c 	.word	0x2000000c

080018b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b085      	sub	sp, #20
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	f003 0307 	and.w	r3, r3, #7
 80018c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018c8:	4b0c      	ldr	r3, [pc, #48]	@ (80018fc <__NVIC_SetPriorityGrouping+0x44>)
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018ce:	68ba      	ldr	r2, [r7, #8]
 80018d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018d4:	4013      	ands	r3, r2
 80018d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80018e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018ea:	4a04      	ldr	r2, [pc, #16]	@ (80018fc <__NVIC_SetPriorityGrouping+0x44>)
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	60d3      	str	r3, [r2, #12]
}
 80018f0:	bf00      	nop
 80018f2:	3714      	adds	r7, #20
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr
 80018fc:	e000ed00 	.word	0xe000ed00

08001900 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001904:	4b04      	ldr	r3, [pc, #16]	@ (8001918 <__NVIC_GetPriorityGrouping+0x18>)
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	0a1b      	lsrs	r3, r3, #8
 800190a:	f003 0307 	and.w	r3, r3, #7
}
 800190e:	4618      	mov	r0, r3
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr
 8001918:	e000ed00 	.word	0xe000ed00

0800191c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	4603      	mov	r3, r0
 8001924:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192a:	2b00      	cmp	r3, #0
 800192c:	db0b      	blt.n	8001946 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800192e:	79fb      	ldrb	r3, [r7, #7]
 8001930:	f003 021f 	and.w	r2, r3, #31
 8001934:	4907      	ldr	r1, [pc, #28]	@ (8001954 <__NVIC_EnableIRQ+0x38>)
 8001936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193a:	095b      	lsrs	r3, r3, #5
 800193c:	2001      	movs	r0, #1
 800193e:	fa00 f202 	lsl.w	r2, r0, r2
 8001942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001946:	bf00      	nop
 8001948:	370c      	adds	r7, #12
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	e000e100 	.word	0xe000e100

08001958 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	4603      	mov	r3, r0
 8001960:	6039      	str	r1, [r7, #0]
 8001962:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001964:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001968:	2b00      	cmp	r3, #0
 800196a:	db0a      	blt.n	8001982 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	b2da      	uxtb	r2, r3
 8001970:	490c      	ldr	r1, [pc, #48]	@ (80019a4 <__NVIC_SetPriority+0x4c>)
 8001972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001976:	0112      	lsls	r2, r2, #4
 8001978:	b2d2      	uxtb	r2, r2
 800197a:	440b      	add	r3, r1
 800197c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001980:	e00a      	b.n	8001998 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	b2da      	uxtb	r2, r3
 8001986:	4908      	ldr	r1, [pc, #32]	@ (80019a8 <__NVIC_SetPriority+0x50>)
 8001988:	79fb      	ldrb	r3, [r7, #7]
 800198a:	f003 030f 	and.w	r3, r3, #15
 800198e:	3b04      	subs	r3, #4
 8001990:	0112      	lsls	r2, r2, #4
 8001992:	b2d2      	uxtb	r2, r2
 8001994:	440b      	add	r3, r1
 8001996:	761a      	strb	r2, [r3, #24]
}
 8001998:	bf00      	nop
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr
 80019a4:	e000e100 	.word	0xe000e100
 80019a8:	e000ed00 	.word	0xe000ed00

080019ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b089      	sub	sp, #36	@ 0x24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	60f8      	str	r0, [r7, #12]
 80019b4:	60b9      	str	r1, [r7, #8]
 80019b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	f003 0307 	and.w	r3, r3, #7
 80019be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	f1c3 0307 	rsb	r3, r3, #7
 80019c6:	2b04      	cmp	r3, #4
 80019c8:	bf28      	it	cs
 80019ca:	2304      	movcs	r3, #4
 80019cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	3304      	adds	r3, #4
 80019d2:	2b06      	cmp	r3, #6
 80019d4:	d902      	bls.n	80019dc <NVIC_EncodePriority+0x30>
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	3b03      	subs	r3, #3
 80019da:	e000      	b.n	80019de <NVIC_EncodePriority+0x32>
 80019dc:	2300      	movs	r3, #0
 80019de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019e0:	f04f 32ff 	mov.w	r2, #4294967295
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ea:	43da      	mvns	r2, r3
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	401a      	ands	r2, r3
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019f4:	f04f 31ff 	mov.w	r1, #4294967295
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	fa01 f303 	lsl.w	r3, r1, r3
 80019fe:	43d9      	mvns	r1, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a04:	4313      	orrs	r3, r2
         );
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3724      	adds	r7, #36	@ 0x24
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
	...

08001a14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	3b01      	subs	r3, #1
 8001a20:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a24:	d301      	bcc.n	8001a2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a26:	2301      	movs	r3, #1
 8001a28:	e00f      	b.n	8001a4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a2a:	4a0a      	ldr	r2, [pc, #40]	@ (8001a54 <SysTick_Config+0x40>)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	3b01      	subs	r3, #1
 8001a30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a32:	210f      	movs	r1, #15
 8001a34:	f04f 30ff 	mov.w	r0, #4294967295
 8001a38:	f7ff ff8e 	bl	8001958 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a3c:	4b05      	ldr	r3, [pc, #20]	@ (8001a54 <SysTick_Config+0x40>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a42:	4b04      	ldr	r3, [pc, #16]	@ (8001a54 <SysTick_Config+0x40>)
 8001a44:	2207      	movs	r2, #7
 8001a46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	e000e010 	.word	0xe000e010

08001a58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f7ff ff29 	bl	80018b8 <__NVIC_SetPriorityGrouping>
}
 8001a66:	bf00      	nop
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	b086      	sub	sp, #24
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	4603      	mov	r3, r0
 8001a76:	60b9      	str	r1, [r7, #8]
 8001a78:	607a      	str	r2, [r7, #4]
 8001a7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a80:	f7ff ff3e 	bl	8001900 <__NVIC_GetPriorityGrouping>
 8001a84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	68b9      	ldr	r1, [r7, #8]
 8001a8a:	6978      	ldr	r0, [r7, #20]
 8001a8c:	f7ff ff8e 	bl	80019ac <NVIC_EncodePriority>
 8001a90:	4602      	mov	r2, r0
 8001a92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a96:	4611      	mov	r1, r2
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7ff ff5d 	bl	8001958 <__NVIC_SetPriority>
}
 8001a9e:	bf00      	nop
 8001aa0:	3718      	adds	r7, #24
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b082      	sub	sp, #8
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	4603      	mov	r3, r0
 8001aae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ab0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7ff ff31 	bl	800191c <__NVIC_EnableIRQ>
}
 8001aba:	bf00      	nop
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	b082      	sub	sp, #8
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f7ff ffa2 	bl	8001a14 <SysTick_Config>
 8001ad0:	4603      	mov	r3, r0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}

08001ada <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001ada:	b580      	push	{r7, lr}
 8001adc:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001ade:	f000 f802 	bl	8001ae6 <HAL_SYSTICK_Callback>
}
 8001ae2:	bf00      	nop
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001aea:	bf00      	nop
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr

08001af4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b086      	sub	sp, #24
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001afc:	2300      	movs	r3, #0
 8001afe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001b00:	f7ff feaa 	bl	8001858 <HAL_GetTick>
 8001b04:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d101      	bne.n	8001b10 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e099      	b.n	8001c44 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2202      	movs	r2, #2
 8001b14:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f022 0201 	bic.w	r2, r2, #1
 8001b2e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b30:	e00f      	b.n	8001b52 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b32:	f7ff fe91 	bl	8001858 <HAL_GetTick>
 8001b36:	4602      	mov	r2, r0
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	2b05      	cmp	r3, #5
 8001b3e:	d908      	bls.n	8001b52 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2220      	movs	r2, #32
 8001b44:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2203      	movs	r2, #3
 8001b4a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e078      	b.n	8001c44 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0301 	and.w	r3, r3, #1
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d1e8      	bne.n	8001b32 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b68:	697a      	ldr	r2, [r7, #20]
 8001b6a:	4b38      	ldr	r3, [pc, #224]	@ (8001c4c <HAL_DMA_Init+0x158>)
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	685a      	ldr	r2, [r3, #4]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	691b      	ldr	r3, [r3, #16]
 8001b84:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	699b      	ldr	r3, [r3, #24]
 8001b90:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b96:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6a1b      	ldr	r3, [r3, #32]
 8001b9c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b9e:	697a      	ldr	r2, [r7, #20]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ba8:	2b04      	cmp	r3, #4
 8001baa:	d107      	bne.n	8001bbc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	697a      	ldr	r2, [r7, #20]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	697a      	ldr	r2, [r7, #20]
 8001bc2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	695b      	ldr	r3, [r3, #20]
 8001bca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	f023 0307 	bic.w	r3, r3, #7
 8001bd2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bd8:	697a      	ldr	r2, [r7, #20]
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001be2:	2b04      	cmp	r3, #4
 8001be4:	d117      	bne.n	8001c16 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bea:	697a      	ldr	r2, [r7, #20]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d00e      	beq.n	8001c16 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f000 fa7b 	bl	80020f4 <DMA_CheckFifoParam>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d008      	beq.n	8001c16 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2240      	movs	r2, #64	@ 0x40
 8001c08:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001c12:	2301      	movs	r3, #1
 8001c14:	e016      	b.n	8001c44 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	697a      	ldr	r2, [r7, #20]
 8001c1c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f000 fa32 	bl	8002088 <DMA_CalcBaseAndBitshift>
 8001c24:	4603      	mov	r3, r0
 8001c26:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c2c:	223f      	movs	r2, #63	@ 0x3f
 8001c2e:	409a      	lsls	r2, r3
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2200      	movs	r2, #0
 8001c38:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001c42:	2300      	movs	r3, #0
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3718      	adds	r7, #24
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	f010803f 	.word	0xf010803f

08001c50 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c5c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001c5e:	f7ff fdfb 	bl	8001858 <HAL_GetTick>
 8001c62:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d008      	beq.n	8001c82 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2280      	movs	r2, #128	@ 0x80
 8001c74:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e052      	b.n	8001d28 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f022 0216 	bic.w	r2, r2, #22
 8001c90:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	695a      	ldr	r2, [r3, #20]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001ca0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d103      	bne.n	8001cb2 <HAL_DMA_Abort+0x62>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d007      	beq.n	8001cc2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f022 0208 	bic.w	r2, r2, #8
 8001cc0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f022 0201 	bic.w	r2, r2, #1
 8001cd0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cd2:	e013      	b.n	8001cfc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cd4:	f7ff fdc0 	bl	8001858 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	2b05      	cmp	r3, #5
 8001ce0:	d90c      	bls.n	8001cfc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2220      	movs	r2, #32
 8001ce6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2203      	movs	r2, #3
 8001cec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	e015      	b.n	8001d28 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d1e4      	bne.n	8001cd4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d0e:	223f      	movs	r2, #63	@ 0x3f
 8001d10:	409a      	lsls	r2, r3
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2201      	movs	r2, #1
 8001d1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2200      	movs	r2, #0
 8001d22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001d26:	2300      	movs	r3, #0
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3710      	adds	r7, #16
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d004      	beq.n	8001d4e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2280      	movs	r2, #128	@ 0x80
 8001d48:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e00c      	b.n	8001d68 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2205      	movs	r2, #5
 8001d52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f022 0201 	bic.w	r2, r2, #1
 8001d64:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001d66:	2300      	movs	r3, #0
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr

08001d74 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b086      	sub	sp, #24
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001d80:	4b8e      	ldr	r3, [pc, #568]	@ (8001fbc <HAL_DMA_IRQHandler+0x248>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a8e      	ldr	r2, [pc, #568]	@ (8001fc0 <HAL_DMA_IRQHandler+0x24c>)
 8001d86:	fba2 2303 	umull	r2, r3, r2, r3
 8001d8a:	0a9b      	lsrs	r3, r3, #10
 8001d8c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d92:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d9e:	2208      	movs	r2, #8
 8001da0:	409a      	lsls	r2, r3
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	4013      	ands	r3, r2
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d01a      	beq.n	8001de0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0304 	and.w	r3, r3, #4
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d013      	beq.n	8001de0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f022 0204 	bic.w	r2, r2, #4
 8001dc6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dcc:	2208      	movs	r2, #8
 8001dce:	409a      	lsls	r2, r3
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dd8:	f043 0201 	orr.w	r2, r3, #1
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001de4:	2201      	movs	r2, #1
 8001de6:	409a      	lsls	r2, r3
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	4013      	ands	r3, r2
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d012      	beq.n	8001e16 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	695b      	ldr	r3, [r3, #20]
 8001df6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d00b      	beq.n	8001e16 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e02:	2201      	movs	r2, #1
 8001e04:	409a      	lsls	r2, r3
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e0e:	f043 0202 	orr.w	r2, r3, #2
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e1a:	2204      	movs	r2, #4
 8001e1c:	409a      	lsls	r2, r3
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	4013      	ands	r3, r2
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d012      	beq.n	8001e4c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0302 	and.w	r3, r3, #2
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d00b      	beq.n	8001e4c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e38:	2204      	movs	r2, #4
 8001e3a:	409a      	lsls	r2, r3
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e44:	f043 0204 	orr.w	r2, r3, #4
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e50:	2210      	movs	r2, #16
 8001e52:	409a      	lsls	r2, r3
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	4013      	ands	r3, r2
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d043      	beq.n	8001ee4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0308 	and.w	r3, r3, #8
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d03c      	beq.n	8001ee4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e6e:	2210      	movs	r2, #16
 8001e70:	409a      	lsls	r2, r3
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d018      	beq.n	8001eb6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d108      	bne.n	8001ea4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d024      	beq.n	8001ee4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	4798      	blx	r3
 8001ea2:	e01f      	b.n	8001ee4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d01b      	beq.n	8001ee4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	4798      	blx	r3
 8001eb4:	e016      	b.n	8001ee4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d107      	bne.n	8001ed4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f022 0208 	bic.w	r2, r2, #8
 8001ed2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d003      	beq.n	8001ee4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ee8:	2220      	movs	r2, #32
 8001eea:	409a      	lsls	r2, r3
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	4013      	ands	r3, r2
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	f000 808f 	beq.w	8002014 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 0310 	and.w	r3, r3, #16
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	f000 8087 	beq.w	8002014 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f0a:	2220      	movs	r2, #32
 8001f0c:	409a      	lsls	r2, r3
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	2b05      	cmp	r3, #5
 8001f1c:	d136      	bne.n	8001f8c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f022 0216 	bic.w	r2, r2, #22
 8001f2c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	695a      	ldr	r2, [r3, #20]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001f3c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d103      	bne.n	8001f4e <HAL_DMA_IRQHandler+0x1da>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d007      	beq.n	8001f5e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f022 0208 	bic.w	r2, r2, #8
 8001f5c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f62:	223f      	movs	r2, #63	@ 0x3f
 8001f64:	409a      	lsls	r2, r3
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d07e      	beq.n	8002080 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	4798      	blx	r3
        }
        return;
 8001f8a:	e079      	b.n	8002080 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d01d      	beq.n	8001fd6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d10d      	bne.n	8001fc4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d031      	beq.n	8002014 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	4798      	blx	r3
 8001fb8:	e02c      	b.n	8002014 <HAL_DMA_IRQHandler+0x2a0>
 8001fba:	bf00      	nop
 8001fbc:	20000004 	.word	0x20000004
 8001fc0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d023      	beq.n	8002014 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	4798      	blx	r3
 8001fd4:	e01e      	b.n	8002014 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d10f      	bne.n	8002004 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f022 0210 	bic.w	r2, r2, #16
 8001ff2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002008:	2b00      	cmp	r3, #0
 800200a:	d003      	beq.n	8002014 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002018:	2b00      	cmp	r3, #0
 800201a:	d032      	beq.n	8002082 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002020:	f003 0301 	and.w	r3, r3, #1
 8002024:	2b00      	cmp	r3, #0
 8002026:	d022      	beq.n	800206e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2205      	movs	r2, #5
 800202c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f022 0201 	bic.w	r2, r2, #1
 800203e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	3301      	adds	r3, #1
 8002044:	60bb      	str	r3, [r7, #8]
 8002046:	697a      	ldr	r2, [r7, #20]
 8002048:	429a      	cmp	r2, r3
 800204a:	d307      	bcc.n	800205c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0301 	and.w	r3, r3, #1
 8002056:	2b00      	cmp	r3, #0
 8002058:	d1f2      	bne.n	8002040 <HAL_DMA_IRQHandler+0x2cc>
 800205a:	e000      	b.n	800205e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800205c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2201      	movs	r2, #1
 8002062:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002072:	2b00      	cmp	r3, #0
 8002074:	d005      	beq.n	8002082 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	4798      	blx	r3
 800207e:	e000      	b.n	8002082 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002080:	bf00      	nop
    }
  }
}
 8002082:	3718      	adds	r7, #24
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}

08002088 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002088:	b480      	push	{r7}
 800208a:	b085      	sub	sp, #20
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	b2db      	uxtb	r3, r3
 8002096:	3b10      	subs	r3, #16
 8002098:	4a14      	ldr	r2, [pc, #80]	@ (80020ec <DMA_CalcBaseAndBitshift+0x64>)
 800209a:	fba2 2303 	umull	r2, r3, r2, r3
 800209e:	091b      	lsrs	r3, r3, #4
 80020a0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80020a2:	4a13      	ldr	r2, [pc, #76]	@ (80020f0 <DMA_CalcBaseAndBitshift+0x68>)
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	4413      	add	r3, r2
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	461a      	mov	r2, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2b03      	cmp	r3, #3
 80020b4:	d909      	bls.n	80020ca <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80020be:	f023 0303 	bic.w	r3, r3, #3
 80020c2:	1d1a      	adds	r2, r3, #4
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	659a      	str	r2, [r3, #88]	@ 0x58
 80020c8:	e007      	b.n	80020da <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80020d2:	f023 0303 	bic.w	r3, r3, #3
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3714      	adds	r7, #20
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	aaaaaaab 	.word	0xaaaaaaab
 80020f0:	08007ca8 	.word	0x08007ca8

080020f4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b085      	sub	sp, #20
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020fc:	2300      	movs	r3, #0
 80020fe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002104:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	699b      	ldr	r3, [r3, #24]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d11f      	bne.n	800214e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	2b03      	cmp	r3, #3
 8002112:	d856      	bhi.n	80021c2 <DMA_CheckFifoParam+0xce>
 8002114:	a201      	add	r2, pc, #4	@ (adr r2, 800211c <DMA_CheckFifoParam+0x28>)
 8002116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800211a:	bf00      	nop
 800211c:	0800212d 	.word	0x0800212d
 8002120:	0800213f 	.word	0x0800213f
 8002124:	0800212d 	.word	0x0800212d
 8002128:	080021c3 	.word	0x080021c3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002130:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d046      	beq.n	80021c6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800213c:	e043      	b.n	80021c6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002142:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002146:	d140      	bne.n	80021ca <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800214c:	e03d      	b.n	80021ca <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	699b      	ldr	r3, [r3, #24]
 8002152:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002156:	d121      	bne.n	800219c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	2b03      	cmp	r3, #3
 800215c:	d837      	bhi.n	80021ce <DMA_CheckFifoParam+0xda>
 800215e:	a201      	add	r2, pc, #4	@ (adr r2, 8002164 <DMA_CheckFifoParam+0x70>)
 8002160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002164:	08002175 	.word	0x08002175
 8002168:	0800217b 	.word	0x0800217b
 800216c:	08002175 	.word	0x08002175
 8002170:	0800218d 	.word	0x0800218d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	73fb      	strb	r3, [r7, #15]
      break;
 8002178:	e030      	b.n	80021dc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800217e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d025      	beq.n	80021d2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800218a:	e022      	b.n	80021d2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002190:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002194:	d11f      	bne.n	80021d6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800219a:	e01c      	b.n	80021d6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d903      	bls.n	80021aa <DMA_CheckFifoParam+0xb6>
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	2b03      	cmp	r3, #3
 80021a6:	d003      	beq.n	80021b0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80021a8:	e018      	b.n	80021dc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	73fb      	strb	r3, [r7, #15]
      break;
 80021ae:	e015      	b.n	80021dc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021b4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d00e      	beq.n	80021da <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	73fb      	strb	r3, [r7, #15]
      break;
 80021c0:	e00b      	b.n	80021da <DMA_CheckFifoParam+0xe6>
      break;
 80021c2:	bf00      	nop
 80021c4:	e00a      	b.n	80021dc <DMA_CheckFifoParam+0xe8>
      break;
 80021c6:	bf00      	nop
 80021c8:	e008      	b.n	80021dc <DMA_CheckFifoParam+0xe8>
      break;
 80021ca:	bf00      	nop
 80021cc:	e006      	b.n	80021dc <DMA_CheckFifoParam+0xe8>
      break;
 80021ce:	bf00      	nop
 80021d0:	e004      	b.n	80021dc <DMA_CheckFifoParam+0xe8>
      break;
 80021d2:	bf00      	nop
 80021d4:	e002      	b.n	80021dc <DMA_CheckFifoParam+0xe8>
      break;   
 80021d6:	bf00      	nop
 80021d8:	e000      	b.n	80021dc <DMA_CheckFifoParam+0xe8>
      break;
 80021da:	bf00      	nop
    }
  } 
  
  return status; 
 80021dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3714      	adds	r7, #20
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop

080021ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b089      	sub	sp, #36	@ 0x24
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021f6:	2300      	movs	r3, #0
 80021f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021fa:	2300      	movs	r3, #0
 80021fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021fe:	2300      	movs	r3, #0
 8002200:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002202:	2300      	movs	r3, #0
 8002204:	61fb      	str	r3, [r7, #28]
 8002206:	e165      	b.n	80024d4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002208:	2201      	movs	r2, #1
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	fa02 f303 	lsl.w	r3, r2, r3
 8002210:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	697a      	ldr	r2, [r7, #20]
 8002218:	4013      	ands	r3, r2
 800221a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800221c:	693a      	ldr	r2, [r7, #16]
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	429a      	cmp	r2, r3
 8002222:	f040 8154 	bne.w	80024ce <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f003 0303 	and.w	r3, r3, #3
 800222e:	2b01      	cmp	r3, #1
 8002230:	d005      	beq.n	800223e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800223a:	2b02      	cmp	r3, #2
 800223c:	d130      	bne.n	80022a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	2203      	movs	r2, #3
 800224a:	fa02 f303 	lsl.w	r3, r2, r3
 800224e:	43db      	mvns	r3, r3
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	4013      	ands	r3, r2
 8002254:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	68da      	ldr	r2, [r3, #12]
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	fa02 f303 	lsl.w	r3, r2, r3
 8002262:	69ba      	ldr	r2, [r7, #24]
 8002264:	4313      	orrs	r3, r2
 8002266:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002274:	2201      	movs	r2, #1
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	43db      	mvns	r3, r3
 800227e:	69ba      	ldr	r2, [r7, #24]
 8002280:	4013      	ands	r3, r2
 8002282:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	091b      	lsrs	r3, r3, #4
 800228a:	f003 0201 	and.w	r2, r3, #1
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	fa02 f303 	lsl.w	r3, r2, r3
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	4313      	orrs	r3, r2
 8002298:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f003 0303 	and.w	r3, r3, #3
 80022a8:	2b03      	cmp	r3, #3
 80022aa:	d017      	beq.n	80022dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	005b      	lsls	r3, r3, #1
 80022b6:	2203      	movs	r2, #3
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	43db      	mvns	r3, r3
 80022be:	69ba      	ldr	r2, [r7, #24]
 80022c0:	4013      	ands	r3, r2
 80022c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	689a      	ldr	r2, [r3, #8]
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	fa02 f303 	lsl.w	r3, r2, r3
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f003 0303 	and.w	r3, r3, #3
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d123      	bne.n	8002330 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	08da      	lsrs	r2, r3, #3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	3208      	adds	r2, #8
 80022f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	f003 0307 	and.w	r3, r3, #7
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	220f      	movs	r2, #15
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	43db      	mvns	r3, r3
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	4013      	ands	r3, r2
 800230a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	691a      	ldr	r2, [r3, #16]
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	f003 0307 	and.w	r3, r3, #7
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	fa02 f303 	lsl.w	r3, r2, r3
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	4313      	orrs	r3, r2
 8002320:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	08da      	lsrs	r2, r3, #3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	3208      	adds	r2, #8
 800232a:	69b9      	ldr	r1, [r7, #24]
 800232c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	005b      	lsls	r3, r3, #1
 800233a:	2203      	movs	r2, #3
 800233c:	fa02 f303 	lsl.w	r3, r2, r3
 8002340:	43db      	mvns	r3, r3
 8002342:	69ba      	ldr	r2, [r7, #24]
 8002344:	4013      	ands	r3, r2
 8002346:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f003 0203 	and.w	r2, r3, #3
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	fa02 f303 	lsl.w	r3, r2, r3
 8002358:	69ba      	ldr	r2, [r7, #24]
 800235a:	4313      	orrs	r3, r2
 800235c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800236c:	2b00      	cmp	r3, #0
 800236e:	f000 80ae 	beq.w	80024ce <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002372:	2300      	movs	r3, #0
 8002374:	60fb      	str	r3, [r7, #12]
 8002376:	4b5d      	ldr	r3, [pc, #372]	@ (80024ec <HAL_GPIO_Init+0x300>)
 8002378:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800237a:	4a5c      	ldr	r2, [pc, #368]	@ (80024ec <HAL_GPIO_Init+0x300>)
 800237c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002380:	6453      	str	r3, [r2, #68]	@ 0x44
 8002382:	4b5a      	ldr	r3, [pc, #360]	@ (80024ec <HAL_GPIO_Init+0x300>)
 8002384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002386:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800238a:	60fb      	str	r3, [r7, #12]
 800238c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800238e:	4a58      	ldr	r2, [pc, #352]	@ (80024f0 <HAL_GPIO_Init+0x304>)
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	089b      	lsrs	r3, r3, #2
 8002394:	3302      	adds	r3, #2
 8002396:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800239a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	f003 0303 	and.w	r3, r3, #3
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	220f      	movs	r2, #15
 80023a6:	fa02 f303 	lsl.w	r3, r2, r3
 80023aa:	43db      	mvns	r3, r3
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	4013      	ands	r3, r2
 80023b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a4f      	ldr	r2, [pc, #316]	@ (80024f4 <HAL_GPIO_Init+0x308>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d025      	beq.n	8002406 <HAL_GPIO_Init+0x21a>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a4e      	ldr	r2, [pc, #312]	@ (80024f8 <HAL_GPIO_Init+0x30c>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d01f      	beq.n	8002402 <HAL_GPIO_Init+0x216>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a4d      	ldr	r2, [pc, #308]	@ (80024fc <HAL_GPIO_Init+0x310>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d019      	beq.n	80023fe <HAL_GPIO_Init+0x212>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a4c      	ldr	r2, [pc, #304]	@ (8002500 <HAL_GPIO_Init+0x314>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d013      	beq.n	80023fa <HAL_GPIO_Init+0x20e>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a4b      	ldr	r2, [pc, #300]	@ (8002504 <HAL_GPIO_Init+0x318>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d00d      	beq.n	80023f6 <HAL_GPIO_Init+0x20a>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a4a      	ldr	r2, [pc, #296]	@ (8002508 <HAL_GPIO_Init+0x31c>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d007      	beq.n	80023f2 <HAL_GPIO_Init+0x206>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a49      	ldr	r2, [pc, #292]	@ (800250c <HAL_GPIO_Init+0x320>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d101      	bne.n	80023ee <HAL_GPIO_Init+0x202>
 80023ea:	2306      	movs	r3, #6
 80023ec:	e00c      	b.n	8002408 <HAL_GPIO_Init+0x21c>
 80023ee:	2307      	movs	r3, #7
 80023f0:	e00a      	b.n	8002408 <HAL_GPIO_Init+0x21c>
 80023f2:	2305      	movs	r3, #5
 80023f4:	e008      	b.n	8002408 <HAL_GPIO_Init+0x21c>
 80023f6:	2304      	movs	r3, #4
 80023f8:	e006      	b.n	8002408 <HAL_GPIO_Init+0x21c>
 80023fa:	2303      	movs	r3, #3
 80023fc:	e004      	b.n	8002408 <HAL_GPIO_Init+0x21c>
 80023fe:	2302      	movs	r3, #2
 8002400:	e002      	b.n	8002408 <HAL_GPIO_Init+0x21c>
 8002402:	2301      	movs	r3, #1
 8002404:	e000      	b.n	8002408 <HAL_GPIO_Init+0x21c>
 8002406:	2300      	movs	r3, #0
 8002408:	69fa      	ldr	r2, [r7, #28]
 800240a:	f002 0203 	and.w	r2, r2, #3
 800240e:	0092      	lsls	r2, r2, #2
 8002410:	4093      	lsls	r3, r2
 8002412:	69ba      	ldr	r2, [r7, #24]
 8002414:	4313      	orrs	r3, r2
 8002416:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002418:	4935      	ldr	r1, [pc, #212]	@ (80024f0 <HAL_GPIO_Init+0x304>)
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	089b      	lsrs	r3, r3, #2
 800241e:	3302      	adds	r3, #2
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002426:	4b3a      	ldr	r3, [pc, #232]	@ (8002510 <HAL_GPIO_Init+0x324>)
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	43db      	mvns	r3, r3
 8002430:	69ba      	ldr	r2, [r7, #24]
 8002432:	4013      	ands	r3, r2
 8002434:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d003      	beq.n	800244a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002442:	69ba      	ldr	r2, [r7, #24]
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	4313      	orrs	r3, r2
 8002448:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800244a:	4a31      	ldr	r2, [pc, #196]	@ (8002510 <HAL_GPIO_Init+0x324>)
 800244c:	69bb      	ldr	r3, [r7, #24]
 800244e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002450:	4b2f      	ldr	r3, [pc, #188]	@ (8002510 <HAL_GPIO_Init+0x324>)
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	43db      	mvns	r3, r3
 800245a:	69ba      	ldr	r2, [r7, #24]
 800245c:	4013      	ands	r3, r2
 800245e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d003      	beq.n	8002474 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	4313      	orrs	r3, r2
 8002472:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002474:	4a26      	ldr	r2, [pc, #152]	@ (8002510 <HAL_GPIO_Init+0x324>)
 8002476:	69bb      	ldr	r3, [r7, #24]
 8002478:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800247a:	4b25      	ldr	r3, [pc, #148]	@ (8002510 <HAL_GPIO_Init+0x324>)
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	43db      	mvns	r3, r3
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	4013      	ands	r3, r2
 8002488:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d003      	beq.n	800249e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002496:	69ba      	ldr	r2, [r7, #24]
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	4313      	orrs	r3, r2
 800249c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800249e:	4a1c      	ldr	r2, [pc, #112]	@ (8002510 <HAL_GPIO_Init+0x324>)
 80024a0:	69bb      	ldr	r3, [r7, #24]
 80024a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024a4:	4b1a      	ldr	r3, [pc, #104]	@ (8002510 <HAL_GPIO_Init+0x324>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	43db      	mvns	r3, r3
 80024ae:	69ba      	ldr	r2, [r7, #24]
 80024b0:	4013      	ands	r3, r2
 80024b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d003      	beq.n	80024c8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024c8:	4a11      	ldr	r2, [pc, #68]	@ (8002510 <HAL_GPIO_Init+0x324>)
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	3301      	adds	r3, #1
 80024d2:	61fb      	str	r3, [r7, #28]
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	2b0f      	cmp	r3, #15
 80024d8:	f67f ae96 	bls.w	8002208 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024dc:	bf00      	nop
 80024de:	bf00      	nop
 80024e0:	3724      	adds	r7, #36	@ 0x24
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	40023800 	.word	0x40023800
 80024f0:	40013800 	.word	0x40013800
 80024f4:	40020000 	.word	0x40020000
 80024f8:	40020400 	.word	0x40020400
 80024fc:	40020800 	.word	0x40020800
 8002500:	40020c00 	.word	0x40020c00
 8002504:	40021000 	.word	0x40021000
 8002508:	40021400 	.word	0x40021400
 800250c:	40021800 	.word	0x40021800
 8002510:	40013c00 	.word	0x40013c00

08002514 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	460b      	mov	r3, r1
 800251e:	807b      	strh	r3, [r7, #2]
 8002520:	4613      	mov	r3, r2
 8002522:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002524:	787b      	ldrb	r3, [r7, #1]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d003      	beq.n	8002532 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800252a:	887a      	ldrh	r2, [r7, #2]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002530:	e003      	b.n	800253a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002532:	887b      	ldrh	r3, [r7, #2]
 8002534:	041a      	lsls	r2, r3, #16
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	619a      	str	r2, [r3, #24]
}
 800253a:	bf00      	nop
 800253c:	370c      	adds	r7, #12
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
	...

08002548 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d101      	bne.n	800255c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e0cc      	b.n	80026f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800255c:	4b68      	ldr	r3, [pc, #416]	@ (8002700 <HAL_RCC_ClockConfig+0x1b8>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 030f 	and.w	r3, r3, #15
 8002564:	683a      	ldr	r2, [r7, #0]
 8002566:	429a      	cmp	r2, r3
 8002568:	d90c      	bls.n	8002584 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800256a:	4b65      	ldr	r3, [pc, #404]	@ (8002700 <HAL_RCC_ClockConfig+0x1b8>)
 800256c:	683a      	ldr	r2, [r7, #0]
 800256e:	b2d2      	uxtb	r2, r2
 8002570:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002572:	4b63      	ldr	r3, [pc, #396]	@ (8002700 <HAL_RCC_ClockConfig+0x1b8>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 030f 	and.w	r3, r3, #15
 800257a:	683a      	ldr	r2, [r7, #0]
 800257c:	429a      	cmp	r2, r3
 800257e:	d001      	beq.n	8002584 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e0b8      	b.n	80026f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0302 	and.w	r3, r3, #2
 800258c:	2b00      	cmp	r3, #0
 800258e:	d020      	beq.n	80025d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0304 	and.w	r3, r3, #4
 8002598:	2b00      	cmp	r3, #0
 800259a:	d005      	beq.n	80025a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800259c:	4b59      	ldr	r3, [pc, #356]	@ (8002704 <HAL_RCC_ClockConfig+0x1bc>)
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	4a58      	ldr	r2, [pc, #352]	@ (8002704 <HAL_RCC_ClockConfig+0x1bc>)
 80025a2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80025a6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0308 	and.w	r3, r3, #8
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d005      	beq.n	80025c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025b4:	4b53      	ldr	r3, [pc, #332]	@ (8002704 <HAL_RCC_ClockConfig+0x1bc>)
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	4a52      	ldr	r2, [pc, #328]	@ (8002704 <HAL_RCC_ClockConfig+0x1bc>)
 80025ba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80025be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025c0:	4b50      	ldr	r3, [pc, #320]	@ (8002704 <HAL_RCC_ClockConfig+0x1bc>)
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	494d      	ldr	r1, [pc, #308]	@ (8002704 <HAL_RCC_ClockConfig+0x1bc>)
 80025ce:	4313      	orrs	r3, r2
 80025d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0301 	and.w	r3, r3, #1
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d044      	beq.n	8002668 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d107      	bne.n	80025f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025e6:	4b47      	ldr	r3, [pc, #284]	@ (8002704 <HAL_RCC_ClockConfig+0x1bc>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d119      	bne.n	8002626 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e07f      	b.n	80026f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d003      	beq.n	8002606 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002602:	2b03      	cmp	r3, #3
 8002604:	d107      	bne.n	8002616 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002606:	4b3f      	ldr	r3, [pc, #252]	@ (8002704 <HAL_RCC_ClockConfig+0x1bc>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d109      	bne.n	8002626 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e06f      	b.n	80026f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002616:	4b3b      	ldr	r3, [pc, #236]	@ (8002704 <HAL_RCC_ClockConfig+0x1bc>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0302 	and.w	r3, r3, #2
 800261e:	2b00      	cmp	r3, #0
 8002620:	d101      	bne.n	8002626 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e067      	b.n	80026f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002626:	4b37      	ldr	r3, [pc, #220]	@ (8002704 <HAL_RCC_ClockConfig+0x1bc>)
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	f023 0203 	bic.w	r2, r3, #3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	4934      	ldr	r1, [pc, #208]	@ (8002704 <HAL_RCC_ClockConfig+0x1bc>)
 8002634:	4313      	orrs	r3, r2
 8002636:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002638:	f7ff f90e 	bl	8001858 <HAL_GetTick>
 800263c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800263e:	e00a      	b.n	8002656 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002640:	f7ff f90a 	bl	8001858 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800264e:	4293      	cmp	r3, r2
 8002650:	d901      	bls.n	8002656 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e04f      	b.n	80026f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002656:	4b2b      	ldr	r3, [pc, #172]	@ (8002704 <HAL_RCC_ClockConfig+0x1bc>)
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	f003 020c 	and.w	r2, r3, #12
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	429a      	cmp	r2, r3
 8002666:	d1eb      	bne.n	8002640 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002668:	4b25      	ldr	r3, [pc, #148]	@ (8002700 <HAL_RCC_ClockConfig+0x1b8>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 030f 	and.w	r3, r3, #15
 8002670:	683a      	ldr	r2, [r7, #0]
 8002672:	429a      	cmp	r2, r3
 8002674:	d20c      	bcs.n	8002690 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002676:	4b22      	ldr	r3, [pc, #136]	@ (8002700 <HAL_RCC_ClockConfig+0x1b8>)
 8002678:	683a      	ldr	r2, [r7, #0]
 800267a:	b2d2      	uxtb	r2, r2
 800267c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800267e:	4b20      	ldr	r3, [pc, #128]	@ (8002700 <HAL_RCC_ClockConfig+0x1b8>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 030f 	and.w	r3, r3, #15
 8002686:	683a      	ldr	r2, [r7, #0]
 8002688:	429a      	cmp	r2, r3
 800268a:	d001      	beq.n	8002690 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e032      	b.n	80026f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0304 	and.w	r3, r3, #4
 8002698:	2b00      	cmp	r3, #0
 800269a:	d008      	beq.n	80026ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800269c:	4b19      	ldr	r3, [pc, #100]	@ (8002704 <HAL_RCC_ClockConfig+0x1bc>)
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	4916      	ldr	r1, [pc, #88]	@ (8002704 <HAL_RCC_ClockConfig+0x1bc>)
 80026aa:	4313      	orrs	r3, r2
 80026ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0308 	and.w	r3, r3, #8
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d009      	beq.n	80026ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026ba:	4b12      	ldr	r3, [pc, #72]	@ (8002704 <HAL_RCC_ClockConfig+0x1bc>)
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	691b      	ldr	r3, [r3, #16]
 80026c6:	00db      	lsls	r3, r3, #3
 80026c8:	490e      	ldr	r1, [pc, #56]	@ (8002704 <HAL_RCC_ClockConfig+0x1bc>)
 80026ca:	4313      	orrs	r3, r2
 80026cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026ce:	f000 f855 	bl	800277c <HAL_RCC_GetSysClockFreq>
 80026d2:	4602      	mov	r2, r0
 80026d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002704 <HAL_RCC_ClockConfig+0x1bc>)
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	091b      	lsrs	r3, r3, #4
 80026da:	f003 030f 	and.w	r3, r3, #15
 80026de:	490a      	ldr	r1, [pc, #40]	@ (8002708 <HAL_RCC_ClockConfig+0x1c0>)
 80026e0:	5ccb      	ldrb	r3, [r1, r3]
 80026e2:	fa22 f303 	lsr.w	r3, r2, r3
 80026e6:	4a09      	ldr	r2, [pc, #36]	@ (800270c <HAL_RCC_ClockConfig+0x1c4>)
 80026e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80026ea:	4b09      	ldr	r3, [pc, #36]	@ (8002710 <HAL_RCC_ClockConfig+0x1c8>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4618      	mov	r0, r3
 80026f0:	f7ff f86e 	bl	80017d0 <HAL_InitTick>

  return HAL_OK;
 80026f4:	2300      	movs	r3, #0
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3710      	adds	r7, #16
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	40023c00 	.word	0x40023c00
 8002704:	40023800 	.word	0x40023800
 8002708:	08007c90 	.word	0x08007c90
 800270c:	20000004 	.word	0x20000004
 8002710:	20000008 	.word	0x20000008

08002714 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002718:	4b03      	ldr	r3, [pc, #12]	@ (8002728 <HAL_RCC_GetHCLKFreq+0x14>)
 800271a:	681b      	ldr	r3, [r3, #0]
}
 800271c:	4618      	mov	r0, r3
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop
 8002728:	20000004 	.word	0x20000004

0800272c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002730:	f7ff fff0 	bl	8002714 <HAL_RCC_GetHCLKFreq>
 8002734:	4602      	mov	r2, r0
 8002736:	4b05      	ldr	r3, [pc, #20]	@ (800274c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	0a9b      	lsrs	r3, r3, #10
 800273c:	f003 0307 	and.w	r3, r3, #7
 8002740:	4903      	ldr	r1, [pc, #12]	@ (8002750 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002742:	5ccb      	ldrb	r3, [r1, r3]
 8002744:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002748:	4618      	mov	r0, r3
 800274a:	bd80      	pop	{r7, pc}
 800274c:	40023800 	.word	0x40023800
 8002750:	08007ca0 	.word	0x08007ca0

08002754 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002758:	f7ff ffdc 	bl	8002714 <HAL_RCC_GetHCLKFreq>
 800275c:	4602      	mov	r2, r0
 800275e:	4b05      	ldr	r3, [pc, #20]	@ (8002774 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	0b5b      	lsrs	r3, r3, #13
 8002764:	f003 0307 	and.w	r3, r3, #7
 8002768:	4903      	ldr	r1, [pc, #12]	@ (8002778 <HAL_RCC_GetPCLK2Freq+0x24>)
 800276a:	5ccb      	ldrb	r3, [r1, r3]
 800276c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002770:	4618      	mov	r0, r3
 8002772:	bd80      	pop	{r7, pc}
 8002774:	40023800 	.word	0x40023800
 8002778:	08007ca0 	.word	0x08007ca0

0800277c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800277c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002780:	b0ae      	sub	sp, #184	@ 0xb8
 8002782:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002784:	2300      	movs	r3, #0
 8002786:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800278a:	2300      	movs	r3, #0
 800278c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002790:	2300      	movs	r3, #0
 8002792:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002796:	2300      	movs	r3, #0
 8002798:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800279c:	2300      	movs	r3, #0
 800279e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027a2:	4bcb      	ldr	r3, [pc, #812]	@ (8002ad0 <HAL_RCC_GetSysClockFreq+0x354>)
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	f003 030c 	and.w	r3, r3, #12
 80027aa:	2b0c      	cmp	r3, #12
 80027ac:	f200 8206 	bhi.w	8002bbc <HAL_RCC_GetSysClockFreq+0x440>
 80027b0:	a201      	add	r2, pc, #4	@ (adr r2, 80027b8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80027b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027b6:	bf00      	nop
 80027b8:	080027ed 	.word	0x080027ed
 80027bc:	08002bbd 	.word	0x08002bbd
 80027c0:	08002bbd 	.word	0x08002bbd
 80027c4:	08002bbd 	.word	0x08002bbd
 80027c8:	080027f5 	.word	0x080027f5
 80027cc:	08002bbd 	.word	0x08002bbd
 80027d0:	08002bbd 	.word	0x08002bbd
 80027d4:	08002bbd 	.word	0x08002bbd
 80027d8:	080027fd 	.word	0x080027fd
 80027dc:	08002bbd 	.word	0x08002bbd
 80027e0:	08002bbd 	.word	0x08002bbd
 80027e4:	08002bbd 	.word	0x08002bbd
 80027e8:	080029ed 	.word	0x080029ed
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027ec:	4bb9      	ldr	r3, [pc, #740]	@ (8002ad4 <HAL_RCC_GetSysClockFreq+0x358>)
 80027ee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80027f2:	e1e7      	b.n	8002bc4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027f4:	4bb8      	ldr	r3, [pc, #736]	@ (8002ad8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80027f6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80027fa:	e1e3      	b.n	8002bc4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027fc:	4bb4      	ldr	r3, [pc, #720]	@ (8002ad0 <HAL_RCC_GetSysClockFreq+0x354>)
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002804:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002808:	4bb1      	ldr	r3, [pc, #708]	@ (8002ad0 <HAL_RCC_GetSysClockFreq+0x354>)
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d071      	beq.n	80028f8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002814:	4bae      	ldr	r3, [pc, #696]	@ (8002ad0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	099b      	lsrs	r3, r3, #6
 800281a:	2200      	movs	r2, #0
 800281c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002820:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002824:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002828:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800282c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002830:	2300      	movs	r3, #0
 8002832:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002836:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800283a:	4622      	mov	r2, r4
 800283c:	462b      	mov	r3, r5
 800283e:	f04f 0000 	mov.w	r0, #0
 8002842:	f04f 0100 	mov.w	r1, #0
 8002846:	0159      	lsls	r1, r3, #5
 8002848:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800284c:	0150      	lsls	r0, r2, #5
 800284e:	4602      	mov	r2, r0
 8002850:	460b      	mov	r3, r1
 8002852:	4621      	mov	r1, r4
 8002854:	1a51      	subs	r1, r2, r1
 8002856:	6439      	str	r1, [r7, #64]	@ 0x40
 8002858:	4629      	mov	r1, r5
 800285a:	eb63 0301 	sbc.w	r3, r3, r1
 800285e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002860:	f04f 0200 	mov.w	r2, #0
 8002864:	f04f 0300 	mov.w	r3, #0
 8002868:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800286c:	4649      	mov	r1, r9
 800286e:	018b      	lsls	r3, r1, #6
 8002870:	4641      	mov	r1, r8
 8002872:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002876:	4641      	mov	r1, r8
 8002878:	018a      	lsls	r2, r1, #6
 800287a:	4641      	mov	r1, r8
 800287c:	1a51      	subs	r1, r2, r1
 800287e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002880:	4649      	mov	r1, r9
 8002882:	eb63 0301 	sbc.w	r3, r3, r1
 8002886:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002888:	f04f 0200 	mov.w	r2, #0
 800288c:	f04f 0300 	mov.w	r3, #0
 8002890:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002894:	4649      	mov	r1, r9
 8002896:	00cb      	lsls	r3, r1, #3
 8002898:	4641      	mov	r1, r8
 800289a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800289e:	4641      	mov	r1, r8
 80028a0:	00ca      	lsls	r2, r1, #3
 80028a2:	4610      	mov	r0, r2
 80028a4:	4619      	mov	r1, r3
 80028a6:	4603      	mov	r3, r0
 80028a8:	4622      	mov	r2, r4
 80028aa:	189b      	adds	r3, r3, r2
 80028ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80028ae:	462b      	mov	r3, r5
 80028b0:	460a      	mov	r2, r1
 80028b2:	eb42 0303 	adc.w	r3, r2, r3
 80028b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80028b8:	f04f 0200 	mov.w	r2, #0
 80028bc:	f04f 0300 	mov.w	r3, #0
 80028c0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80028c4:	4629      	mov	r1, r5
 80028c6:	024b      	lsls	r3, r1, #9
 80028c8:	4621      	mov	r1, r4
 80028ca:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80028ce:	4621      	mov	r1, r4
 80028d0:	024a      	lsls	r2, r1, #9
 80028d2:	4610      	mov	r0, r2
 80028d4:	4619      	mov	r1, r3
 80028d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80028da:	2200      	movs	r2, #0
 80028dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80028e0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80028e4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80028e8:	f7fd fc94 	bl	8000214 <__aeabi_uldivmod>
 80028ec:	4602      	mov	r2, r0
 80028ee:	460b      	mov	r3, r1
 80028f0:	4613      	mov	r3, r2
 80028f2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80028f6:	e067      	b.n	80029c8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028f8:	4b75      	ldr	r3, [pc, #468]	@ (8002ad0 <HAL_RCC_GetSysClockFreq+0x354>)
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	099b      	lsrs	r3, r3, #6
 80028fe:	2200      	movs	r2, #0
 8002900:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002904:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002908:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800290c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002910:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002912:	2300      	movs	r3, #0
 8002914:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002916:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800291a:	4622      	mov	r2, r4
 800291c:	462b      	mov	r3, r5
 800291e:	f04f 0000 	mov.w	r0, #0
 8002922:	f04f 0100 	mov.w	r1, #0
 8002926:	0159      	lsls	r1, r3, #5
 8002928:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800292c:	0150      	lsls	r0, r2, #5
 800292e:	4602      	mov	r2, r0
 8002930:	460b      	mov	r3, r1
 8002932:	4621      	mov	r1, r4
 8002934:	1a51      	subs	r1, r2, r1
 8002936:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002938:	4629      	mov	r1, r5
 800293a:	eb63 0301 	sbc.w	r3, r3, r1
 800293e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002940:	f04f 0200 	mov.w	r2, #0
 8002944:	f04f 0300 	mov.w	r3, #0
 8002948:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800294c:	4649      	mov	r1, r9
 800294e:	018b      	lsls	r3, r1, #6
 8002950:	4641      	mov	r1, r8
 8002952:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002956:	4641      	mov	r1, r8
 8002958:	018a      	lsls	r2, r1, #6
 800295a:	4641      	mov	r1, r8
 800295c:	ebb2 0a01 	subs.w	sl, r2, r1
 8002960:	4649      	mov	r1, r9
 8002962:	eb63 0b01 	sbc.w	fp, r3, r1
 8002966:	f04f 0200 	mov.w	r2, #0
 800296a:	f04f 0300 	mov.w	r3, #0
 800296e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002972:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002976:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800297a:	4692      	mov	sl, r2
 800297c:	469b      	mov	fp, r3
 800297e:	4623      	mov	r3, r4
 8002980:	eb1a 0303 	adds.w	r3, sl, r3
 8002984:	623b      	str	r3, [r7, #32]
 8002986:	462b      	mov	r3, r5
 8002988:	eb4b 0303 	adc.w	r3, fp, r3
 800298c:	627b      	str	r3, [r7, #36]	@ 0x24
 800298e:	f04f 0200 	mov.w	r2, #0
 8002992:	f04f 0300 	mov.w	r3, #0
 8002996:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800299a:	4629      	mov	r1, r5
 800299c:	028b      	lsls	r3, r1, #10
 800299e:	4621      	mov	r1, r4
 80029a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029a4:	4621      	mov	r1, r4
 80029a6:	028a      	lsls	r2, r1, #10
 80029a8:	4610      	mov	r0, r2
 80029aa:	4619      	mov	r1, r3
 80029ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80029b0:	2200      	movs	r2, #0
 80029b2:	673b      	str	r3, [r7, #112]	@ 0x70
 80029b4:	677a      	str	r2, [r7, #116]	@ 0x74
 80029b6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80029ba:	f7fd fc2b 	bl	8000214 <__aeabi_uldivmod>
 80029be:	4602      	mov	r2, r0
 80029c0:	460b      	mov	r3, r1
 80029c2:	4613      	mov	r3, r2
 80029c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80029c8:	4b41      	ldr	r3, [pc, #260]	@ (8002ad0 <HAL_RCC_GetSysClockFreq+0x354>)
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	0c1b      	lsrs	r3, r3, #16
 80029ce:	f003 0303 	and.w	r3, r3, #3
 80029d2:	3301      	adds	r3, #1
 80029d4:	005b      	lsls	r3, r3, #1
 80029d6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80029da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80029de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80029e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80029ea:	e0eb      	b.n	8002bc4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029ec:	4b38      	ldr	r3, [pc, #224]	@ (8002ad0 <HAL_RCC_GetSysClockFreq+0x354>)
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80029f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029f8:	4b35      	ldr	r3, [pc, #212]	@ (8002ad0 <HAL_RCC_GetSysClockFreq+0x354>)
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d06b      	beq.n	8002adc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a04:	4b32      	ldr	r3, [pc, #200]	@ (8002ad0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	099b      	lsrs	r3, r3, #6
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002a0e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002a10:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002a12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a16:	663b      	str	r3, [r7, #96]	@ 0x60
 8002a18:	2300      	movs	r3, #0
 8002a1a:	667b      	str	r3, [r7, #100]	@ 0x64
 8002a1c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002a20:	4622      	mov	r2, r4
 8002a22:	462b      	mov	r3, r5
 8002a24:	f04f 0000 	mov.w	r0, #0
 8002a28:	f04f 0100 	mov.w	r1, #0
 8002a2c:	0159      	lsls	r1, r3, #5
 8002a2e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a32:	0150      	lsls	r0, r2, #5
 8002a34:	4602      	mov	r2, r0
 8002a36:	460b      	mov	r3, r1
 8002a38:	4621      	mov	r1, r4
 8002a3a:	1a51      	subs	r1, r2, r1
 8002a3c:	61b9      	str	r1, [r7, #24]
 8002a3e:	4629      	mov	r1, r5
 8002a40:	eb63 0301 	sbc.w	r3, r3, r1
 8002a44:	61fb      	str	r3, [r7, #28]
 8002a46:	f04f 0200 	mov.w	r2, #0
 8002a4a:	f04f 0300 	mov.w	r3, #0
 8002a4e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002a52:	4659      	mov	r1, fp
 8002a54:	018b      	lsls	r3, r1, #6
 8002a56:	4651      	mov	r1, sl
 8002a58:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a5c:	4651      	mov	r1, sl
 8002a5e:	018a      	lsls	r2, r1, #6
 8002a60:	4651      	mov	r1, sl
 8002a62:	ebb2 0801 	subs.w	r8, r2, r1
 8002a66:	4659      	mov	r1, fp
 8002a68:	eb63 0901 	sbc.w	r9, r3, r1
 8002a6c:	f04f 0200 	mov.w	r2, #0
 8002a70:	f04f 0300 	mov.w	r3, #0
 8002a74:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a78:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a7c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a80:	4690      	mov	r8, r2
 8002a82:	4699      	mov	r9, r3
 8002a84:	4623      	mov	r3, r4
 8002a86:	eb18 0303 	adds.w	r3, r8, r3
 8002a8a:	613b      	str	r3, [r7, #16]
 8002a8c:	462b      	mov	r3, r5
 8002a8e:	eb49 0303 	adc.w	r3, r9, r3
 8002a92:	617b      	str	r3, [r7, #20]
 8002a94:	f04f 0200 	mov.w	r2, #0
 8002a98:	f04f 0300 	mov.w	r3, #0
 8002a9c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002aa0:	4629      	mov	r1, r5
 8002aa2:	024b      	lsls	r3, r1, #9
 8002aa4:	4621      	mov	r1, r4
 8002aa6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002aaa:	4621      	mov	r1, r4
 8002aac:	024a      	lsls	r2, r1, #9
 8002aae:	4610      	mov	r0, r2
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002aba:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002abc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002ac0:	f7fd fba8 	bl	8000214 <__aeabi_uldivmod>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	460b      	mov	r3, r1
 8002ac8:	4613      	mov	r3, r2
 8002aca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002ace:	e065      	b.n	8002b9c <HAL_RCC_GetSysClockFreq+0x420>
 8002ad0:	40023800 	.word	0x40023800
 8002ad4:	00f42400 	.word	0x00f42400
 8002ad8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002adc:	4b3d      	ldr	r3, [pc, #244]	@ (8002bd4 <HAL_RCC_GetSysClockFreq+0x458>)
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	099b      	lsrs	r3, r3, #6
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	4611      	mov	r1, r2
 8002ae8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002aec:	653b      	str	r3, [r7, #80]	@ 0x50
 8002aee:	2300      	movs	r3, #0
 8002af0:	657b      	str	r3, [r7, #84]	@ 0x54
 8002af2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002af6:	4642      	mov	r2, r8
 8002af8:	464b      	mov	r3, r9
 8002afa:	f04f 0000 	mov.w	r0, #0
 8002afe:	f04f 0100 	mov.w	r1, #0
 8002b02:	0159      	lsls	r1, r3, #5
 8002b04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b08:	0150      	lsls	r0, r2, #5
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	4641      	mov	r1, r8
 8002b10:	1a51      	subs	r1, r2, r1
 8002b12:	60b9      	str	r1, [r7, #8]
 8002b14:	4649      	mov	r1, r9
 8002b16:	eb63 0301 	sbc.w	r3, r3, r1
 8002b1a:	60fb      	str	r3, [r7, #12]
 8002b1c:	f04f 0200 	mov.w	r2, #0
 8002b20:	f04f 0300 	mov.w	r3, #0
 8002b24:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002b28:	4659      	mov	r1, fp
 8002b2a:	018b      	lsls	r3, r1, #6
 8002b2c:	4651      	mov	r1, sl
 8002b2e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b32:	4651      	mov	r1, sl
 8002b34:	018a      	lsls	r2, r1, #6
 8002b36:	4651      	mov	r1, sl
 8002b38:	1a54      	subs	r4, r2, r1
 8002b3a:	4659      	mov	r1, fp
 8002b3c:	eb63 0501 	sbc.w	r5, r3, r1
 8002b40:	f04f 0200 	mov.w	r2, #0
 8002b44:	f04f 0300 	mov.w	r3, #0
 8002b48:	00eb      	lsls	r3, r5, #3
 8002b4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b4e:	00e2      	lsls	r2, r4, #3
 8002b50:	4614      	mov	r4, r2
 8002b52:	461d      	mov	r5, r3
 8002b54:	4643      	mov	r3, r8
 8002b56:	18e3      	adds	r3, r4, r3
 8002b58:	603b      	str	r3, [r7, #0]
 8002b5a:	464b      	mov	r3, r9
 8002b5c:	eb45 0303 	adc.w	r3, r5, r3
 8002b60:	607b      	str	r3, [r7, #4]
 8002b62:	f04f 0200 	mov.w	r2, #0
 8002b66:	f04f 0300 	mov.w	r3, #0
 8002b6a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b6e:	4629      	mov	r1, r5
 8002b70:	028b      	lsls	r3, r1, #10
 8002b72:	4621      	mov	r1, r4
 8002b74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b78:	4621      	mov	r1, r4
 8002b7a:	028a      	lsls	r2, r1, #10
 8002b7c:	4610      	mov	r0, r2
 8002b7e:	4619      	mov	r1, r3
 8002b80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b84:	2200      	movs	r2, #0
 8002b86:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002b88:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002b8a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002b8e:	f7fd fb41 	bl	8000214 <__aeabi_uldivmod>
 8002b92:	4602      	mov	r2, r0
 8002b94:	460b      	mov	r3, r1
 8002b96:	4613      	mov	r3, r2
 8002b98:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002b9c:	4b0d      	ldr	r3, [pc, #52]	@ (8002bd4 <HAL_RCC_GetSysClockFreq+0x458>)
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	0f1b      	lsrs	r3, r3, #28
 8002ba2:	f003 0307 	and.w	r3, r3, #7
 8002ba6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002baa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002bae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bb6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002bba:	e003      	b.n	8002bc4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002bbc:	4b06      	ldr	r3, [pc, #24]	@ (8002bd8 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002bbe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002bc2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bc4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	37b8      	adds	r7, #184	@ 0xb8
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bd2:	bf00      	nop
 8002bd4:	40023800 	.word	0x40023800
 8002bd8:	00f42400 	.word	0x00f42400

08002bdc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b086      	sub	sp, #24
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d101      	bne.n	8002bee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e28d      	b.n	800310a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0301 	and.w	r3, r3, #1
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	f000 8083 	beq.w	8002d02 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002bfc:	4b94      	ldr	r3, [pc, #592]	@ (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	f003 030c 	and.w	r3, r3, #12
 8002c04:	2b04      	cmp	r3, #4
 8002c06:	d019      	beq.n	8002c3c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002c08:	4b91      	ldr	r3, [pc, #580]	@ (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	f003 030c 	and.w	r3, r3, #12
        || \
 8002c10:	2b08      	cmp	r3, #8
 8002c12:	d106      	bne.n	8002c22 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002c14:	4b8e      	ldr	r3, [pc, #568]	@ (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c1c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c20:	d00c      	beq.n	8002c3c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c22:	4b8b      	ldr	r3, [pc, #556]	@ (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002c2a:	2b0c      	cmp	r3, #12
 8002c2c:	d112      	bne.n	8002c54 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c2e:	4b88      	ldr	r3, [pc, #544]	@ (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c36:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c3a:	d10b      	bne.n	8002c54 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c3c:	4b84      	ldr	r3, [pc, #528]	@ (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d05b      	beq.n	8002d00 <HAL_RCC_OscConfig+0x124>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d157      	bne.n	8002d00 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e25a      	b.n	800310a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c5c:	d106      	bne.n	8002c6c <HAL_RCC_OscConfig+0x90>
 8002c5e:	4b7c      	ldr	r3, [pc, #496]	@ (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a7b      	ldr	r2, [pc, #492]	@ (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002c64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c68:	6013      	str	r3, [r2, #0]
 8002c6a:	e01d      	b.n	8002ca8 <HAL_RCC_OscConfig+0xcc>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c74:	d10c      	bne.n	8002c90 <HAL_RCC_OscConfig+0xb4>
 8002c76:	4b76      	ldr	r3, [pc, #472]	@ (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a75      	ldr	r2, [pc, #468]	@ (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002c7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c80:	6013      	str	r3, [r2, #0]
 8002c82:	4b73      	ldr	r3, [pc, #460]	@ (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a72      	ldr	r2, [pc, #456]	@ (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002c88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c8c:	6013      	str	r3, [r2, #0]
 8002c8e:	e00b      	b.n	8002ca8 <HAL_RCC_OscConfig+0xcc>
 8002c90:	4b6f      	ldr	r3, [pc, #444]	@ (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a6e      	ldr	r2, [pc, #440]	@ (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002c96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c9a:	6013      	str	r3, [r2, #0]
 8002c9c:	4b6c      	ldr	r3, [pc, #432]	@ (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a6b      	ldr	r2, [pc, #428]	@ (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002ca2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ca6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d013      	beq.n	8002cd8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb0:	f7fe fdd2 	bl	8001858 <HAL_GetTick>
 8002cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cb6:	e008      	b.n	8002cca <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cb8:	f7fe fdce 	bl	8001858 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	2b64      	cmp	r3, #100	@ 0x64
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e21f      	b.n	800310a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cca:	4b61      	ldr	r3, [pc, #388]	@ (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d0f0      	beq.n	8002cb8 <HAL_RCC_OscConfig+0xdc>
 8002cd6:	e014      	b.n	8002d02 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd8:	f7fe fdbe 	bl	8001858 <HAL_GetTick>
 8002cdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cde:	e008      	b.n	8002cf2 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ce0:	f7fe fdba 	bl	8001858 <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	2b64      	cmp	r3, #100	@ 0x64
 8002cec:	d901      	bls.n	8002cf2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e20b      	b.n	800310a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cf2:	4b57      	ldr	r3, [pc, #348]	@ (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d1f0      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x104>
 8002cfe:	e000      	b.n	8002d02 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d06f      	beq.n	8002dee <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002d0e:	4b50      	ldr	r3, [pc, #320]	@ (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	f003 030c 	and.w	r3, r3, #12
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d017      	beq.n	8002d4a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002d1a:	4b4d      	ldr	r3, [pc, #308]	@ (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f003 030c 	and.w	r3, r3, #12
        || \
 8002d22:	2b08      	cmp	r3, #8
 8002d24:	d105      	bne.n	8002d32 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002d26:	4b4a      	ldr	r3, [pc, #296]	@ (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d00b      	beq.n	8002d4a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d32:	4b47      	ldr	r3, [pc, #284]	@ (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002d3a:	2b0c      	cmp	r3, #12
 8002d3c:	d11c      	bne.n	8002d78 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d3e:	4b44      	ldr	r3, [pc, #272]	@ (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d116      	bne.n	8002d78 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d4a:	4b41      	ldr	r3, [pc, #260]	@ (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0302 	and.w	r3, r3, #2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d005      	beq.n	8002d62 <HAL_RCC_OscConfig+0x186>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d001      	beq.n	8002d62 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e1d3      	b.n	800310a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d62:	4b3b      	ldr	r3, [pc, #236]	@ (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	691b      	ldr	r3, [r3, #16]
 8002d6e:	00db      	lsls	r3, r3, #3
 8002d70:	4937      	ldr	r1, [pc, #220]	@ (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d76:	e03a      	b.n	8002dee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d020      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d80:	4b34      	ldr	r3, [pc, #208]	@ (8002e54 <HAL_RCC_OscConfig+0x278>)
 8002d82:	2201      	movs	r2, #1
 8002d84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d86:	f7fe fd67 	bl	8001858 <HAL_GetTick>
 8002d8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d8c:	e008      	b.n	8002da0 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d8e:	f7fe fd63 	bl	8001858 <HAL_GetTick>
 8002d92:	4602      	mov	r2, r0
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d901      	bls.n	8002da0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	e1b4      	b.n	800310a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002da0:	4b2b      	ldr	r3, [pc, #172]	@ (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0302 	and.w	r3, r3, #2
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d0f0      	beq.n	8002d8e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dac:	4b28      	ldr	r3, [pc, #160]	@ (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	691b      	ldr	r3, [r3, #16]
 8002db8:	00db      	lsls	r3, r3, #3
 8002dba:	4925      	ldr	r1, [pc, #148]	@ (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	600b      	str	r3, [r1, #0]
 8002dc0:	e015      	b.n	8002dee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dc2:	4b24      	ldr	r3, [pc, #144]	@ (8002e54 <HAL_RCC_OscConfig+0x278>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc8:	f7fe fd46 	bl	8001858 <HAL_GetTick>
 8002dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dce:	e008      	b.n	8002de2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dd0:	f7fe fd42 	bl	8001858 <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e193      	b.n	800310a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002de2:	4b1b      	ldr	r3, [pc, #108]	@ (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0302 	and.w	r3, r3, #2
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d1f0      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0308 	and.w	r3, r3, #8
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d036      	beq.n	8002e68 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	695b      	ldr	r3, [r3, #20]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d016      	beq.n	8002e30 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e02:	4b15      	ldr	r3, [pc, #84]	@ (8002e58 <HAL_RCC_OscConfig+0x27c>)
 8002e04:	2201      	movs	r2, #1
 8002e06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e08:	f7fe fd26 	bl	8001858 <HAL_GetTick>
 8002e0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e0e:	e008      	b.n	8002e22 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e10:	f7fe fd22 	bl	8001858 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d901      	bls.n	8002e22 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e173      	b.n	800310a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e22:	4b0b      	ldr	r3, [pc, #44]	@ (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002e24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e26:	f003 0302 	and.w	r3, r3, #2
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d0f0      	beq.n	8002e10 <HAL_RCC_OscConfig+0x234>
 8002e2e:	e01b      	b.n	8002e68 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e30:	4b09      	ldr	r3, [pc, #36]	@ (8002e58 <HAL_RCC_OscConfig+0x27c>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e36:	f7fe fd0f 	bl	8001858 <HAL_GetTick>
 8002e3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e3c:	e00e      	b.n	8002e5c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e3e:	f7fe fd0b 	bl	8001858 <HAL_GetTick>
 8002e42:	4602      	mov	r2, r0
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d907      	bls.n	8002e5c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	e15c      	b.n	800310a <HAL_RCC_OscConfig+0x52e>
 8002e50:	40023800 	.word	0x40023800
 8002e54:	42470000 	.word	0x42470000
 8002e58:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e5c:	4b8a      	ldr	r3, [pc, #552]	@ (8003088 <HAL_RCC_OscConfig+0x4ac>)
 8002e5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e60:	f003 0302 	and.w	r3, r3, #2
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d1ea      	bne.n	8002e3e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0304 	and.w	r3, r3, #4
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	f000 8097 	beq.w	8002fa4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e76:	2300      	movs	r3, #0
 8002e78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e7a:	4b83      	ldr	r3, [pc, #524]	@ (8003088 <HAL_RCC_OscConfig+0x4ac>)
 8002e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d10f      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e86:	2300      	movs	r3, #0
 8002e88:	60bb      	str	r3, [r7, #8]
 8002e8a:	4b7f      	ldr	r3, [pc, #508]	@ (8003088 <HAL_RCC_OscConfig+0x4ac>)
 8002e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e8e:	4a7e      	ldr	r2, [pc, #504]	@ (8003088 <HAL_RCC_OscConfig+0x4ac>)
 8002e90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e94:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e96:	4b7c      	ldr	r3, [pc, #496]	@ (8003088 <HAL_RCC_OscConfig+0x4ac>)
 8002e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e9e:	60bb      	str	r3, [r7, #8]
 8002ea0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ea6:	4b79      	ldr	r3, [pc, #484]	@ (800308c <HAL_RCC_OscConfig+0x4b0>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d118      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002eb2:	4b76      	ldr	r3, [pc, #472]	@ (800308c <HAL_RCC_OscConfig+0x4b0>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a75      	ldr	r2, [pc, #468]	@ (800308c <HAL_RCC_OscConfig+0x4b0>)
 8002eb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ebc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ebe:	f7fe fccb 	bl	8001858 <HAL_GetTick>
 8002ec2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ec4:	e008      	b.n	8002ed8 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ec6:	f7fe fcc7 	bl	8001858 <HAL_GetTick>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	1ad3      	subs	r3, r2, r3
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	d901      	bls.n	8002ed8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	e118      	b.n	800310a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ed8:	4b6c      	ldr	r3, [pc, #432]	@ (800308c <HAL_RCC_OscConfig+0x4b0>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d0f0      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d106      	bne.n	8002efa <HAL_RCC_OscConfig+0x31e>
 8002eec:	4b66      	ldr	r3, [pc, #408]	@ (8003088 <HAL_RCC_OscConfig+0x4ac>)
 8002eee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ef0:	4a65      	ldr	r2, [pc, #404]	@ (8003088 <HAL_RCC_OscConfig+0x4ac>)
 8002ef2:	f043 0301 	orr.w	r3, r3, #1
 8002ef6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ef8:	e01c      	b.n	8002f34 <HAL_RCC_OscConfig+0x358>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	2b05      	cmp	r3, #5
 8002f00:	d10c      	bne.n	8002f1c <HAL_RCC_OscConfig+0x340>
 8002f02:	4b61      	ldr	r3, [pc, #388]	@ (8003088 <HAL_RCC_OscConfig+0x4ac>)
 8002f04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f06:	4a60      	ldr	r2, [pc, #384]	@ (8003088 <HAL_RCC_OscConfig+0x4ac>)
 8002f08:	f043 0304 	orr.w	r3, r3, #4
 8002f0c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f0e:	4b5e      	ldr	r3, [pc, #376]	@ (8003088 <HAL_RCC_OscConfig+0x4ac>)
 8002f10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f12:	4a5d      	ldr	r2, [pc, #372]	@ (8003088 <HAL_RCC_OscConfig+0x4ac>)
 8002f14:	f043 0301 	orr.w	r3, r3, #1
 8002f18:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f1a:	e00b      	b.n	8002f34 <HAL_RCC_OscConfig+0x358>
 8002f1c:	4b5a      	ldr	r3, [pc, #360]	@ (8003088 <HAL_RCC_OscConfig+0x4ac>)
 8002f1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f20:	4a59      	ldr	r2, [pc, #356]	@ (8003088 <HAL_RCC_OscConfig+0x4ac>)
 8002f22:	f023 0301 	bic.w	r3, r3, #1
 8002f26:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f28:	4b57      	ldr	r3, [pc, #348]	@ (8003088 <HAL_RCC_OscConfig+0x4ac>)
 8002f2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f2c:	4a56      	ldr	r2, [pc, #344]	@ (8003088 <HAL_RCC_OscConfig+0x4ac>)
 8002f2e:	f023 0304 	bic.w	r3, r3, #4
 8002f32:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d015      	beq.n	8002f68 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f3c:	f7fe fc8c 	bl	8001858 <HAL_GetTick>
 8002f40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f42:	e00a      	b.n	8002f5a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f44:	f7fe fc88 	bl	8001858 <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d901      	bls.n	8002f5a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e0d7      	b.n	800310a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f5a:	4b4b      	ldr	r3, [pc, #300]	@ (8003088 <HAL_RCC_OscConfig+0x4ac>)
 8002f5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f5e:	f003 0302 	and.w	r3, r3, #2
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d0ee      	beq.n	8002f44 <HAL_RCC_OscConfig+0x368>
 8002f66:	e014      	b.n	8002f92 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f68:	f7fe fc76 	bl	8001858 <HAL_GetTick>
 8002f6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f6e:	e00a      	b.n	8002f86 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f70:	f7fe fc72 	bl	8001858 <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d901      	bls.n	8002f86 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	e0c1      	b.n	800310a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f86:	4b40      	ldr	r3, [pc, #256]	@ (8003088 <HAL_RCC_OscConfig+0x4ac>)
 8002f88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f8a:	f003 0302 	and.w	r3, r3, #2
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d1ee      	bne.n	8002f70 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f92:	7dfb      	ldrb	r3, [r7, #23]
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d105      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f98:	4b3b      	ldr	r3, [pc, #236]	@ (8003088 <HAL_RCC_OscConfig+0x4ac>)
 8002f9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f9c:	4a3a      	ldr	r2, [pc, #232]	@ (8003088 <HAL_RCC_OscConfig+0x4ac>)
 8002f9e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002fa2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	699b      	ldr	r3, [r3, #24]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	f000 80ad 	beq.w	8003108 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002fae:	4b36      	ldr	r3, [pc, #216]	@ (8003088 <HAL_RCC_OscConfig+0x4ac>)
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f003 030c 	and.w	r3, r3, #12
 8002fb6:	2b08      	cmp	r3, #8
 8002fb8:	d060      	beq.n	800307c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	699b      	ldr	r3, [r3, #24]
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d145      	bne.n	800304e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fc2:	4b33      	ldr	r3, [pc, #204]	@ (8003090 <HAL_RCC_OscConfig+0x4b4>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc8:	f7fe fc46 	bl	8001858 <HAL_GetTick>
 8002fcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fce:	e008      	b.n	8002fe2 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fd0:	f7fe fc42 	bl	8001858 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d901      	bls.n	8002fe2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e093      	b.n	800310a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fe2:	4b29      	ldr	r3, [pc, #164]	@ (8003088 <HAL_RCC_OscConfig+0x4ac>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d1f0      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	69da      	ldr	r2, [r3, #28]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6a1b      	ldr	r3, [r3, #32]
 8002ff6:	431a      	orrs	r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ffc:	019b      	lsls	r3, r3, #6
 8002ffe:	431a      	orrs	r2, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003004:	085b      	lsrs	r3, r3, #1
 8003006:	3b01      	subs	r3, #1
 8003008:	041b      	lsls	r3, r3, #16
 800300a:	431a      	orrs	r2, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003010:	061b      	lsls	r3, r3, #24
 8003012:	431a      	orrs	r2, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003018:	071b      	lsls	r3, r3, #28
 800301a:	491b      	ldr	r1, [pc, #108]	@ (8003088 <HAL_RCC_OscConfig+0x4ac>)
 800301c:	4313      	orrs	r3, r2
 800301e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003020:	4b1b      	ldr	r3, [pc, #108]	@ (8003090 <HAL_RCC_OscConfig+0x4b4>)
 8003022:	2201      	movs	r2, #1
 8003024:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003026:	f7fe fc17 	bl	8001858 <HAL_GetTick>
 800302a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800302c:	e008      	b.n	8003040 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800302e:	f7fe fc13 	bl	8001858 <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	2b02      	cmp	r3, #2
 800303a:	d901      	bls.n	8003040 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800303c:	2303      	movs	r3, #3
 800303e:	e064      	b.n	800310a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003040:	4b11      	ldr	r3, [pc, #68]	@ (8003088 <HAL_RCC_OscConfig+0x4ac>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d0f0      	beq.n	800302e <HAL_RCC_OscConfig+0x452>
 800304c:	e05c      	b.n	8003108 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800304e:	4b10      	ldr	r3, [pc, #64]	@ (8003090 <HAL_RCC_OscConfig+0x4b4>)
 8003050:	2200      	movs	r2, #0
 8003052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003054:	f7fe fc00 	bl	8001858 <HAL_GetTick>
 8003058:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800305a:	e008      	b.n	800306e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800305c:	f7fe fbfc 	bl	8001858 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	2b02      	cmp	r3, #2
 8003068:	d901      	bls.n	800306e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e04d      	b.n	800310a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800306e:	4b06      	ldr	r3, [pc, #24]	@ (8003088 <HAL_RCC_OscConfig+0x4ac>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d1f0      	bne.n	800305c <HAL_RCC_OscConfig+0x480>
 800307a:	e045      	b.n	8003108 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	699b      	ldr	r3, [r3, #24]
 8003080:	2b01      	cmp	r3, #1
 8003082:	d107      	bne.n	8003094 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e040      	b.n	800310a <HAL_RCC_OscConfig+0x52e>
 8003088:	40023800 	.word	0x40023800
 800308c:	40007000 	.word	0x40007000
 8003090:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003094:	4b1f      	ldr	r3, [pc, #124]	@ (8003114 <HAL_RCC_OscConfig+0x538>)
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	699b      	ldr	r3, [r3, #24]
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d030      	beq.n	8003104 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d129      	bne.n	8003104 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d122      	bne.n	8003104 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030be:	68fa      	ldr	r2, [r7, #12]
 80030c0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80030c4:	4013      	ands	r3, r2
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80030ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d119      	bne.n	8003104 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030da:	085b      	lsrs	r3, r3, #1
 80030dc:	3b01      	subs	r3, #1
 80030de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d10f      	bne.n	8003104 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d107      	bne.n	8003104 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030fe:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003100:	429a      	cmp	r2, r3
 8003102:	d001      	beq.n	8003108 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e000      	b.n	800310a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3718      	adds	r7, #24
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	40023800 	.word	0x40023800

08003118 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d101      	bne.n	800312a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e07b      	b.n	8003222 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800312e:	2b00      	cmp	r3, #0
 8003130:	d108      	bne.n	8003144 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800313a:	d009      	beq.n	8003150 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	61da      	str	r2, [r3, #28]
 8003142:	e005      	b.n	8003150 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2200      	movs	r2, #0
 8003148:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800315c:	b2db      	uxtb	r3, r3
 800315e:	2b00      	cmp	r3, #0
 8003160:	d106      	bne.n	8003170 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f7fe f96e 	bl	800144c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2202      	movs	r2, #2
 8003174:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003186:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003198:	431a      	orrs	r2, r3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80031a2:	431a      	orrs	r2, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	691b      	ldr	r3, [r3, #16]
 80031a8:	f003 0302 	and.w	r3, r3, #2
 80031ac:	431a      	orrs	r2, r3
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	695b      	ldr	r3, [r3, #20]
 80031b2:	f003 0301 	and.w	r3, r3, #1
 80031b6:	431a      	orrs	r2, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	699b      	ldr	r3, [r3, #24]
 80031bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031c0:	431a      	orrs	r2, r3
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	69db      	ldr	r3, [r3, #28]
 80031c6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80031ca:	431a      	orrs	r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6a1b      	ldr	r3, [r3, #32]
 80031d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031d4:	ea42 0103 	orr.w	r1, r2, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031dc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	430a      	orrs	r2, r1
 80031e6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	699b      	ldr	r3, [r3, #24]
 80031ec:	0c1b      	lsrs	r3, r3, #16
 80031ee:	f003 0104 	and.w	r1, r3, #4
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f6:	f003 0210 	and.w	r2, r3, #16
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	430a      	orrs	r2, r1
 8003200:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	69da      	ldr	r2, [r3, #28]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003210:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003220:	2300      	movs	r3, #0
}
 8003222:	4618      	mov	r0, r3
 8003224:	3708      	adds	r7, #8
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}

0800322a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800322a:	b580      	push	{r7, lr}
 800322c:	b088      	sub	sp, #32
 800322e:	af00      	add	r7, sp, #0
 8003230:	60f8      	str	r0, [r7, #12]
 8003232:	60b9      	str	r1, [r7, #8]
 8003234:	603b      	str	r3, [r7, #0]
 8003236:	4613      	mov	r3, r2
 8003238:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800323a:	f7fe fb0d 	bl	8001858 <HAL_GetTick>
 800323e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003240:	88fb      	ldrh	r3, [r7, #6]
 8003242:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800324a:	b2db      	uxtb	r3, r3
 800324c:	2b01      	cmp	r3, #1
 800324e:	d001      	beq.n	8003254 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003250:	2302      	movs	r3, #2
 8003252:	e12a      	b.n	80034aa <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d002      	beq.n	8003260 <HAL_SPI_Transmit+0x36>
 800325a:	88fb      	ldrh	r3, [r7, #6]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d101      	bne.n	8003264 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e122      	b.n	80034aa <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800326a:	2b01      	cmp	r3, #1
 800326c:	d101      	bne.n	8003272 <HAL_SPI_Transmit+0x48>
 800326e:	2302      	movs	r3, #2
 8003270:	e11b      	b.n	80034aa <HAL_SPI_Transmit+0x280>
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2201      	movs	r2, #1
 8003276:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2203      	movs	r2, #3
 800327e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2200      	movs	r2, #0
 8003286:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	68ba      	ldr	r2, [r7, #8]
 800328c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	88fa      	ldrh	r2, [r7, #6]
 8003292:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	88fa      	ldrh	r2, [r7, #6]
 8003298:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2200      	movs	r2, #0
 800329e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2200      	movs	r2, #0
 80032a4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2200      	movs	r2, #0
 80032aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2200      	movs	r2, #0
 80032b0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2200      	movs	r2, #0
 80032b6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80032c0:	d10f      	bne.n	80032e2 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80032d0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80032e0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032ec:	2b40      	cmp	r3, #64	@ 0x40
 80032ee:	d007      	beq.n	8003300 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80032fe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003308:	d152      	bne.n	80033b0 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d002      	beq.n	8003318 <HAL_SPI_Transmit+0xee>
 8003312:	8b7b      	ldrh	r3, [r7, #26]
 8003314:	2b01      	cmp	r3, #1
 8003316:	d145      	bne.n	80033a4 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800331c:	881a      	ldrh	r2, [r3, #0]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003328:	1c9a      	adds	r2, r3, #2
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003332:	b29b      	uxth	r3, r3
 8003334:	3b01      	subs	r3, #1
 8003336:	b29a      	uxth	r2, r3
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800333c:	e032      	b.n	80033a4 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	f003 0302 	and.w	r3, r3, #2
 8003348:	2b02      	cmp	r3, #2
 800334a:	d112      	bne.n	8003372 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003350:	881a      	ldrh	r2, [r3, #0]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800335c:	1c9a      	adds	r2, r3, #2
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003366:	b29b      	uxth	r3, r3
 8003368:	3b01      	subs	r3, #1
 800336a:	b29a      	uxth	r2, r3
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003370:	e018      	b.n	80033a4 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003372:	f7fe fa71 	bl	8001858 <HAL_GetTick>
 8003376:	4602      	mov	r2, r0
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	683a      	ldr	r2, [r7, #0]
 800337e:	429a      	cmp	r2, r3
 8003380:	d803      	bhi.n	800338a <HAL_SPI_Transmit+0x160>
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003388:	d102      	bne.n	8003390 <HAL_SPI_Transmit+0x166>
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d109      	bne.n	80033a4 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2200      	movs	r2, #0
 800339c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80033a0:	2303      	movs	r3, #3
 80033a2:	e082      	b.n	80034aa <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d1c7      	bne.n	800333e <HAL_SPI_Transmit+0x114>
 80033ae:	e053      	b.n	8003458 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d002      	beq.n	80033be <HAL_SPI_Transmit+0x194>
 80033b8:	8b7b      	ldrh	r3, [r7, #26]
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d147      	bne.n	800344e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	330c      	adds	r3, #12
 80033c8:	7812      	ldrb	r2, [r2, #0]
 80033ca:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033d0:	1c5a      	adds	r2, r3, #1
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80033da:	b29b      	uxth	r3, r3
 80033dc:	3b01      	subs	r3, #1
 80033de:	b29a      	uxth	r2, r3
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80033e4:	e033      	b.n	800344e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	f003 0302 	and.w	r3, r3, #2
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	d113      	bne.n	800341c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	330c      	adds	r3, #12
 80033fe:	7812      	ldrb	r2, [r2, #0]
 8003400:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003406:	1c5a      	adds	r2, r3, #1
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003410:	b29b      	uxth	r3, r3
 8003412:	3b01      	subs	r3, #1
 8003414:	b29a      	uxth	r2, r3
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	86da      	strh	r2, [r3, #54]	@ 0x36
 800341a:	e018      	b.n	800344e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800341c:	f7fe fa1c 	bl	8001858 <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	683a      	ldr	r2, [r7, #0]
 8003428:	429a      	cmp	r2, r3
 800342a:	d803      	bhi.n	8003434 <HAL_SPI_Transmit+0x20a>
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003432:	d102      	bne.n	800343a <HAL_SPI_Transmit+0x210>
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d109      	bne.n	800344e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2201      	movs	r2, #1
 800343e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2200      	movs	r2, #0
 8003446:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e02d      	b.n	80034aa <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003452:	b29b      	uxth	r3, r3
 8003454:	2b00      	cmp	r3, #0
 8003456:	d1c6      	bne.n	80033e6 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003458:	69fa      	ldr	r2, [r7, #28]
 800345a:	6839      	ldr	r1, [r7, #0]
 800345c:	68f8      	ldr	r0, [r7, #12]
 800345e:	f000 fa59 	bl	8003914 <SPI_EndRxTxTransaction>
 8003462:	4603      	mov	r3, r0
 8003464:	2b00      	cmp	r3, #0
 8003466:	d002      	beq.n	800346e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2220      	movs	r2, #32
 800346c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d10a      	bne.n	800348c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003476:	2300      	movs	r3, #0
 8003478:	617b      	str	r3, [r7, #20]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	617b      	str	r3, [r7, #20]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	617b      	str	r3, [r7, #20]
 800348a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2200      	movs	r2, #0
 8003498:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d001      	beq.n	80034a8 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e000      	b.n	80034aa <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80034a8:	2300      	movs	r3, #0
  }
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3720      	adds	r7, #32
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}

080034b2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80034b2:	b580      	push	{r7, lr}
 80034b4:	b08a      	sub	sp, #40	@ 0x28
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	60f8      	str	r0, [r7, #12]
 80034ba:	60b9      	str	r1, [r7, #8]
 80034bc:	607a      	str	r2, [r7, #4]
 80034be:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80034c0:	2301      	movs	r3, #1
 80034c2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80034c4:	f7fe f9c8 	bl	8001858 <HAL_GetTick>
 80034c8:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80034d0:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80034d8:	887b      	ldrh	r3, [r7, #2]
 80034da:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80034dc:	7ffb      	ldrb	r3, [r7, #31]
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d00c      	beq.n	80034fc <HAL_SPI_TransmitReceive+0x4a>
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80034e8:	d106      	bne.n	80034f8 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d102      	bne.n	80034f8 <HAL_SPI_TransmitReceive+0x46>
 80034f2:	7ffb      	ldrb	r3, [r7, #31]
 80034f4:	2b04      	cmp	r3, #4
 80034f6:	d001      	beq.n	80034fc <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80034f8:	2302      	movs	r3, #2
 80034fa:	e17f      	b.n	80037fc <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d005      	beq.n	800350e <HAL_SPI_TransmitReceive+0x5c>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d002      	beq.n	800350e <HAL_SPI_TransmitReceive+0x5c>
 8003508:	887b      	ldrh	r3, [r7, #2]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d101      	bne.n	8003512 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e174      	b.n	80037fc <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003518:	2b01      	cmp	r3, #1
 800351a:	d101      	bne.n	8003520 <HAL_SPI_TransmitReceive+0x6e>
 800351c:	2302      	movs	r3, #2
 800351e:	e16d      	b.n	80037fc <HAL_SPI_TransmitReceive+0x34a>
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800352e:	b2db      	uxtb	r3, r3
 8003530:	2b04      	cmp	r3, #4
 8003532:	d003      	beq.n	800353c <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2205      	movs	r2, #5
 8003538:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2200      	movs	r2, #0
 8003540:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	887a      	ldrh	r2, [r7, #2]
 800354c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	887a      	ldrh	r2, [r7, #2]
 8003552:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	68ba      	ldr	r2, [r7, #8]
 8003558:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	887a      	ldrh	r2, [r7, #2]
 800355e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	887a      	ldrh	r2, [r7, #2]
 8003564:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2200      	movs	r2, #0
 800356a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2200      	movs	r2, #0
 8003570:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800357c:	2b40      	cmp	r3, #64	@ 0x40
 800357e:	d007      	beq.n	8003590 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800358e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003598:	d17e      	bne.n	8003698 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d002      	beq.n	80035a8 <HAL_SPI_TransmitReceive+0xf6>
 80035a2:	8afb      	ldrh	r3, [r7, #22]
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d16c      	bne.n	8003682 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ac:	881a      	ldrh	r2, [r3, #0]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035b8:	1c9a      	adds	r2, r3, #2
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	3b01      	subs	r3, #1
 80035c6:	b29a      	uxth	r2, r3
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035cc:	e059      	b.n	8003682 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	f003 0302 	and.w	r3, r3, #2
 80035d8:	2b02      	cmp	r3, #2
 80035da:	d11b      	bne.n	8003614 <HAL_SPI_TransmitReceive+0x162>
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d016      	beq.n	8003614 <HAL_SPI_TransmitReceive+0x162>
 80035e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d113      	bne.n	8003614 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035f0:	881a      	ldrh	r2, [r3, #0]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035fc:	1c9a      	adds	r2, r3, #2
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003606:	b29b      	uxth	r3, r3
 8003608:	3b01      	subs	r3, #1
 800360a:	b29a      	uxth	r2, r3
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003610:	2300      	movs	r3, #0
 8003612:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	f003 0301 	and.w	r3, r3, #1
 800361e:	2b01      	cmp	r3, #1
 8003620:	d119      	bne.n	8003656 <HAL_SPI_TransmitReceive+0x1a4>
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003626:	b29b      	uxth	r3, r3
 8003628:	2b00      	cmp	r3, #0
 800362a:	d014      	beq.n	8003656 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	68da      	ldr	r2, [r3, #12]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003636:	b292      	uxth	r2, r2
 8003638:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800363e:	1c9a      	adds	r2, r3, #2
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003648:	b29b      	uxth	r3, r3
 800364a:	3b01      	subs	r3, #1
 800364c:	b29a      	uxth	r2, r3
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003652:	2301      	movs	r3, #1
 8003654:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003656:	f7fe f8ff 	bl	8001858 <HAL_GetTick>
 800365a:	4602      	mov	r2, r0
 800365c:	6a3b      	ldr	r3, [r7, #32]
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003662:	429a      	cmp	r2, r3
 8003664:	d80d      	bhi.n	8003682 <HAL_SPI_TransmitReceive+0x1d0>
 8003666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800366c:	d009      	beq.n	8003682 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2201      	movs	r2, #1
 8003672:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2200      	movs	r2, #0
 800367a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e0bc      	b.n	80037fc <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003686:	b29b      	uxth	r3, r3
 8003688:	2b00      	cmp	r3, #0
 800368a:	d1a0      	bne.n	80035ce <HAL_SPI_TransmitReceive+0x11c>
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003690:	b29b      	uxth	r3, r3
 8003692:	2b00      	cmp	r3, #0
 8003694:	d19b      	bne.n	80035ce <HAL_SPI_TransmitReceive+0x11c>
 8003696:	e082      	b.n	800379e <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d002      	beq.n	80036a6 <HAL_SPI_TransmitReceive+0x1f4>
 80036a0:	8afb      	ldrh	r3, [r7, #22]
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d171      	bne.n	800378a <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	330c      	adds	r3, #12
 80036b0:	7812      	ldrb	r2, [r2, #0]
 80036b2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036b8:	1c5a      	adds	r2, r3, #1
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	3b01      	subs	r3, #1
 80036c6:	b29a      	uxth	r2, r3
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036cc:	e05d      	b.n	800378a <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	f003 0302 	and.w	r3, r3, #2
 80036d8:	2b02      	cmp	r3, #2
 80036da:	d11c      	bne.n	8003716 <HAL_SPI_TransmitReceive+0x264>
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d017      	beq.n	8003716 <HAL_SPI_TransmitReceive+0x264>
 80036e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d114      	bne.n	8003716 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	330c      	adds	r3, #12
 80036f6:	7812      	ldrb	r2, [r2, #0]
 80036f8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036fe:	1c5a      	adds	r2, r3, #1
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003708:	b29b      	uxth	r3, r3
 800370a:	3b01      	subs	r3, #1
 800370c:	b29a      	uxth	r2, r3
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003712:	2300      	movs	r3, #0
 8003714:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	f003 0301 	and.w	r3, r3, #1
 8003720:	2b01      	cmp	r3, #1
 8003722:	d119      	bne.n	8003758 <HAL_SPI_TransmitReceive+0x2a6>
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003728:	b29b      	uxth	r3, r3
 800372a:	2b00      	cmp	r3, #0
 800372c:	d014      	beq.n	8003758 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	68da      	ldr	r2, [r3, #12]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003738:	b2d2      	uxtb	r2, r2
 800373a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003740:	1c5a      	adds	r2, r3, #1
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800374a:	b29b      	uxth	r3, r3
 800374c:	3b01      	subs	r3, #1
 800374e:	b29a      	uxth	r2, r3
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003754:	2301      	movs	r3, #1
 8003756:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003758:	f7fe f87e 	bl	8001858 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	6a3b      	ldr	r3, [r7, #32]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003764:	429a      	cmp	r2, r3
 8003766:	d803      	bhi.n	8003770 <HAL_SPI_TransmitReceive+0x2be>
 8003768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800376a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800376e:	d102      	bne.n	8003776 <HAL_SPI_TransmitReceive+0x2c4>
 8003770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003772:	2b00      	cmp	r3, #0
 8003774:	d109      	bne.n	800378a <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2201      	movs	r2, #1
 800377a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2200      	movs	r2, #0
 8003782:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e038      	b.n	80037fc <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800378e:	b29b      	uxth	r3, r3
 8003790:	2b00      	cmp	r3, #0
 8003792:	d19c      	bne.n	80036ce <HAL_SPI_TransmitReceive+0x21c>
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003798:	b29b      	uxth	r3, r3
 800379a:	2b00      	cmp	r3, #0
 800379c:	d197      	bne.n	80036ce <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800379e:	6a3a      	ldr	r2, [r7, #32]
 80037a0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80037a2:	68f8      	ldr	r0, [r7, #12]
 80037a4:	f000 f8b6 	bl	8003914 <SPI_EndRxTxTransaction>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d008      	beq.n	80037c0 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2220      	movs	r2, #32
 80037b2:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2200      	movs	r2, #0
 80037b8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e01d      	b.n	80037fc <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d10a      	bne.n	80037de <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80037c8:	2300      	movs	r3, #0
 80037ca:	613b      	str	r3, [r7, #16]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	613b      	str	r3, [r7, #16]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	613b      	str	r3, [r7, #16]
 80037dc:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2201      	movs	r2, #1
 80037e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2200      	movs	r2, #0
 80037ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d001      	beq.n	80037fa <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e000      	b.n	80037fc <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80037fa:	2300      	movs	r3, #0
  }
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3728      	adds	r7, #40	@ 0x28
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}

08003804 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b088      	sub	sp, #32
 8003808:	af00      	add	r7, sp, #0
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	60b9      	str	r1, [r7, #8]
 800380e:	603b      	str	r3, [r7, #0]
 8003810:	4613      	mov	r3, r2
 8003812:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003814:	f7fe f820 	bl	8001858 <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800381c:	1a9b      	subs	r3, r3, r2
 800381e:	683a      	ldr	r2, [r7, #0]
 8003820:	4413      	add	r3, r2
 8003822:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003824:	f7fe f818 	bl	8001858 <HAL_GetTick>
 8003828:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800382a:	4b39      	ldr	r3, [pc, #228]	@ (8003910 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	015b      	lsls	r3, r3, #5
 8003830:	0d1b      	lsrs	r3, r3, #20
 8003832:	69fa      	ldr	r2, [r7, #28]
 8003834:	fb02 f303 	mul.w	r3, r2, r3
 8003838:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800383a:	e054      	b.n	80038e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003842:	d050      	beq.n	80038e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003844:	f7fe f808 	bl	8001858 <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	69bb      	ldr	r3, [r7, #24]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	69fa      	ldr	r2, [r7, #28]
 8003850:	429a      	cmp	r2, r3
 8003852:	d902      	bls.n	800385a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d13d      	bne.n	80038d6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	685a      	ldr	r2, [r3, #4]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003868:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003872:	d111      	bne.n	8003898 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800387c:	d004      	beq.n	8003888 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003886:	d107      	bne.n	8003898 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003896:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800389c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038a0:	d10f      	bne.n	80038c2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80038b0:	601a      	str	r2, [r3, #0]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80038c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2201      	movs	r2, #1
 80038c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2200      	movs	r2, #0
 80038ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80038d2:	2303      	movs	r3, #3
 80038d4:	e017      	b.n	8003906 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d101      	bne.n	80038e0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80038dc:	2300      	movs	r3, #0
 80038de:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	3b01      	subs	r3, #1
 80038e4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	689a      	ldr	r2, [r3, #8]
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	4013      	ands	r3, r2
 80038f0:	68ba      	ldr	r2, [r7, #8]
 80038f2:	429a      	cmp	r2, r3
 80038f4:	bf0c      	ite	eq
 80038f6:	2301      	moveq	r3, #1
 80038f8:	2300      	movne	r3, #0
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	461a      	mov	r2, r3
 80038fe:	79fb      	ldrb	r3, [r7, #7]
 8003900:	429a      	cmp	r2, r3
 8003902:	d19b      	bne.n	800383c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003904:	2300      	movs	r3, #0
}
 8003906:	4618      	mov	r0, r3
 8003908:	3720      	adds	r7, #32
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	20000004 	.word	0x20000004

08003914 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b088      	sub	sp, #32
 8003918:	af02      	add	r7, sp, #8
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	60b9      	str	r1, [r7, #8]
 800391e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	9300      	str	r3, [sp, #0]
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	2201      	movs	r2, #1
 8003928:	2102      	movs	r1, #2
 800392a:	68f8      	ldr	r0, [r7, #12]
 800392c:	f7ff ff6a 	bl	8003804 <SPI_WaitFlagStateUntilTimeout>
 8003930:	4603      	mov	r3, r0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d007      	beq.n	8003946 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800393a:	f043 0220 	orr.w	r2, r3, #32
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e032      	b.n	80039ac <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003946:	4b1b      	ldr	r3, [pc, #108]	@ (80039b4 <SPI_EndRxTxTransaction+0xa0>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a1b      	ldr	r2, [pc, #108]	@ (80039b8 <SPI_EndRxTxTransaction+0xa4>)
 800394c:	fba2 2303 	umull	r2, r3, r2, r3
 8003950:	0d5b      	lsrs	r3, r3, #21
 8003952:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003956:	fb02 f303 	mul.w	r3, r2, r3
 800395a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003964:	d112      	bne.n	800398c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	9300      	str	r3, [sp, #0]
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	2200      	movs	r2, #0
 800396e:	2180      	movs	r1, #128	@ 0x80
 8003970:	68f8      	ldr	r0, [r7, #12]
 8003972:	f7ff ff47 	bl	8003804 <SPI_WaitFlagStateUntilTimeout>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d016      	beq.n	80039aa <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003980:	f043 0220 	orr.w	r2, r3, #32
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003988:	2303      	movs	r3, #3
 800398a:	e00f      	b.n	80039ac <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d00a      	beq.n	80039a8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	3b01      	subs	r3, #1
 8003996:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039a2:	2b80      	cmp	r3, #128	@ 0x80
 80039a4:	d0f2      	beq.n	800398c <SPI_EndRxTxTransaction+0x78>
 80039a6:	e000      	b.n	80039aa <SPI_EndRxTxTransaction+0x96>
        break;
 80039a8:	bf00      	nop
  }

  return HAL_OK;
 80039aa:	2300      	movs	r3, #0
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3718      	adds	r7, #24
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	20000004 	.word	0x20000004
 80039b8:	165e9f81 	.word	0x165e9f81

080039bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b082      	sub	sp, #8
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d101      	bne.n	80039ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e042      	b.n	8003a54 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d106      	bne.n	80039e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f7fd fd7a 	bl	80014dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2224      	movs	r2, #36	@ 0x24
 80039ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	68da      	ldr	r2, [r3, #12]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80039fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f000 fdbd 	bl	8004580 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	691a      	ldr	r2, [r3, #16]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003a14:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	695a      	ldr	r2, [r3, #20]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003a24:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	68da      	ldr	r2, [r3, #12]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003a34:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2220      	movs	r2, #32
 8003a40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2220      	movs	r2, #32
 8003a48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003a52:	2300      	movs	r3, #0
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3708      	adds	r7, #8
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b08a      	sub	sp, #40	@ 0x28
 8003a60:	af02      	add	r7, sp, #8
 8003a62:	60f8      	str	r0, [r7, #12]
 8003a64:	60b9      	str	r1, [r7, #8]
 8003a66:	603b      	str	r3, [r7, #0]
 8003a68:	4613      	mov	r3, r2
 8003a6a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	2b20      	cmp	r3, #32
 8003a7a:	d175      	bne.n	8003b68 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d002      	beq.n	8003a88 <HAL_UART_Transmit+0x2c>
 8003a82:	88fb      	ldrh	r3, [r7, #6]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d101      	bne.n	8003a8c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e06e      	b.n	8003b6a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2221      	movs	r2, #33	@ 0x21
 8003a96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a9a:	f7fd fedd 	bl	8001858 <HAL_GetTick>
 8003a9e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	88fa      	ldrh	r2, [r7, #6]
 8003aa4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	88fa      	ldrh	r2, [r7, #6]
 8003aaa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ab4:	d108      	bne.n	8003ac8 <HAL_UART_Transmit+0x6c>
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	691b      	ldr	r3, [r3, #16]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d104      	bne.n	8003ac8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	61bb      	str	r3, [r7, #24]
 8003ac6:	e003      	b.n	8003ad0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003acc:	2300      	movs	r3, #0
 8003ace:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003ad0:	e02e      	b.n	8003b30 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	9300      	str	r3, [sp, #0]
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	2180      	movs	r1, #128	@ 0x80
 8003adc:	68f8      	ldr	r0, [r7, #12]
 8003ade:	f000 fb1f 	bl	8004120 <UART_WaitOnFlagUntilTimeout>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d005      	beq.n	8003af4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2220      	movs	r2, #32
 8003aec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003af0:	2303      	movs	r3, #3
 8003af2:	e03a      	b.n	8003b6a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d10b      	bne.n	8003b12 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	881b      	ldrh	r3, [r3, #0]
 8003afe:	461a      	mov	r2, r3
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b08:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003b0a:	69bb      	ldr	r3, [r7, #24]
 8003b0c:	3302      	adds	r3, #2
 8003b0e:	61bb      	str	r3, [r7, #24]
 8003b10:	e007      	b.n	8003b22 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	781a      	ldrb	r2, [r3, #0]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003b1c:	69fb      	ldr	r3, [r7, #28]
 8003b1e:	3301      	adds	r3, #1
 8003b20:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	3b01      	subs	r3, #1
 8003b2a:	b29a      	uxth	r2, r3
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d1cb      	bne.n	8003ad2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	9300      	str	r3, [sp, #0]
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	2200      	movs	r2, #0
 8003b42:	2140      	movs	r1, #64	@ 0x40
 8003b44:	68f8      	ldr	r0, [r7, #12]
 8003b46:	f000 faeb 	bl	8004120 <UART_WaitOnFlagUntilTimeout>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d005      	beq.n	8003b5c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2220      	movs	r2, #32
 8003b54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	e006      	b.n	8003b6a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2220      	movs	r2, #32
 8003b60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003b64:	2300      	movs	r3, #0
 8003b66:	e000      	b.n	8003b6a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003b68:	2302      	movs	r3, #2
  }
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3720      	adds	r7, #32
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}

08003b72 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b72:	b580      	push	{r7, lr}
 8003b74:	b084      	sub	sp, #16
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	60f8      	str	r0, [r7, #12]
 8003b7a:	60b9      	str	r1, [r7, #8]
 8003b7c:	4613      	mov	r3, r2
 8003b7e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	2b20      	cmp	r3, #32
 8003b8a:	d112      	bne.n	8003bb2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d002      	beq.n	8003b98 <HAL_UART_Receive_IT+0x26>
 8003b92:	88fb      	ldrh	r3, [r7, #6]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d101      	bne.n	8003b9c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e00b      	b.n	8003bb4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003ba2:	88fb      	ldrh	r3, [r7, #6]
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	68b9      	ldr	r1, [r7, #8]
 8003ba8:	68f8      	ldr	r0, [r7, #12]
 8003baa:	f000 fb12 	bl	80041d2 <UART_Start_Receive_IT>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	e000      	b.n	8003bb4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003bb2:	2302      	movs	r3, #2
  }
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3710      	adds	r7, #16
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b0ba      	sub	sp, #232	@ 0xe8
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	695b      	ldr	r3, [r3, #20]
 8003bde:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003be2:	2300      	movs	r3, #0
 8003be4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003be8:	2300      	movs	r3, #0
 8003bea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003bee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bf2:	f003 030f 	and.w	r3, r3, #15
 8003bf6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003bfa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d10f      	bne.n	8003c22 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c06:	f003 0320 	and.w	r3, r3, #32
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d009      	beq.n	8003c22 <HAL_UART_IRQHandler+0x66>
 8003c0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c12:	f003 0320 	and.w	r3, r3, #32
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d003      	beq.n	8003c22 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 fbf2 	bl	8004404 <UART_Receive_IT>
      return;
 8003c20:	e25b      	b.n	80040da <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003c22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	f000 80de 	beq.w	8003de8 <HAL_UART_IRQHandler+0x22c>
 8003c2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c30:	f003 0301 	and.w	r3, r3, #1
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d106      	bne.n	8003c46 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003c38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c3c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	f000 80d1 	beq.w	8003de8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003c46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c4a:	f003 0301 	and.w	r3, r3, #1
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d00b      	beq.n	8003c6a <HAL_UART_IRQHandler+0xae>
 8003c52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d005      	beq.n	8003c6a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c62:	f043 0201 	orr.w	r2, r3, #1
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c6e:	f003 0304 	and.w	r3, r3, #4
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d00b      	beq.n	8003c8e <HAL_UART_IRQHandler+0xd2>
 8003c76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c7a:	f003 0301 	and.w	r3, r3, #1
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d005      	beq.n	8003c8e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c86:	f043 0202 	orr.w	r2, r3, #2
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c92:	f003 0302 	and.w	r3, r3, #2
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d00b      	beq.n	8003cb2 <HAL_UART_IRQHandler+0xf6>
 8003c9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c9e:	f003 0301 	and.w	r3, r3, #1
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d005      	beq.n	8003cb2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003caa:	f043 0204 	orr.w	r2, r3, #4
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003cb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cb6:	f003 0308 	and.w	r3, r3, #8
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d011      	beq.n	8003ce2 <HAL_UART_IRQHandler+0x126>
 8003cbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003cc2:	f003 0320 	and.w	r3, r3, #32
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d105      	bne.n	8003cd6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003cca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003cce:	f003 0301 	and.w	r3, r3, #1
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d005      	beq.n	8003ce2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cda:	f043 0208 	orr.w	r2, r3, #8
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	f000 81f2 	beq.w	80040d0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003cec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cf0:	f003 0320 	and.w	r3, r3, #32
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d008      	beq.n	8003d0a <HAL_UART_IRQHandler+0x14e>
 8003cf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003cfc:	f003 0320 	and.w	r3, r3, #32
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d002      	beq.n	8003d0a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f000 fb7d 	bl	8004404 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	695b      	ldr	r3, [r3, #20]
 8003d10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d14:	2b40      	cmp	r3, #64	@ 0x40
 8003d16:	bf0c      	ite	eq
 8003d18:	2301      	moveq	r3, #1
 8003d1a:	2300      	movne	r3, #0
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d26:	f003 0308 	and.w	r3, r3, #8
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d103      	bne.n	8003d36 <HAL_UART_IRQHandler+0x17a>
 8003d2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d04f      	beq.n	8003dd6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f000 fa85 	bl	8004246 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	695b      	ldr	r3, [r3, #20]
 8003d42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d46:	2b40      	cmp	r3, #64	@ 0x40
 8003d48:	d141      	bne.n	8003dce <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	3314      	adds	r3, #20
 8003d50:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d54:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003d58:	e853 3f00 	ldrex	r3, [r3]
 8003d5c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003d60:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003d64:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d68:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	3314      	adds	r3, #20
 8003d72:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003d76:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003d7a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d7e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003d82:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003d86:	e841 2300 	strex	r3, r2, [r1]
 8003d8a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003d8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d1d9      	bne.n	8003d4a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d013      	beq.n	8003dc6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003da2:	4a7e      	ldr	r2, [pc, #504]	@ (8003f9c <HAL_UART_IRQHandler+0x3e0>)
 8003da4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003daa:	4618      	mov	r0, r3
 8003dac:	f7fd ffc0 	bl	8001d30 <HAL_DMA_Abort_IT>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d016      	beq.n	8003de4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003dc0:	4610      	mov	r0, r2
 8003dc2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dc4:	e00e      	b.n	8003de4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f000 f994 	bl	80040f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dcc:	e00a      	b.n	8003de4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f000 f990 	bl	80040f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dd4:	e006      	b.n	8003de4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f000 f98c 	bl	80040f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003de2:	e175      	b.n	80040d0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003de4:	bf00      	nop
    return;
 8003de6:	e173      	b.n	80040d0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	f040 814f 	bne.w	8004090 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003df2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003df6:	f003 0310 	and.w	r3, r3, #16
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	f000 8148 	beq.w	8004090 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003e00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e04:	f003 0310 	and.w	r3, r3, #16
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	f000 8141 	beq.w	8004090 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e0e:	2300      	movs	r3, #0
 8003e10:	60bb      	str	r3, [r7, #8]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	60bb      	str	r3, [r7, #8]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	60bb      	str	r3, [r7, #8]
 8003e22:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	695b      	ldr	r3, [r3, #20]
 8003e2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e2e:	2b40      	cmp	r3, #64	@ 0x40
 8003e30:	f040 80b6 	bne.w	8003fa0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003e40:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	f000 8145 	beq.w	80040d4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003e4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003e52:	429a      	cmp	r2, r3
 8003e54:	f080 813e 	bcs.w	80040d4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003e5e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e64:	69db      	ldr	r3, [r3, #28]
 8003e66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e6a:	f000 8088 	beq.w	8003f7e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	330c      	adds	r3, #12
 8003e74:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e78:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003e7c:	e853 3f00 	ldrex	r3, [r3]
 8003e80:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003e84:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003e88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e8c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	330c      	adds	r3, #12
 8003e96:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003e9a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003e9e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ea2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003ea6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003eaa:	e841 2300 	strex	r3, r2, [r1]
 8003eae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003eb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d1d9      	bne.n	8003e6e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	3314      	adds	r3, #20
 8003ec0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ec2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003ec4:	e853 3f00 	ldrex	r3, [r3]
 8003ec8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003eca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003ecc:	f023 0301 	bic.w	r3, r3, #1
 8003ed0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	3314      	adds	r3, #20
 8003eda:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003ede:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003ee2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003ee6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003eea:	e841 2300 	strex	r3, r2, [r1]
 8003eee:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003ef0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d1e1      	bne.n	8003eba <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	3314      	adds	r3, #20
 8003efc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003efe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003f00:	e853 3f00 	ldrex	r3, [r3]
 8003f04:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003f06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003f08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f0c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	3314      	adds	r3, #20
 8003f16:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003f1a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003f1c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f1e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003f20:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003f22:	e841 2300 	strex	r3, r2, [r1]
 8003f26:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003f28:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d1e3      	bne.n	8003ef6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2220      	movs	r2, #32
 8003f32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	330c      	adds	r3, #12
 8003f42:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f46:	e853 3f00 	ldrex	r3, [r3]
 8003f4a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003f4c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f4e:	f023 0310 	bic.w	r3, r3, #16
 8003f52:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	330c      	adds	r3, #12
 8003f5c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003f60:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003f62:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f64:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003f66:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003f68:	e841 2300 	strex	r3, r2, [r1]
 8003f6c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003f6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d1e3      	bne.n	8003f3c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f7fd fe69 	bl	8001c50 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2202      	movs	r2, #2
 8003f82:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	b29b      	uxth	r3, r3
 8003f92:	4619      	mov	r1, r3
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f000 f8b7 	bl	8004108 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003f9a:	e09b      	b.n	80040d4 <HAL_UART_IRQHandler+0x518>
 8003f9c:	0800430d 	.word	0x0800430d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	1ad3      	subs	r3, r2, r3
 8003fac:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	f000 808e 	beq.w	80040d8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003fbc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	f000 8089 	beq.w	80040d8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	330c      	adds	r3, #12
 8003fcc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fd0:	e853 3f00 	ldrex	r3, [r3]
 8003fd4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003fd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fd8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003fdc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	330c      	adds	r3, #12
 8003fe6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003fea:	647a      	str	r2, [r7, #68]	@ 0x44
 8003fec:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fee:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003ff0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003ff2:	e841 2300 	strex	r3, r2, [r1]
 8003ff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003ff8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d1e3      	bne.n	8003fc6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	3314      	adds	r3, #20
 8004004:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004008:	e853 3f00 	ldrex	r3, [r3]
 800400c:	623b      	str	r3, [r7, #32]
   return(result);
 800400e:	6a3b      	ldr	r3, [r7, #32]
 8004010:	f023 0301 	bic.w	r3, r3, #1
 8004014:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	3314      	adds	r3, #20
 800401e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004022:	633a      	str	r2, [r7, #48]	@ 0x30
 8004024:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004026:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004028:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800402a:	e841 2300 	strex	r3, r2, [r1]
 800402e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004030:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004032:	2b00      	cmp	r3, #0
 8004034:	d1e3      	bne.n	8003ffe <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2220      	movs	r2, #32
 800403a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	330c      	adds	r3, #12
 800404a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	e853 3f00 	ldrex	r3, [r3]
 8004052:	60fb      	str	r3, [r7, #12]
   return(result);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f023 0310 	bic.w	r3, r3, #16
 800405a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	330c      	adds	r3, #12
 8004064:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004068:	61fa      	str	r2, [r7, #28]
 800406a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800406c:	69b9      	ldr	r1, [r7, #24]
 800406e:	69fa      	ldr	r2, [r7, #28]
 8004070:	e841 2300 	strex	r3, r2, [r1]
 8004074:	617b      	str	r3, [r7, #20]
   return(result);
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d1e3      	bne.n	8004044 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2202      	movs	r2, #2
 8004080:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004082:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004086:	4619      	mov	r1, r3
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f000 f83d 	bl	8004108 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800408e:	e023      	b.n	80040d8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004090:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004094:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004098:	2b00      	cmp	r3, #0
 800409a:	d009      	beq.n	80040b0 <HAL_UART_IRQHandler+0x4f4>
 800409c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d003      	beq.n	80040b0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f000 f943 	bl	8004334 <UART_Transmit_IT>
    return;
 80040ae:	e014      	b.n	80040da <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80040b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d00e      	beq.n	80040da <HAL_UART_IRQHandler+0x51e>
 80040bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d008      	beq.n	80040da <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f000 f983 	bl	80043d4 <UART_EndTransmit_IT>
    return;
 80040ce:	e004      	b.n	80040da <HAL_UART_IRQHandler+0x51e>
    return;
 80040d0:	bf00      	nop
 80040d2:	e002      	b.n	80040da <HAL_UART_IRQHandler+0x51e>
      return;
 80040d4:	bf00      	nop
 80040d6:	e000      	b.n	80040da <HAL_UART_IRQHandler+0x51e>
      return;
 80040d8:	bf00      	nop
  }
}
 80040da:	37e8      	adds	r7, #232	@ 0xe8
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}

080040e0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b083      	sub	sp, #12
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80040e8:	bf00      	nop
 80040ea:	370c      	adds	r7, #12
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr

080040f4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80040fc:	bf00      	nop
 80040fe:	370c      	adds	r7, #12
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr

08004108 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004108:	b480      	push	{r7}
 800410a:	b083      	sub	sp, #12
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	460b      	mov	r3, r1
 8004112:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004114:	bf00      	nop
 8004116:	370c      	adds	r7, #12
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b086      	sub	sp, #24
 8004124:	af00      	add	r7, sp, #0
 8004126:	60f8      	str	r0, [r7, #12]
 8004128:	60b9      	str	r1, [r7, #8]
 800412a:	603b      	str	r3, [r7, #0]
 800412c:	4613      	mov	r3, r2
 800412e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004130:	e03b      	b.n	80041aa <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004132:	6a3b      	ldr	r3, [r7, #32]
 8004134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004138:	d037      	beq.n	80041aa <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800413a:	f7fd fb8d 	bl	8001858 <HAL_GetTick>
 800413e:	4602      	mov	r2, r0
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	6a3a      	ldr	r2, [r7, #32]
 8004146:	429a      	cmp	r2, r3
 8004148:	d302      	bcc.n	8004150 <UART_WaitOnFlagUntilTimeout+0x30>
 800414a:	6a3b      	ldr	r3, [r7, #32]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d101      	bne.n	8004154 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004150:	2303      	movs	r3, #3
 8004152:	e03a      	b.n	80041ca <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	f003 0304 	and.w	r3, r3, #4
 800415e:	2b00      	cmp	r3, #0
 8004160:	d023      	beq.n	80041aa <UART_WaitOnFlagUntilTimeout+0x8a>
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	2b80      	cmp	r3, #128	@ 0x80
 8004166:	d020      	beq.n	80041aa <UART_WaitOnFlagUntilTimeout+0x8a>
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	2b40      	cmp	r3, #64	@ 0x40
 800416c:	d01d      	beq.n	80041aa <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0308 	and.w	r3, r3, #8
 8004178:	2b08      	cmp	r3, #8
 800417a:	d116      	bne.n	80041aa <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800417c:	2300      	movs	r3, #0
 800417e:	617b      	str	r3, [r7, #20]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	617b      	str	r3, [r7, #20]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	617b      	str	r3, [r7, #20]
 8004190:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004192:	68f8      	ldr	r0, [r7, #12]
 8004194:	f000 f857 	bl	8004246 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2208      	movs	r2, #8
 800419c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2200      	movs	r2, #0
 80041a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e00f      	b.n	80041ca <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	4013      	ands	r3, r2
 80041b4:	68ba      	ldr	r2, [r7, #8]
 80041b6:	429a      	cmp	r2, r3
 80041b8:	bf0c      	ite	eq
 80041ba:	2301      	moveq	r3, #1
 80041bc:	2300      	movne	r3, #0
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	461a      	mov	r2, r3
 80041c2:	79fb      	ldrb	r3, [r7, #7]
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d0b4      	beq.n	8004132 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041c8:	2300      	movs	r3, #0
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3718      	adds	r7, #24
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}

080041d2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80041d2:	b480      	push	{r7}
 80041d4:	b085      	sub	sp, #20
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	60f8      	str	r0, [r7, #12]
 80041da:	60b9      	str	r1, [r7, #8]
 80041dc:	4613      	mov	r3, r2
 80041de:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	68ba      	ldr	r2, [r7, #8]
 80041e4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	88fa      	ldrh	r2, [r7, #6]
 80041ea:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	88fa      	ldrh	r2, [r7, #6]
 80041f0:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2200      	movs	r2, #0
 80041f6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2222      	movs	r2, #34	@ 0x22
 80041fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	691b      	ldr	r3, [r3, #16]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d007      	beq.n	8004218 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	68da      	ldr	r2, [r3, #12]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004216:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	695a      	ldr	r2, [r3, #20]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f042 0201 	orr.w	r2, r2, #1
 8004226:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	68da      	ldr	r2, [r3, #12]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f042 0220 	orr.w	r2, r2, #32
 8004236:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004238:	2300      	movs	r3, #0
}
 800423a:	4618      	mov	r0, r3
 800423c:	3714      	adds	r7, #20
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr

08004246 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004246:	b480      	push	{r7}
 8004248:	b095      	sub	sp, #84	@ 0x54
 800424a:	af00      	add	r7, sp, #0
 800424c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	330c      	adds	r3, #12
 8004254:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004256:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004258:	e853 3f00 	ldrex	r3, [r3]
 800425c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800425e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004260:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004264:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	330c      	adds	r3, #12
 800426c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800426e:	643a      	str	r2, [r7, #64]	@ 0x40
 8004270:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004272:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004274:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004276:	e841 2300 	strex	r3, r2, [r1]
 800427a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800427c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800427e:	2b00      	cmp	r3, #0
 8004280:	d1e5      	bne.n	800424e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	3314      	adds	r3, #20
 8004288:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800428a:	6a3b      	ldr	r3, [r7, #32]
 800428c:	e853 3f00 	ldrex	r3, [r3]
 8004290:	61fb      	str	r3, [r7, #28]
   return(result);
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	f023 0301 	bic.w	r3, r3, #1
 8004298:	64bb      	str	r3, [r7, #72]	@ 0x48
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	3314      	adds	r3, #20
 80042a0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80042a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80042a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80042a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80042aa:	e841 2300 	strex	r3, r2, [r1]
 80042ae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80042b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d1e5      	bne.n	8004282 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d119      	bne.n	80042f2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	330c      	adds	r3, #12
 80042c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	e853 3f00 	ldrex	r3, [r3]
 80042cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	f023 0310 	bic.w	r3, r3, #16
 80042d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	330c      	adds	r3, #12
 80042dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80042de:	61ba      	str	r2, [r7, #24]
 80042e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e2:	6979      	ldr	r1, [r7, #20]
 80042e4:	69ba      	ldr	r2, [r7, #24]
 80042e6:	e841 2300 	strex	r3, r2, [r1]
 80042ea:	613b      	str	r3, [r7, #16]
   return(result);
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d1e5      	bne.n	80042be <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2220      	movs	r2, #32
 80042f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004300:	bf00      	nop
 8004302:	3754      	adds	r7, #84	@ 0x54
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr

0800430c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004318:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2200      	movs	r2, #0
 800431e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2200      	movs	r2, #0
 8004324:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004326:	68f8      	ldr	r0, [r7, #12]
 8004328:	f7ff fee4 	bl	80040f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800432c:	bf00      	nop
 800432e:	3710      	adds	r7, #16
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}

08004334 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004334:	b480      	push	{r7}
 8004336:	b085      	sub	sp, #20
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004342:	b2db      	uxtb	r3, r3
 8004344:	2b21      	cmp	r3, #33	@ 0x21
 8004346:	d13e      	bne.n	80043c6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004350:	d114      	bne.n	800437c <UART_Transmit_IT+0x48>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	691b      	ldr	r3, [r3, #16]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d110      	bne.n	800437c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6a1b      	ldr	r3, [r3, #32]
 800435e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	881b      	ldrh	r3, [r3, #0]
 8004364:	461a      	mov	r2, r3
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800436e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6a1b      	ldr	r3, [r3, #32]
 8004374:	1c9a      	adds	r2, r3, #2
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	621a      	str	r2, [r3, #32]
 800437a:	e008      	b.n	800438e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6a1b      	ldr	r3, [r3, #32]
 8004380:	1c59      	adds	r1, r3, #1
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	6211      	str	r1, [r2, #32]
 8004386:	781a      	ldrb	r2, [r3, #0]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004392:	b29b      	uxth	r3, r3
 8004394:	3b01      	subs	r3, #1
 8004396:	b29b      	uxth	r3, r3
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	4619      	mov	r1, r3
 800439c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d10f      	bne.n	80043c2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	68da      	ldr	r2, [r3, #12]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80043b0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	68da      	ldr	r2, [r3, #12]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80043c0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80043c2:	2300      	movs	r3, #0
 80043c4:	e000      	b.n	80043c8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80043c6:	2302      	movs	r3, #2
  }
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3714      	adds	r7, #20
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr

080043d4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b082      	sub	sp, #8
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	68da      	ldr	r2, [r3, #12]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80043ea:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2220      	movs	r2, #32
 80043f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f7ff fe73 	bl	80040e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80043fa:	2300      	movs	r3, #0
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3708      	adds	r7, #8
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}

08004404 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b08c      	sub	sp, #48	@ 0x30
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004412:	b2db      	uxtb	r3, r3
 8004414:	2b22      	cmp	r3, #34	@ 0x22
 8004416:	f040 80ae 	bne.w	8004576 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004422:	d117      	bne.n	8004454 <UART_Receive_IT+0x50>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	691b      	ldr	r3, [r3, #16]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d113      	bne.n	8004454 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800442c:	2300      	movs	r3, #0
 800442e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004434:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	b29b      	uxth	r3, r3
 800443e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004442:	b29a      	uxth	r2, r3
 8004444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004446:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800444c:	1c9a      	adds	r2, r3, #2
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	629a      	str	r2, [r3, #40]	@ 0x28
 8004452:	e026      	b.n	80044a2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004458:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800445a:	2300      	movs	r3, #0
 800445c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004466:	d007      	beq.n	8004478 <UART_Receive_IT+0x74>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d10a      	bne.n	8004486 <UART_Receive_IT+0x82>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	691b      	ldr	r3, [r3, #16]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d106      	bne.n	8004486 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	b2da      	uxtb	r2, r3
 8004480:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004482:	701a      	strb	r2, [r3, #0]
 8004484:	e008      	b.n	8004498 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	b2db      	uxtb	r3, r3
 800448e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004492:	b2da      	uxtb	r2, r3
 8004494:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004496:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800449c:	1c5a      	adds	r2, r3, #1
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	3b01      	subs	r3, #1
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	687a      	ldr	r2, [r7, #4]
 80044ae:	4619      	mov	r1, r3
 80044b0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d15d      	bne.n	8004572 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	68da      	ldr	r2, [r3, #12]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f022 0220 	bic.w	r2, r2, #32
 80044c4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	68da      	ldr	r2, [r3, #12]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80044d4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	695a      	ldr	r2, [r3, #20]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f022 0201 	bic.w	r2, r2, #1
 80044e4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2220      	movs	r2, #32
 80044ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d135      	bne.n	8004568 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2200      	movs	r2, #0
 8004500:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	330c      	adds	r3, #12
 8004508:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	e853 3f00 	ldrex	r3, [r3]
 8004510:	613b      	str	r3, [r7, #16]
   return(result);
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	f023 0310 	bic.w	r3, r3, #16
 8004518:	627b      	str	r3, [r7, #36]	@ 0x24
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	330c      	adds	r3, #12
 8004520:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004522:	623a      	str	r2, [r7, #32]
 8004524:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004526:	69f9      	ldr	r1, [r7, #28]
 8004528:	6a3a      	ldr	r2, [r7, #32]
 800452a:	e841 2300 	strex	r3, r2, [r1]
 800452e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004530:	69bb      	ldr	r3, [r7, #24]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d1e5      	bne.n	8004502 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0310 	and.w	r3, r3, #16
 8004540:	2b10      	cmp	r3, #16
 8004542:	d10a      	bne.n	800455a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004544:	2300      	movs	r3, #0
 8004546:	60fb      	str	r3, [r7, #12]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	60fb      	str	r3, [r7, #12]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	60fb      	str	r3, [r7, #12]
 8004558:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800455e:	4619      	mov	r1, r3
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f7ff fdd1 	bl	8004108 <HAL_UARTEx_RxEventCallback>
 8004566:	e002      	b.n	800456e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f7fc ff23 	bl	80013b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800456e:	2300      	movs	r3, #0
 8004570:	e002      	b.n	8004578 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004572:	2300      	movs	r3, #0
 8004574:	e000      	b.n	8004578 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004576:	2302      	movs	r3, #2
  }
}
 8004578:	4618      	mov	r0, r3
 800457a:	3730      	adds	r7, #48	@ 0x30
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}

08004580 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004580:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004584:	b0c0      	sub	sp, #256	@ 0x100
 8004586:	af00      	add	r7, sp, #0
 8004588:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800458c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	691b      	ldr	r3, [r3, #16]
 8004594:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800459c:	68d9      	ldr	r1, [r3, #12]
 800459e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	ea40 0301 	orr.w	r3, r0, r1
 80045a8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80045aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045ae:	689a      	ldr	r2, [r3, #8]
 80045b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045b4:	691b      	ldr	r3, [r3, #16]
 80045b6:	431a      	orrs	r2, r3
 80045b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045bc:	695b      	ldr	r3, [r3, #20]
 80045be:	431a      	orrs	r2, r3
 80045c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045c4:	69db      	ldr	r3, [r3, #28]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80045cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80045d8:	f021 010c 	bic.w	r1, r1, #12
 80045dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80045e6:	430b      	orrs	r3, r1
 80045e8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80045ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	695b      	ldr	r3, [r3, #20]
 80045f2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80045f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045fa:	6999      	ldr	r1, [r3, #24]
 80045fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	ea40 0301 	orr.w	r3, r0, r1
 8004606:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	4b8f      	ldr	r3, [pc, #572]	@ (800484c <UART_SetConfig+0x2cc>)
 8004610:	429a      	cmp	r2, r3
 8004612:	d005      	beq.n	8004620 <UART_SetConfig+0xa0>
 8004614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	4b8d      	ldr	r3, [pc, #564]	@ (8004850 <UART_SetConfig+0x2d0>)
 800461c:	429a      	cmp	r2, r3
 800461e:	d104      	bne.n	800462a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004620:	f7fe f898 	bl	8002754 <HAL_RCC_GetPCLK2Freq>
 8004624:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004628:	e003      	b.n	8004632 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800462a:	f7fe f87f 	bl	800272c <HAL_RCC_GetPCLK1Freq>
 800462e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004632:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004636:	69db      	ldr	r3, [r3, #28]
 8004638:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800463c:	f040 810c 	bne.w	8004858 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004640:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004644:	2200      	movs	r2, #0
 8004646:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800464a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800464e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004652:	4622      	mov	r2, r4
 8004654:	462b      	mov	r3, r5
 8004656:	1891      	adds	r1, r2, r2
 8004658:	65b9      	str	r1, [r7, #88]	@ 0x58
 800465a:	415b      	adcs	r3, r3
 800465c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800465e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004662:	4621      	mov	r1, r4
 8004664:	eb12 0801 	adds.w	r8, r2, r1
 8004668:	4629      	mov	r1, r5
 800466a:	eb43 0901 	adc.w	r9, r3, r1
 800466e:	f04f 0200 	mov.w	r2, #0
 8004672:	f04f 0300 	mov.w	r3, #0
 8004676:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800467a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800467e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004682:	4690      	mov	r8, r2
 8004684:	4699      	mov	r9, r3
 8004686:	4623      	mov	r3, r4
 8004688:	eb18 0303 	adds.w	r3, r8, r3
 800468c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004690:	462b      	mov	r3, r5
 8004692:	eb49 0303 	adc.w	r3, r9, r3
 8004696:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800469a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80046a6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80046aa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80046ae:	460b      	mov	r3, r1
 80046b0:	18db      	adds	r3, r3, r3
 80046b2:	653b      	str	r3, [r7, #80]	@ 0x50
 80046b4:	4613      	mov	r3, r2
 80046b6:	eb42 0303 	adc.w	r3, r2, r3
 80046ba:	657b      	str	r3, [r7, #84]	@ 0x54
 80046bc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80046c0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80046c4:	f7fb fda6 	bl	8000214 <__aeabi_uldivmod>
 80046c8:	4602      	mov	r2, r0
 80046ca:	460b      	mov	r3, r1
 80046cc:	4b61      	ldr	r3, [pc, #388]	@ (8004854 <UART_SetConfig+0x2d4>)
 80046ce:	fba3 2302 	umull	r2, r3, r3, r2
 80046d2:	095b      	lsrs	r3, r3, #5
 80046d4:	011c      	lsls	r4, r3, #4
 80046d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046da:	2200      	movs	r2, #0
 80046dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80046e0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80046e4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80046e8:	4642      	mov	r2, r8
 80046ea:	464b      	mov	r3, r9
 80046ec:	1891      	adds	r1, r2, r2
 80046ee:	64b9      	str	r1, [r7, #72]	@ 0x48
 80046f0:	415b      	adcs	r3, r3
 80046f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046f4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80046f8:	4641      	mov	r1, r8
 80046fa:	eb12 0a01 	adds.w	sl, r2, r1
 80046fe:	4649      	mov	r1, r9
 8004700:	eb43 0b01 	adc.w	fp, r3, r1
 8004704:	f04f 0200 	mov.w	r2, #0
 8004708:	f04f 0300 	mov.w	r3, #0
 800470c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004710:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004714:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004718:	4692      	mov	sl, r2
 800471a:	469b      	mov	fp, r3
 800471c:	4643      	mov	r3, r8
 800471e:	eb1a 0303 	adds.w	r3, sl, r3
 8004722:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004726:	464b      	mov	r3, r9
 8004728:	eb4b 0303 	adc.w	r3, fp, r3
 800472c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800473c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004740:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004744:	460b      	mov	r3, r1
 8004746:	18db      	adds	r3, r3, r3
 8004748:	643b      	str	r3, [r7, #64]	@ 0x40
 800474a:	4613      	mov	r3, r2
 800474c:	eb42 0303 	adc.w	r3, r2, r3
 8004750:	647b      	str	r3, [r7, #68]	@ 0x44
 8004752:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004756:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800475a:	f7fb fd5b 	bl	8000214 <__aeabi_uldivmod>
 800475e:	4602      	mov	r2, r0
 8004760:	460b      	mov	r3, r1
 8004762:	4611      	mov	r1, r2
 8004764:	4b3b      	ldr	r3, [pc, #236]	@ (8004854 <UART_SetConfig+0x2d4>)
 8004766:	fba3 2301 	umull	r2, r3, r3, r1
 800476a:	095b      	lsrs	r3, r3, #5
 800476c:	2264      	movs	r2, #100	@ 0x64
 800476e:	fb02 f303 	mul.w	r3, r2, r3
 8004772:	1acb      	subs	r3, r1, r3
 8004774:	00db      	lsls	r3, r3, #3
 8004776:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800477a:	4b36      	ldr	r3, [pc, #216]	@ (8004854 <UART_SetConfig+0x2d4>)
 800477c:	fba3 2302 	umull	r2, r3, r3, r2
 8004780:	095b      	lsrs	r3, r3, #5
 8004782:	005b      	lsls	r3, r3, #1
 8004784:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004788:	441c      	add	r4, r3
 800478a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800478e:	2200      	movs	r2, #0
 8004790:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004794:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004798:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800479c:	4642      	mov	r2, r8
 800479e:	464b      	mov	r3, r9
 80047a0:	1891      	adds	r1, r2, r2
 80047a2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80047a4:	415b      	adcs	r3, r3
 80047a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80047a8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80047ac:	4641      	mov	r1, r8
 80047ae:	1851      	adds	r1, r2, r1
 80047b0:	6339      	str	r1, [r7, #48]	@ 0x30
 80047b2:	4649      	mov	r1, r9
 80047b4:	414b      	adcs	r3, r1
 80047b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80047b8:	f04f 0200 	mov.w	r2, #0
 80047bc:	f04f 0300 	mov.w	r3, #0
 80047c0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80047c4:	4659      	mov	r1, fp
 80047c6:	00cb      	lsls	r3, r1, #3
 80047c8:	4651      	mov	r1, sl
 80047ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047ce:	4651      	mov	r1, sl
 80047d0:	00ca      	lsls	r2, r1, #3
 80047d2:	4610      	mov	r0, r2
 80047d4:	4619      	mov	r1, r3
 80047d6:	4603      	mov	r3, r0
 80047d8:	4642      	mov	r2, r8
 80047da:	189b      	adds	r3, r3, r2
 80047dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80047e0:	464b      	mov	r3, r9
 80047e2:	460a      	mov	r2, r1
 80047e4:	eb42 0303 	adc.w	r3, r2, r3
 80047e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80047ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80047f8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80047fc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004800:	460b      	mov	r3, r1
 8004802:	18db      	adds	r3, r3, r3
 8004804:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004806:	4613      	mov	r3, r2
 8004808:	eb42 0303 	adc.w	r3, r2, r3
 800480c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800480e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004812:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004816:	f7fb fcfd 	bl	8000214 <__aeabi_uldivmod>
 800481a:	4602      	mov	r2, r0
 800481c:	460b      	mov	r3, r1
 800481e:	4b0d      	ldr	r3, [pc, #52]	@ (8004854 <UART_SetConfig+0x2d4>)
 8004820:	fba3 1302 	umull	r1, r3, r3, r2
 8004824:	095b      	lsrs	r3, r3, #5
 8004826:	2164      	movs	r1, #100	@ 0x64
 8004828:	fb01 f303 	mul.w	r3, r1, r3
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	00db      	lsls	r3, r3, #3
 8004830:	3332      	adds	r3, #50	@ 0x32
 8004832:	4a08      	ldr	r2, [pc, #32]	@ (8004854 <UART_SetConfig+0x2d4>)
 8004834:	fba2 2303 	umull	r2, r3, r2, r3
 8004838:	095b      	lsrs	r3, r3, #5
 800483a:	f003 0207 	and.w	r2, r3, #7
 800483e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4422      	add	r2, r4
 8004846:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004848:	e106      	b.n	8004a58 <UART_SetConfig+0x4d8>
 800484a:	bf00      	nop
 800484c:	40011000 	.word	0x40011000
 8004850:	40011400 	.word	0x40011400
 8004854:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004858:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800485c:	2200      	movs	r2, #0
 800485e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004862:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004866:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800486a:	4642      	mov	r2, r8
 800486c:	464b      	mov	r3, r9
 800486e:	1891      	adds	r1, r2, r2
 8004870:	6239      	str	r1, [r7, #32]
 8004872:	415b      	adcs	r3, r3
 8004874:	627b      	str	r3, [r7, #36]	@ 0x24
 8004876:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800487a:	4641      	mov	r1, r8
 800487c:	1854      	adds	r4, r2, r1
 800487e:	4649      	mov	r1, r9
 8004880:	eb43 0501 	adc.w	r5, r3, r1
 8004884:	f04f 0200 	mov.w	r2, #0
 8004888:	f04f 0300 	mov.w	r3, #0
 800488c:	00eb      	lsls	r3, r5, #3
 800488e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004892:	00e2      	lsls	r2, r4, #3
 8004894:	4614      	mov	r4, r2
 8004896:	461d      	mov	r5, r3
 8004898:	4643      	mov	r3, r8
 800489a:	18e3      	adds	r3, r4, r3
 800489c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80048a0:	464b      	mov	r3, r9
 80048a2:	eb45 0303 	adc.w	r3, r5, r3
 80048a6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80048aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80048b6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80048ba:	f04f 0200 	mov.w	r2, #0
 80048be:	f04f 0300 	mov.w	r3, #0
 80048c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80048c6:	4629      	mov	r1, r5
 80048c8:	008b      	lsls	r3, r1, #2
 80048ca:	4621      	mov	r1, r4
 80048cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048d0:	4621      	mov	r1, r4
 80048d2:	008a      	lsls	r2, r1, #2
 80048d4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80048d8:	f7fb fc9c 	bl	8000214 <__aeabi_uldivmod>
 80048dc:	4602      	mov	r2, r0
 80048de:	460b      	mov	r3, r1
 80048e0:	4b60      	ldr	r3, [pc, #384]	@ (8004a64 <UART_SetConfig+0x4e4>)
 80048e2:	fba3 2302 	umull	r2, r3, r3, r2
 80048e6:	095b      	lsrs	r3, r3, #5
 80048e8:	011c      	lsls	r4, r3, #4
 80048ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80048ee:	2200      	movs	r2, #0
 80048f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80048f4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80048f8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80048fc:	4642      	mov	r2, r8
 80048fe:	464b      	mov	r3, r9
 8004900:	1891      	adds	r1, r2, r2
 8004902:	61b9      	str	r1, [r7, #24]
 8004904:	415b      	adcs	r3, r3
 8004906:	61fb      	str	r3, [r7, #28]
 8004908:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800490c:	4641      	mov	r1, r8
 800490e:	1851      	adds	r1, r2, r1
 8004910:	6139      	str	r1, [r7, #16]
 8004912:	4649      	mov	r1, r9
 8004914:	414b      	adcs	r3, r1
 8004916:	617b      	str	r3, [r7, #20]
 8004918:	f04f 0200 	mov.w	r2, #0
 800491c:	f04f 0300 	mov.w	r3, #0
 8004920:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004924:	4659      	mov	r1, fp
 8004926:	00cb      	lsls	r3, r1, #3
 8004928:	4651      	mov	r1, sl
 800492a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800492e:	4651      	mov	r1, sl
 8004930:	00ca      	lsls	r2, r1, #3
 8004932:	4610      	mov	r0, r2
 8004934:	4619      	mov	r1, r3
 8004936:	4603      	mov	r3, r0
 8004938:	4642      	mov	r2, r8
 800493a:	189b      	adds	r3, r3, r2
 800493c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004940:	464b      	mov	r3, r9
 8004942:	460a      	mov	r2, r1
 8004944:	eb42 0303 	adc.w	r3, r2, r3
 8004948:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800494c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	2200      	movs	r2, #0
 8004954:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004956:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004958:	f04f 0200 	mov.w	r2, #0
 800495c:	f04f 0300 	mov.w	r3, #0
 8004960:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004964:	4649      	mov	r1, r9
 8004966:	008b      	lsls	r3, r1, #2
 8004968:	4641      	mov	r1, r8
 800496a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800496e:	4641      	mov	r1, r8
 8004970:	008a      	lsls	r2, r1, #2
 8004972:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004976:	f7fb fc4d 	bl	8000214 <__aeabi_uldivmod>
 800497a:	4602      	mov	r2, r0
 800497c:	460b      	mov	r3, r1
 800497e:	4611      	mov	r1, r2
 8004980:	4b38      	ldr	r3, [pc, #224]	@ (8004a64 <UART_SetConfig+0x4e4>)
 8004982:	fba3 2301 	umull	r2, r3, r3, r1
 8004986:	095b      	lsrs	r3, r3, #5
 8004988:	2264      	movs	r2, #100	@ 0x64
 800498a:	fb02 f303 	mul.w	r3, r2, r3
 800498e:	1acb      	subs	r3, r1, r3
 8004990:	011b      	lsls	r3, r3, #4
 8004992:	3332      	adds	r3, #50	@ 0x32
 8004994:	4a33      	ldr	r2, [pc, #204]	@ (8004a64 <UART_SetConfig+0x4e4>)
 8004996:	fba2 2303 	umull	r2, r3, r2, r3
 800499a:	095b      	lsrs	r3, r3, #5
 800499c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80049a0:	441c      	add	r4, r3
 80049a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80049a6:	2200      	movs	r2, #0
 80049a8:	673b      	str	r3, [r7, #112]	@ 0x70
 80049aa:	677a      	str	r2, [r7, #116]	@ 0x74
 80049ac:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80049b0:	4642      	mov	r2, r8
 80049b2:	464b      	mov	r3, r9
 80049b4:	1891      	adds	r1, r2, r2
 80049b6:	60b9      	str	r1, [r7, #8]
 80049b8:	415b      	adcs	r3, r3
 80049ba:	60fb      	str	r3, [r7, #12]
 80049bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80049c0:	4641      	mov	r1, r8
 80049c2:	1851      	adds	r1, r2, r1
 80049c4:	6039      	str	r1, [r7, #0]
 80049c6:	4649      	mov	r1, r9
 80049c8:	414b      	adcs	r3, r1
 80049ca:	607b      	str	r3, [r7, #4]
 80049cc:	f04f 0200 	mov.w	r2, #0
 80049d0:	f04f 0300 	mov.w	r3, #0
 80049d4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80049d8:	4659      	mov	r1, fp
 80049da:	00cb      	lsls	r3, r1, #3
 80049dc:	4651      	mov	r1, sl
 80049de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049e2:	4651      	mov	r1, sl
 80049e4:	00ca      	lsls	r2, r1, #3
 80049e6:	4610      	mov	r0, r2
 80049e8:	4619      	mov	r1, r3
 80049ea:	4603      	mov	r3, r0
 80049ec:	4642      	mov	r2, r8
 80049ee:	189b      	adds	r3, r3, r2
 80049f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80049f2:	464b      	mov	r3, r9
 80049f4:	460a      	mov	r2, r1
 80049f6:	eb42 0303 	adc.w	r3, r2, r3
 80049fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80049fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	2200      	movs	r2, #0
 8004a04:	663b      	str	r3, [r7, #96]	@ 0x60
 8004a06:	667a      	str	r2, [r7, #100]	@ 0x64
 8004a08:	f04f 0200 	mov.w	r2, #0
 8004a0c:	f04f 0300 	mov.w	r3, #0
 8004a10:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004a14:	4649      	mov	r1, r9
 8004a16:	008b      	lsls	r3, r1, #2
 8004a18:	4641      	mov	r1, r8
 8004a1a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a1e:	4641      	mov	r1, r8
 8004a20:	008a      	lsls	r2, r1, #2
 8004a22:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004a26:	f7fb fbf5 	bl	8000214 <__aeabi_uldivmod>
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	460b      	mov	r3, r1
 8004a2e:	4b0d      	ldr	r3, [pc, #52]	@ (8004a64 <UART_SetConfig+0x4e4>)
 8004a30:	fba3 1302 	umull	r1, r3, r3, r2
 8004a34:	095b      	lsrs	r3, r3, #5
 8004a36:	2164      	movs	r1, #100	@ 0x64
 8004a38:	fb01 f303 	mul.w	r3, r1, r3
 8004a3c:	1ad3      	subs	r3, r2, r3
 8004a3e:	011b      	lsls	r3, r3, #4
 8004a40:	3332      	adds	r3, #50	@ 0x32
 8004a42:	4a08      	ldr	r2, [pc, #32]	@ (8004a64 <UART_SetConfig+0x4e4>)
 8004a44:	fba2 2303 	umull	r2, r3, r2, r3
 8004a48:	095b      	lsrs	r3, r3, #5
 8004a4a:	f003 020f 	and.w	r2, r3, #15
 8004a4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4422      	add	r2, r4
 8004a56:	609a      	str	r2, [r3, #8]
}
 8004a58:	bf00      	nop
 8004a5a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a64:	51eb851f 	.word	0x51eb851f

08004a68 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004a6c:	4904      	ldr	r1, [pc, #16]	@ (8004a80 <MX_FATFS_Init+0x18>)
 8004a6e:	4805      	ldr	r0, [pc, #20]	@ (8004a84 <MX_FATFS_Init+0x1c>)
 8004a70:	f002 fee4 	bl	800783c <FATFS_LinkDriver>
 8004a74:	4603      	mov	r3, r0
 8004a76:	461a      	mov	r2, r3
 8004a78:	4b03      	ldr	r3, [pc, #12]	@ (8004a88 <MX_FATFS_Init+0x20>)
 8004a7a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004a7c:	bf00      	nop
 8004a7e:	bd80      	pop	{r7, pc}
 8004a80:	20002288 	.word	0x20002288
 8004a84:	20000010 	.word	0x20000010
 8004a88:	20002284 	.word	0x20002284

08004a8c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004a90:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr

08004a9c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b082      	sub	sp, #8
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	SD_disk_initialize (pdrv);
 8004aa6:	79fb      	ldrb	r3, [r7, #7]
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f7fb fefd 	bl	80008a8 <SD_disk_initialize>
  /* USER CODE END INIT */
}
 8004aae:	bf00      	nop
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3708      	adds	r7, #8
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}

08004ab8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b082      	sub	sp, #8
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	4603      	mov	r3, r0
 8004ac0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	SD_disk_status (pdrv);
 8004ac2:	79fb      	ldrb	r3, [r7, #7]
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f7fb ffd5 	bl	8000a74 <SD_disk_status>
  /* USER CODE END STATUS */
}
 8004aca:	bf00      	nop
 8004acc:	4618      	mov	r0, r3
 8004ace:	3708      	adds	r7, #8
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}

08004ad4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b084      	sub	sp, #16
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	60b9      	str	r1, [r7, #8]
 8004adc:	607a      	str	r2, [r7, #4]
 8004ade:	603b      	str	r3, [r7, #0]
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	SD_disk_read (pdrv, buff, sector, count);
 8004ae4:	7bf8      	ldrb	r0, [r7, #15]
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	68b9      	ldr	r1, [r7, #8]
 8004aec:	f7fb ffd8 	bl	8000aa0 <SD_disk_read>
  /* USER CODE END READ */
}
 8004af0:	bf00      	nop
 8004af2:	4618      	mov	r0, r3
 8004af4:	3710      	adds	r7, #16
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}

08004afa <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8004afa:	b580      	push	{r7, lr}
 8004afc:	b084      	sub	sp, #16
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	60b9      	str	r1, [r7, #8]
 8004b02:	607a      	str	r2, [r7, #4]
 8004b04:	603b      	str	r3, [r7, #0]
 8004b06:	4603      	mov	r3, r0
 8004b08:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	SD_disk_write (pdrv, buff, sector, count);
 8004b0a:	7bf8      	ldrb	r0, [r7, #15]
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	68b9      	ldr	r1, [r7, #8]
 8004b12:	f7fc f82f 	bl	8000b74 <SD_disk_write>
  /* USER CODE END WRITE */
}
 8004b16:	bf00      	nop
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3710      	adds	r7, #16
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}

08004b20 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b082      	sub	sp, #8
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	4603      	mov	r3, r0
 8004b28:	603a      	str	r2, [r7, #0]
 8004b2a:	71fb      	strb	r3, [r7, #7]
 8004b2c:	460b      	mov	r3, r1
 8004b2e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	SD_disk_ioctl (pdrv, cmd, buff);
 8004b30:	79fb      	ldrb	r3, [r7, #7]
 8004b32:	79b9      	ldrb	r1, [r7, #6]
 8004b34:	683a      	ldr	r2, [r7, #0]
 8004b36:	4618      	mov	r0, r3
 8004b38:	f7fc f8a0 	bl	8000c7c <SD_disk_ioctl>
  /* USER CODE END IOCTL */
}
 8004b3c:	bf00      	nop
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3708      	adds	r7, #8
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
	...

08004b48 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b084      	sub	sp, #16
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	4603      	mov	r3, r0
 8004b50:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8004b52:	79fb      	ldrb	r3, [r7, #7]
 8004b54:	4a08      	ldr	r2, [pc, #32]	@ (8004b78 <disk_status+0x30>)
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	4413      	add	r3, r2
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	79fa      	ldrb	r2, [r7, #7]
 8004b60:	4905      	ldr	r1, [pc, #20]	@ (8004b78 <disk_status+0x30>)
 8004b62:	440a      	add	r2, r1
 8004b64:	7a12      	ldrb	r2, [r2, #8]
 8004b66:	4610      	mov	r0, r2
 8004b68:	4798      	blx	r3
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	73fb      	strb	r3, [r7, #15]
  return stat;
 8004b6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3710      	adds	r7, #16
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}
 8004b78:	200024b4 	.word	0x200024b4

08004b7c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b084      	sub	sp, #16
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	4603      	mov	r3, r0
 8004b84:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8004b86:	2300      	movs	r3, #0
 8004b88:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8004b8a:	79fb      	ldrb	r3, [r7, #7]
 8004b8c:	4a0e      	ldr	r2, [pc, #56]	@ (8004bc8 <disk_initialize+0x4c>)
 8004b8e:	5cd3      	ldrb	r3, [r2, r3]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d114      	bne.n	8004bbe <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004b94:	79fb      	ldrb	r3, [r7, #7]
 8004b96:	4a0c      	ldr	r2, [pc, #48]	@ (8004bc8 <disk_initialize+0x4c>)
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	4413      	add	r3, r2
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	79fa      	ldrb	r2, [r7, #7]
 8004ba2:	4909      	ldr	r1, [pc, #36]	@ (8004bc8 <disk_initialize+0x4c>)
 8004ba4:	440a      	add	r2, r1
 8004ba6:	7a12      	ldrb	r2, [r2, #8]
 8004ba8:	4610      	mov	r0, r2
 8004baa:	4798      	blx	r3
 8004bac:	4603      	mov	r3, r0
 8004bae:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8004bb0:	7bfb      	ldrb	r3, [r7, #15]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d103      	bne.n	8004bbe <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8004bb6:	79fb      	ldrb	r3, [r7, #7]
 8004bb8:	4a03      	ldr	r2, [pc, #12]	@ (8004bc8 <disk_initialize+0x4c>)
 8004bba:	2101      	movs	r1, #1
 8004bbc:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8004bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3710      	adds	r7, #16
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}
 8004bc8:	200024b4 	.word	0x200024b4

08004bcc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004bcc:	b590      	push	{r4, r7, lr}
 8004bce:	b087      	sub	sp, #28
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	60b9      	str	r1, [r7, #8]
 8004bd4:	607a      	str	r2, [r7, #4]
 8004bd6:	603b      	str	r3, [r7, #0]
 8004bd8:	4603      	mov	r3, r0
 8004bda:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004bdc:	7bfb      	ldrb	r3, [r7, #15]
 8004bde:	4a0a      	ldr	r2, [pc, #40]	@ (8004c08 <disk_read+0x3c>)
 8004be0:	009b      	lsls	r3, r3, #2
 8004be2:	4413      	add	r3, r2
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	689c      	ldr	r4, [r3, #8]
 8004be8:	7bfb      	ldrb	r3, [r7, #15]
 8004bea:	4a07      	ldr	r2, [pc, #28]	@ (8004c08 <disk_read+0x3c>)
 8004bec:	4413      	add	r3, r2
 8004bee:	7a18      	ldrb	r0, [r3, #8]
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	68b9      	ldr	r1, [r7, #8]
 8004bf6:	47a0      	blx	r4
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	75fb      	strb	r3, [r7, #23]
  return res;
 8004bfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	371c      	adds	r7, #28
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd90      	pop	{r4, r7, pc}
 8004c06:	bf00      	nop
 8004c08:	200024b4 	.word	0x200024b4

08004c0c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004c0c:	b590      	push	{r4, r7, lr}
 8004c0e:	b087      	sub	sp, #28
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	60b9      	str	r1, [r7, #8]
 8004c14:	607a      	str	r2, [r7, #4]
 8004c16:	603b      	str	r3, [r7, #0]
 8004c18:	4603      	mov	r3, r0
 8004c1a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004c1c:	7bfb      	ldrb	r3, [r7, #15]
 8004c1e:	4a0a      	ldr	r2, [pc, #40]	@ (8004c48 <disk_write+0x3c>)
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	4413      	add	r3, r2
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	68dc      	ldr	r4, [r3, #12]
 8004c28:	7bfb      	ldrb	r3, [r7, #15]
 8004c2a:	4a07      	ldr	r2, [pc, #28]	@ (8004c48 <disk_write+0x3c>)
 8004c2c:	4413      	add	r3, r2
 8004c2e:	7a18      	ldrb	r0, [r3, #8]
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	68b9      	ldr	r1, [r7, #8]
 8004c36:	47a0      	blx	r4
 8004c38:	4603      	mov	r3, r0
 8004c3a:	75fb      	strb	r3, [r7, #23]
  return res;
 8004c3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	371c      	adds	r7, #28
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd90      	pop	{r4, r7, pc}
 8004c46:	bf00      	nop
 8004c48:	200024b4 	.word	0x200024b4

08004c4c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b084      	sub	sp, #16
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	4603      	mov	r3, r0
 8004c54:	603a      	str	r2, [r7, #0]
 8004c56:	71fb      	strb	r3, [r7, #7]
 8004c58:	460b      	mov	r3, r1
 8004c5a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004c5c:	79fb      	ldrb	r3, [r7, #7]
 8004c5e:	4a09      	ldr	r2, [pc, #36]	@ (8004c84 <disk_ioctl+0x38>)
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	4413      	add	r3, r2
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	691b      	ldr	r3, [r3, #16]
 8004c68:	79fa      	ldrb	r2, [r7, #7]
 8004c6a:	4906      	ldr	r1, [pc, #24]	@ (8004c84 <disk_ioctl+0x38>)
 8004c6c:	440a      	add	r2, r1
 8004c6e:	7a10      	ldrb	r0, [r2, #8]
 8004c70:	79b9      	ldrb	r1, [r7, #6]
 8004c72:	683a      	ldr	r2, [r7, #0]
 8004c74:	4798      	blx	r3
 8004c76:	4603      	mov	r3, r0
 8004c78:	73fb      	strb	r3, [r7, #15]
  return res;
 8004c7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3710      	adds	r7, #16
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}
 8004c84:	200024b4 	.word	0x200024b4

08004c88 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b085      	sub	sp, #20
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	3301      	adds	r3, #1
 8004c94:	781b      	ldrb	r3, [r3, #0]
 8004c96:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8004c98:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004c9c:	021b      	lsls	r3, r3, #8
 8004c9e:	b21a      	sxth	r2, r3
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	781b      	ldrb	r3, [r3, #0]
 8004ca4:	b21b      	sxth	r3, r3
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	b21b      	sxth	r3, r3
 8004caa:	81fb      	strh	r3, [r7, #14]
	return rv;
 8004cac:	89fb      	ldrh	r3, [r7, #14]
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3714      	adds	r7, #20
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr

08004cba <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8004cba:	b480      	push	{r7}
 8004cbc:	b085      	sub	sp, #20
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	3303      	adds	r3, #3
 8004cc6:	781b      	ldrb	r3, [r3, #0]
 8004cc8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	021b      	lsls	r3, r3, #8
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	3202      	adds	r2, #2
 8004cd2:	7812      	ldrb	r2, [r2, #0]
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	021b      	lsls	r3, r3, #8
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	3201      	adds	r2, #1
 8004ce0:	7812      	ldrb	r2, [r2, #0]
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	021b      	lsls	r3, r3, #8
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	7812      	ldrb	r2, [r2, #0]
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	60fb      	str	r3, [r7, #12]
	return rv;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3714      	adds	r7, #20
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr

08004d00 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8004d00:	b480      	push	{r7}
 8004d02:	b083      	sub	sp, #12
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	460b      	mov	r3, r1
 8004d0a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	1c5a      	adds	r2, r3, #1
 8004d10:	607a      	str	r2, [r7, #4]
 8004d12:	887a      	ldrh	r2, [r7, #2]
 8004d14:	b2d2      	uxtb	r2, r2
 8004d16:	701a      	strb	r2, [r3, #0]
 8004d18:	887b      	ldrh	r3, [r7, #2]
 8004d1a:	0a1b      	lsrs	r3, r3, #8
 8004d1c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	1c5a      	adds	r2, r3, #1
 8004d22:	607a      	str	r2, [r7, #4]
 8004d24:	887a      	ldrh	r2, [r7, #2]
 8004d26:	b2d2      	uxtb	r2, r2
 8004d28:	701a      	strb	r2, [r3, #0]
}
 8004d2a:	bf00      	nop
 8004d2c:	370c      	adds	r7, #12
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d34:	4770      	bx	lr

08004d36 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8004d36:	b480      	push	{r7}
 8004d38:	b083      	sub	sp, #12
 8004d3a:	af00      	add	r7, sp, #0
 8004d3c:	6078      	str	r0, [r7, #4]
 8004d3e:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	1c5a      	adds	r2, r3, #1
 8004d44:	607a      	str	r2, [r7, #4]
 8004d46:	683a      	ldr	r2, [r7, #0]
 8004d48:	b2d2      	uxtb	r2, r2
 8004d4a:	701a      	strb	r2, [r3, #0]
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	0a1b      	lsrs	r3, r3, #8
 8004d50:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	1c5a      	adds	r2, r3, #1
 8004d56:	607a      	str	r2, [r7, #4]
 8004d58:	683a      	ldr	r2, [r7, #0]
 8004d5a:	b2d2      	uxtb	r2, r2
 8004d5c:	701a      	strb	r2, [r3, #0]
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	0a1b      	lsrs	r3, r3, #8
 8004d62:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	1c5a      	adds	r2, r3, #1
 8004d68:	607a      	str	r2, [r7, #4]
 8004d6a:	683a      	ldr	r2, [r7, #0]
 8004d6c:	b2d2      	uxtb	r2, r2
 8004d6e:	701a      	strb	r2, [r3, #0]
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	0a1b      	lsrs	r3, r3, #8
 8004d74:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	1c5a      	adds	r2, r3, #1
 8004d7a:	607a      	str	r2, [r7, #4]
 8004d7c:	683a      	ldr	r2, [r7, #0]
 8004d7e:	b2d2      	uxtb	r2, r2
 8004d80:	701a      	strb	r2, [r3, #0]
}
 8004d82:	bf00      	nop
 8004d84:	370c      	adds	r7, #12
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr

08004d8e <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004d8e:	b480      	push	{r7}
 8004d90:	b087      	sub	sp, #28
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	60f8      	str	r0, [r7, #12]
 8004d96:	60b9      	str	r1, [r7, #8]
 8004d98:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d00d      	beq.n	8004dc4 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8004da8:	693a      	ldr	r2, [r7, #16]
 8004daa:	1c53      	adds	r3, r2, #1
 8004dac:	613b      	str	r3, [r7, #16]
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	1c59      	adds	r1, r3, #1
 8004db2:	6179      	str	r1, [r7, #20]
 8004db4:	7812      	ldrb	r2, [r2, #0]
 8004db6:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	3b01      	subs	r3, #1
 8004dbc:	607b      	str	r3, [r7, #4]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d1f1      	bne.n	8004da8 <mem_cpy+0x1a>
	}
}
 8004dc4:	bf00      	nop
 8004dc6:	371c      	adds	r7, #28
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr

08004dd0 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004dd0:	b480      	push	{r7}
 8004dd2:	b087      	sub	sp, #28
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	60f8      	str	r0, [r7, #12]
 8004dd8:	60b9      	str	r1, [r7, #8]
 8004dda:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	1c5a      	adds	r2, r3, #1
 8004de4:	617a      	str	r2, [r7, #20]
 8004de6:	68ba      	ldr	r2, [r7, #8]
 8004de8:	b2d2      	uxtb	r2, r2
 8004dea:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	3b01      	subs	r3, #1
 8004df0:	607b      	str	r3, [r7, #4]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d1f3      	bne.n	8004de0 <mem_set+0x10>
}
 8004df8:	bf00      	nop
 8004dfa:	bf00      	nop
 8004dfc:	371c      	adds	r7, #28
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr

08004e06 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8004e06:	b480      	push	{r7}
 8004e08:	b089      	sub	sp, #36	@ 0x24
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	60f8      	str	r0, [r7, #12]
 8004e0e:	60b9      	str	r1, [r7, #8]
 8004e10:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	61fb      	str	r3, [r7, #28]
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8004e1e:	69fb      	ldr	r3, [r7, #28]
 8004e20:	1c5a      	adds	r2, r3, #1
 8004e22:	61fa      	str	r2, [r7, #28]
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	4619      	mov	r1, r3
 8004e28:	69bb      	ldr	r3, [r7, #24]
 8004e2a:	1c5a      	adds	r2, r3, #1
 8004e2c:	61ba      	str	r2, [r7, #24]
 8004e2e:	781b      	ldrb	r3, [r3, #0]
 8004e30:	1acb      	subs	r3, r1, r3
 8004e32:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	3b01      	subs	r3, #1
 8004e38:	607b      	str	r3, [r7, #4]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d002      	beq.n	8004e46 <mem_cmp+0x40>
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d0eb      	beq.n	8004e1e <mem_cmp+0x18>

	return r;
 8004e46:	697b      	ldr	r3, [r7, #20]
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3724      	adds	r7, #36	@ 0x24
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e52:	4770      	bx	lr

08004e54 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8004e54:	b480      	push	{r7}
 8004e56:	b083      	sub	sp, #12
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004e5e:	e002      	b.n	8004e66 <chk_chr+0x12>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	3301      	adds	r3, #1
 8004e64:	607b      	str	r3, [r7, #4]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	781b      	ldrb	r3, [r3, #0]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d005      	beq.n	8004e7a <chk_chr+0x26>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	781b      	ldrb	r3, [r3, #0]
 8004e72:	461a      	mov	r2, r3
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d1f2      	bne.n	8004e60 <chk_chr+0xc>
	return *str;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	781b      	ldrb	r3, [r3, #0]
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	370c      	adds	r7, #12
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr
	...

08004e8c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b085      	sub	sp, #20
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004e96:	2300      	movs	r3, #0
 8004e98:	60bb      	str	r3, [r7, #8]
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	60fb      	str	r3, [r7, #12]
 8004e9e:	e029      	b.n	8004ef4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8004ea0:	4a27      	ldr	r2, [pc, #156]	@ (8004f40 <chk_lock+0xb4>)
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	011b      	lsls	r3, r3, #4
 8004ea6:	4413      	add	r3, r2
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d01d      	beq.n	8004eea <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004eae:	4a24      	ldr	r2, [pc, #144]	@ (8004f40 <chk_lock+0xb4>)
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	011b      	lsls	r3, r3, #4
 8004eb4:	4413      	add	r3, r2
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d116      	bne.n	8004eee <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8004ec0:	4a1f      	ldr	r2, [pc, #124]	@ (8004f40 <chk_lock+0xb4>)
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	011b      	lsls	r3, r3, #4
 8004ec6:	4413      	add	r3, r2
 8004ec8:	3304      	adds	r3, #4
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d10c      	bne.n	8004eee <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004ed4:	4a1a      	ldr	r2, [pc, #104]	@ (8004f40 <chk_lock+0xb4>)
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	011b      	lsls	r3, r3, #4
 8004eda:	4413      	add	r3, r2
 8004edc:	3308      	adds	r3, #8
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d102      	bne.n	8004eee <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004ee8:	e007      	b.n	8004efa <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8004eea:	2301      	movs	r3, #1
 8004eec:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	3301      	adds	r3, #1
 8004ef2:	60fb      	str	r3, [r7, #12]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d9d2      	bls.n	8004ea0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2b02      	cmp	r3, #2
 8004efe:	d109      	bne.n	8004f14 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d102      	bne.n	8004f0c <chk_lock+0x80>
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	2b02      	cmp	r3, #2
 8004f0a:	d101      	bne.n	8004f10 <chk_lock+0x84>
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	e010      	b.n	8004f32 <chk_lock+0xa6>
 8004f10:	2312      	movs	r3, #18
 8004f12:	e00e      	b.n	8004f32 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d108      	bne.n	8004f2c <chk_lock+0xa0>
 8004f1a:	4a09      	ldr	r2, [pc, #36]	@ (8004f40 <chk_lock+0xb4>)
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	011b      	lsls	r3, r3, #4
 8004f20:	4413      	add	r3, r2
 8004f22:	330c      	adds	r3, #12
 8004f24:	881b      	ldrh	r3, [r3, #0]
 8004f26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f2a:	d101      	bne.n	8004f30 <chk_lock+0xa4>
 8004f2c:	2310      	movs	r3, #16
 8004f2e:	e000      	b.n	8004f32 <chk_lock+0xa6>
 8004f30:	2300      	movs	r3, #0
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3714      	adds	r7, #20
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr
 8004f3e:	bf00      	nop
 8004f40:	20002294 	.word	0x20002294

08004f44 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004f44:	b480      	push	{r7}
 8004f46:	b083      	sub	sp, #12
 8004f48:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	607b      	str	r3, [r7, #4]
 8004f4e:	e002      	b.n	8004f56 <enq_lock+0x12>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	3301      	adds	r3, #1
 8004f54:	607b      	str	r3, [r7, #4]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d806      	bhi.n	8004f6a <enq_lock+0x26>
 8004f5c:	4a09      	ldr	r2, [pc, #36]	@ (8004f84 <enq_lock+0x40>)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	011b      	lsls	r3, r3, #4
 8004f62:	4413      	add	r3, r2
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d1f2      	bne.n	8004f50 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2b02      	cmp	r3, #2
 8004f6e:	bf14      	ite	ne
 8004f70:	2301      	movne	r3, #1
 8004f72:	2300      	moveq	r3, #0
 8004f74:	b2db      	uxtb	r3, r3
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	370c      	adds	r7, #12
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr
 8004f82:	bf00      	nop
 8004f84:	20002294 	.word	0x20002294

08004f88 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b085      	sub	sp, #20
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004f92:	2300      	movs	r3, #0
 8004f94:	60fb      	str	r3, [r7, #12]
 8004f96:	e01f      	b.n	8004fd8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8004f98:	4a41      	ldr	r2, [pc, #260]	@ (80050a0 <inc_lock+0x118>)
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	011b      	lsls	r3, r3, #4
 8004f9e:	4413      	add	r3, r2
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d113      	bne.n	8004fd2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8004faa:	4a3d      	ldr	r2, [pc, #244]	@ (80050a0 <inc_lock+0x118>)
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	011b      	lsls	r3, r3, #4
 8004fb0:	4413      	add	r3, r2
 8004fb2:	3304      	adds	r3, #4
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d109      	bne.n	8004fd2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8004fbe:	4a38      	ldr	r2, [pc, #224]	@ (80050a0 <inc_lock+0x118>)
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	011b      	lsls	r3, r3, #4
 8004fc4:	4413      	add	r3, r2
 8004fc6:	3308      	adds	r3, #8
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d006      	beq.n	8004fe0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	3301      	adds	r3, #1
 8004fd6:	60fb      	str	r3, [r7, #12]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d9dc      	bls.n	8004f98 <inc_lock+0x10>
 8004fde:	e000      	b.n	8004fe2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8004fe0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2b02      	cmp	r3, #2
 8004fe6:	d132      	bne.n	800504e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	60fb      	str	r3, [r7, #12]
 8004fec:	e002      	b.n	8004ff4 <inc_lock+0x6c>
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	3301      	adds	r3, #1
 8004ff2:	60fb      	str	r3, [r7, #12]
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d806      	bhi.n	8005008 <inc_lock+0x80>
 8004ffa:	4a29      	ldr	r2, [pc, #164]	@ (80050a0 <inc_lock+0x118>)
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	011b      	lsls	r3, r3, #4
 8005000:	4413      	add	r3, r2
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d1f2      	bne.n	8004fee <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2b02      	cmp	r3, #2
 800500c:	d101      	bne.n	8005012 <inc_lock+0x8a>
 800500e:	2300      	movs	r3, #0
 8005010:	e040      	b.n	8005094 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	4922      	ldr	r1, [pc, #136]	@ (80050a0 <inc_lock+0x118>)
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	011b      	lsls	r3, r3, #4
 800501c:	440b      	add	r3, r1
 800501e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	689a      	ldr	r2, [r3, #8]
 8005024:	491e      	ldr	r1, [pc, #120]	@ (80050a0 <inc_lock+0x118>)
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	011b      	lsls	r3, r3, #4
 800502a:	440b      	add	r3, r1
 800502c:	3304      	adds	r3, #4
 800502e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	695a      	ldr	r2, [r3, #20]
 8005034:	491a      	ldr	r1, [pc, #104]	@ (80050a0 <inc_lock+0x118>)
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	011b      	lsls	r3, r3, #4
 800503a:	440b      	add	r3, r1
 800503c:	3308      	adds	r3, #8
 800503e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8005040:	4a17      	ldr	r2, [pc, #92]	@ (80050a0 <inc_lock+0x118>)
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	011b      	lsls	r3, r3, #4
 8005046:	4413      	add	r3, r2
 8005048:	330c      	adds	r3, #12
 800504a:	2200      	movs	r2, #0
 800504c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d009      	beq.n	8005068 <inc_lock+0xe0>
 8005054:	4a12      	ldr	r2, [pc, #72]	@ (80050a0 <inc_lock+0x118>)
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	011b      	lsls	r3, r3, #4
 800505a:	4413      	add	r3, r2
 800505c:	330c      	adds	r3, #12
 800505e:	881b      	ldrh	r3, [r3, #0]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d001      	beq.n	8005068 <inc_lock+0xe0>
 8005064:	2300      	movs	r3, #0
 8005066:	e015      	b.n	8005094 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d108      	bne.n	8005080 <inc_lock+0xf8>
 800506e:	4a0c      	ldr	r2, [pc, #48]	@ (80050a0 <inc_lock+0x118>)
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	011b      	lsls	r3, r3, #4
 8005074:	4413      	add	r3, r2
 8005076:	330c      	adds	r3, #12
 8005078:	881b      	ldrh	r3, [r3, #0]
 800507a:	3301      	adds	r3, #1
 800507c:	b29a      	uxth	r2, r3
 800507e:	e001      	b.n	8005084 <inc_lock+0xfc>
 8005080:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005084:	4906      	ldr	r1, [pc, #24]	@ (80050a0 <inc_lock+0x118>)
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	011b      	lsls	r3, r3, #4
 800508a:	440b      	add	r3, r1
 800508c:	330c      	adds	r3, #12
 800508e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	3301      	adds	r3, #1
}
 8005094:	4618      	mov	r0, r3
 8005096:	3714      	adds	r7, #20
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr
 80050a0:	20002294 	.word	0x20002294

080050a4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b085      	sub	sp, #20
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	3b01      	subs	r3, #1
 80050b0:	607b      	str	r3, [r7, #4]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d825      	bhi.n	8005104 <dec_lock+0x60>
		n = Files[i].ctr;
 80050b8:	4a17      	ldr	r2, [pc, #92]	@ (8005118 <dec_lock+0x74>)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	011b      	lsls	r3, r3, #4
 80050be:	4413      	add	r3, r2
 80050c0:	330c      	adds	r3, #12
 80050c2:	881b      	ldrh	r3, [r3, #0]
 80050c4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80050c6:	89fb      	ldrh	r3, [r7, #14]
 80050c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80050cc:	d101      	bne.n	80050d2 <dec_lock+0x2e>
 80050ce:	2300      	movs	r3, #0
 80050d0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80050d2:	89fb      	ldrh	r3, [r7, #14]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d002      	beq.n	80050de <dec_lock+0x3a>
 80050d8:	89fb      	ldrh	r3, [r7, #14]
 80050da:	3b01      	subs	r3, #1
 80050dc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80050de:	4a0e      	ldr	r2, [pc, #56]	@ (8005118 <dec_lock+0x74>)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	011b      	lsls	r3, r3, #4
 80050e4:	4413      	add	r3, r2
 80050e6:	330c      	adds	r3, #12
 80050e8:	89fa      	ldrh	r2, [r7, #14]
 80050ea:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80050ec:	89fb      	ldrh	r3, [r7, #14]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d105      	bne.n	80050fe <dec_lock+0x5a>
 80050f2:	4a09      	ldr	r2, [pc, #36]	@ (8005118 <dec_lock+0x74>)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	011b      	lsls	r3, r3, #4
 80050f8:	4413      	add	r3, r2
 80050fa:	2200      	movs	r2, #0
 80050fc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80050fe:	2300      	movs	r3, #0
 8005100:	737b      	strb	r3, [r7, #13]
 8005102:	e001      	b.n	8005108 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005104:	2302      	movs	r3, #2
 8005106:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005108:	7b7b      	ldrb	r3, [r7, #13]
}
 800510a:	4618      	mov	r0, r3
 800510c:	3714      	adds	r7, #20
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr
 8005116:	bf00      	nop
 8005118:	20002294 	.word	0x20002294

0800511c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800511c:	b480      	push	{r7}
 800511e:	b085      	sub	sp, #20
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005124:	2300      	movs	r3, #0
 8005126:	60fb      	str	r3, [r7, #12]
 8005128:	e010      	b.n	800514c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800512a:	4a0d      	ldr	r2, [pc, #52]	@ (8005160 <clear_lock+0x44>)
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	011b      	lsls	r3, r3, #4
 8005130:	4413      	add	r3, r2
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	687a      	ldr	r2, [r7, #4]
 8005136:	429a      	cmp	r2, r3
 8005138:	d105      	bne.n	8005146 <clear_lock+0x2a>
 800513a:	4a09      	ldr	r2, [pc, #36]	@ (8005160 <clear_lock+0x44>)
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	011b      	lsls	r3, r3, #4
 8005140:	4413      	add	r3, r2
 8005142:	2200      	movs	r2, #0
 8005144:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	3301      	adds	r3, #1
 800514a:	60fb      	str	r3, [r7, #12]
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2b01      	cmp	r3, #1
 8005150:	d9eb      	bls.n	800512a <clear_lock+0xe>
	}
}
 8005152:	bf00      	nop
 8005154:	bf00      	nop
 8005156:	3714      	adds	r7, #20
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr
 8005160:	20002294 	.word	0x20002294

08005164 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b086      	sub	sp, #24
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800516c:	2300      	movs	r3, #0
 800516e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	78db      	ldrb	r3, [r3, #3]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d034      	beq.n	80051e2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800517c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	7858      	ldrb	r0, [r3, #1]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005188:	2301      	movs	r3, #1
 800518a:	697a      	ldr	r2, [r7, #20]
 800518c:	f7ff fd3e 	bl	8004c0c <disk_write>
 8005190:	4603      	mov	r3, r0
 8005192:	2b00      	cmp	r3, #0
 8005194:	d002      	beq.n	800519c <sync_window+0x38>
			res = FR_DISK_ERR;
 8005196:	2301      	movs	r3, #1
 8005198:	73fb      	strb	r3, [r7, #15]
 800519a:	e022      	b.n	80051e2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2200      	movs	r2, #0
 80051a0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051a6:	697a      	ldr	r2, [r7, #20]
 80051a8:	1ad2      	subs	r2, r2, r3
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6a1b      	ldr	r3, [r3, #32]
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d217      	bcs.n	80051e2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	789b      	ldrb	r3, [r3, #2]
 80051b6:	613b      	str	r3, [r7, #16]
 80051b8:	e010      	b.n	80051dc <sync_window+0x78>
					wsect += fs->fsize;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6a1b      	ldr	r3, [r3, #32]
 80051be:	697a      	ldr	r2, [r7, #20]
 80051c0:	4413      	add	r3, r2
 80051c2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	7858      	ldrb	r0, [r3, #1]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80051ce:	2301      	movs	r3, #1
 80051d0:	697a      	ldr	r2, [r7, #20]
 80051d2:	f7ff fd1b 	bl	8004c0c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	3b01      	subs	r3, #1
 80051da:	613b      	str	r3, [r7, #16]
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	2b01      	cmp	r3, #1
 80051e0:	d8eb      	bhi.n	80051ba <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80051e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3718      	adds	r7, #24
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}

080051ec <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b084      	sub	sp, #16
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80051f6:	2300      	movs	r3, #0
 80051f8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051fe:	683a      	ldr	r2, [r7, #0]
 8005200:	429a      	cmp	r2, r3
 8005202:	d01b      	beq.n	800523c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f7ff ffad 	bl	8005164 <sync_window>
 800520a:	4603      	mov	r3, r0
 800520c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800520e:	7bfb      	ldrb	r3, [r7, #15]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d113      	bne.n	800523c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	7858      	ldrb	r0, [r3, #1]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800521e:	2301      	movs	r3, #1
 8005220:	683a      	ldr	r2, [r7, #0]
 8005222:	f7ff fcd3 	bl	8004bcc <disk_read>
 8005226:	4603      	mov	r3, r0
 8005228:	2b00      	cmp	r3, #0
 800522a:	d004      	beq.n	8005236 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800522c:	f04f 33ff 	mov.w	r3, #4294967295
 8005230:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005232:	2301      	movs	r3, #1
 8005234:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	683a      	ldr	r2, [r7, #0]
 800523a:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 800523c:	7bfb      	ldrb	r3, [r7, #15]
}
 800523e:	4618      	mov	r0, r3
 8005240:	3710      	adds	r7, #16
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
	...

08005248 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b084      	sub	sp, #16
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f7ff ff87 	bl	8005164 <sync_window>
 8005256:	4603      	mov	r3, r0
 8005258:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800525a:	7bfb      	ldrb	r3, [r7, #15]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d159      	bne.n	8005314 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	781b      	ldrb	r3, [r3, #0]
 8005264:	2b03      	cmp	r3, #3
 8005266:	d149      	bne.n	80052fc <sync_fs+0xb4>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	791b      	ldrb	r3, [r3, #4]
 800526c:	2b01      	cmp	r3, #1
 800526e:	d145      	bne.n	80052fc <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	899b      	ldrh	r3, [r3, #12]
 800527a:	461a      	mov	r2, r3
 800527c:	2100      	movs	r1, #0
 800527e:	f7ff fda7 	bl	8004dd0 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	3338      	adds	r3, #56	@ 0x38
 8005286:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800528a:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800528e:	4618      	mov	r0, r3
 8005290:	f7ff fd36 	bl	8004d00 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	3338      	adds	r3, #56	@ 0x38
 8005298:	4921      	ldr	r1, [pc, #132]	@ (8005320 <sync_fs+0xd8>)
 800529a:	4618      	mov	r0, r3
 800529c:	f7ff fd4b 	bl	8004d36 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	3338      	adds	r3, #56	@ 0x38
 80052a4:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80052a8:	491e      	ldr	r1, [pc, #120]	@ (8005324 <sync_fs+0xdc>)
 80052aa:	4618      	mov	r0, r3
 80052ac:	f7ff fd43 	bl	8004d36 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	3338      	adds	r3, #56	@ 0x38
 80052b4:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	699b      	ldr	r3, [r3, #24]
 80052bc:	4619      	mov	r1, r3
 80052be:	4610      	mov	r0, r2
 80052c0:	f7ff fd39 	bl	8004d36 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	3338      	adds	r3, #56	@ 0x38
 80052c8:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	695b      	ldr	r3, [r3, #20]
 80052d0:	4619      	mov	r1, r3
 80052d2:	4610      	mov	r0, r2
 80052d4:	f7ff fd2f 	bl	8004d36 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052dc:	1c5a      	adds	r2, r3, #1
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	7858      	ldrb	r0, [r3, #1]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80052f0:	2301      	movs	r3, #1
 80052f2:	f7ff fc8b 	bl	8004c0c <disk_write>
			fs->fsi_flag = 0;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2200      	movs	r2, #0
 80052fa:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	785b      	ldrb	r3, [r3, #1]
 8005300:	2200      	movs	r2, #0
 8005302:	2100      	movs	r1, #0
 8005304:	4618      	mov	r0, r3
 8005306:	f7ff fca1 	bl	8004c4c <disk_ioctl>
 800530a:	4603      	mov	r3, r0
 800530c:	2b00      	cmp	r3, #0
 800530e:	d001      	beq.n	8005314 <sync_fs+0xcc>
 8005310:	2301      	movs	r3, #1
 8005312:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005314:	7bfb      	ldrb	r3, [r7, #15]
}
 8005316:	4618      	mov	r0, r3
 8005318:	3710      	adds	r7, #16
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}
 800531e:	bf00      	nop
 8005320:	41615252 	.word	0x41615252
 8005324:	61417272 	.word	0x61417272

08005328 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005328:	b480      	push	{r7}
 800532a:	b083      	sub	sp, #12
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	3b02      	subs	r3, #2
 8005336:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	69db      	ldr	r3, [r3, #28]
 800533c:	3b02      	subs	r3, #2
 800533e:	683a      	ldr	r2, [r7, #0]
 8005340:	429a      	cmp	r2, r3
 8005342:	d301      	bcc.n	8005348 <clust2sect+0x20>
 8005344:	2300      	movs	r3, #0
 8005346:	e008      	b.n	800535a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	895b      	ldrh	r3, [r3, #10]
 800534c:	461a      	mov	r2, r3
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	fb03 f202 	mul.w	r2, r3, r2
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005358:	4413      	add	r3, r2
}
 800535a:	4618      	mov	r0, r3
 800535c:	370c      	adds	r7, #12
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr

08005366 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8005366:	b580      	push	{r7, lr}
 8005368:	b086      	sub	sp, #24
 800536a:	af00      	add	r7, sp, #0
 800536c:	6078      	str	r0, [r7, #4]
 800536e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	2b01      	cmp	r3, #1
 800537a:	d904      	bls.n	8005386 <get_fat+0x20>
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	69db      	ldr	r3, [r3, #28]
 8005380:	683a      	ldr	r2, [r7, #0]
 8005382:	429a      	cmp	r2, r3
 8005384:	d302      	bcc.n	800538c <get_fat+0x26>
		val = 1;	/* Internal error */
 8005386:	2301      	movs	r3, #1
 8005388:	617b      	str	r3, [r7, #20]
 800538a:	e0ba      	b.n	8005502 <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800538c:	f04f 33ff 	mov.w	r3, #4294967295
 8005390:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	781b      	ldrb	r3, [r3, #0]
 8005396:	2b03      	cmp	r3, #3
 8005398:	f000 8082 	beq.w	80054a0 <get_fat+0x13a>
 800539c:	2b03      	cmp	r3, #3
 800539e:	f300 80a6 	bgt.w	80054ee <get_fat+0x188>
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	d002      	beq.n	80053ac <get_fat+0x46>
 80053a6:	2b02      	cmp	r3, #2
 80053a8:	d055      	beq.n	8005456 <get_fat+0xf0>
 80053aa:	e0a0      	b.n	80054ee <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	60fb      	str	r3, [r7, #12]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	085b      	lsrs	r3, r3, #1
 80053b4:	68fa      	ldr	r2, [r7, #12]
 80053b6:	4413      	add	r3, r2
 80053b8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	899b      	ldrh	r3, [r3, #12]
 80053c2:	4619      	mov	r1, r3
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80053ca:	4413      	add	r3, r2
 80053cc:	4619      	mov	r1, r3
 80053ce:	6938      	ldr	r0, [r7, #16]
 80053d0:	f7ff ff0c 	bl	80051ec <move_window>
 80053d4:	4603      	mov	r3, r0
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	f040 808c 	bne.w	80054f4 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	1c5a      	adds	r2, r3, #1
 80053e0:	60fa      	str	r2, [r7, #12]
 80053e2:	693a      	ldr	r2, [r7, #16]
 80053e4:	8992      	ldrh	r2, [r2, #12]
 80053e6:	fbb3 f1f2 	udiv	r1, r3, r2
 80053ea:	fb01 f202 	mul.w	r2, r1, r2
 80053ee:	1a9b      	subs	r3, r3, r2
 80053f0:	693a      	ldr	r2, [r7, #16]
 80053f2:	4413      	add	r3, r2
 80053f4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80053f8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	899b      	ldrh	r3, [r3, #12]
 8005402:	4619      	mov	r1, r3
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	fbb3 f3f1 	udiv	r3, r3, r1
 800540a:	4413      	add	r3, r2
 800540c:	4619      	mov	r1, r3
 800540e:	6938      	ldr	r0, [r7, #16]
 8005410:	f7ff feec 	bl	80051ec <move_window>
 8005414:	4603      	mov	r3, r0
 8005416:	2b00      	cmp	r3, #0
 8005418:	d16e      	bne.n	80054f8 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	899b      	ldrh	r3, [r3, #12]
 800541e:	461a      	mov	r2, r3
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	fbb3 f1f2 	udiv	r1, r3, r2
 8005426:	fb01 f202 	mul.w	r2, r1, r2
 800542a:	1a9b      	subs	r3, r3, r2
 800542c:	693a      	ldr	r2, [r7, #16]
 800542e:	4413      	add	r3, r2
 8005430:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005434:	021b      	lsls	r3, r3, #8
 8005436:	68ba      	ldr	r2, [r7, #8]
 8005438:	4313      	orrs	r3, r2
 800543a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	f003 0301 	and.w	r3, r3, #1
 8005442:	2b00      	cmp	r3, #0
 8005444:	d002      	beq.n	800544c <get_fat+0xe6>
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	091b      	lsrs	r3, r3, #4
 800544a:	e002      	b.n	8005452 <get_fat+0xec>
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005452:	617b      	str	r3, [r7, #20]
			break;
 8005454:	e055      	b.n	8005502 <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	899b      	ldrh	r3, [r3, #12]
 800545e:	085b      	lsrs	r3, r3, #1
 8005460:	b29b      	uxth	r3, r3
 8005462:	4619      	mov	r1, r3
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	fbb3 f3f1 	udiv	r3, r3, r1
 800546a:	4413      	add	r3, r2
 800546c:	4619      	mov	r1, r3
 800546e:	6938      	ldr	r0, [r7, #16]
 8005470:	f7ff febc 	bl	80051ec <move_window>
 8005474:	4603      	mov	r3, r0
 8005476:	2b00      	cmp	r3, #0
 8005478:	d140      	bne.n	80054fc <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	005b      	lsls	r3, r3, #1
 8005484:	693a      	ldr	r2, [r7, #16]
 8005486:	8992      	ldrh	r2, [r2, #12]
 8005488:	fbb3 f0f2 	udiv	r0, r3, r2
 800548c:	fb00 f202 	mul.w	r2, r0, r2
 8005490:	1a9b      	subs	r3, r3, r2
 8005492:	440b      	add	r3, r1
 8005494:	4618      	mov	r0, r3
 8005496:	f7ff fbf7 	bl	8004c88 <ld_word>
 800549a:	4603      	mov	r3, r0
 800549c:	617b      	str	r3, [r7, #20]
			break;
 800549e:	e030      	b.n	8005502 <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	899b      	ldrh	r3, [r3, #12]
 80054a8:	089b      	lsrs	r3, r3, #2
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	4619      	mov	r1, r3
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	fbb3 f3f1 	udiv	r3, r3, r1
 80054b4:	4413      	add	r3, r2
 80054b6:	4619      	mov	r1, r3
 80054b8:	6938      	ldr	r0, [r7, #16]
 80054ba:	f7ff fe97 	bl	80051ec <move_window>
 80054be:	4603      	mov	r3, r0
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d11d      	bne.n	8005500 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	009b      	lsls	r3, r3, #2
 80054ce:	693a      	ldr	r2, [r7, #16]
 80054d0:	8992      	ldrh	r2, [r2, #12]
 80054d2:	fbb3 f0f2 	udiv	r0, r3, r2
 80054d6:	fb00 f202 	mul.w	r2, r0, r2
 80054da:	1a9b      	subs	r3, r3, r2
 80054dc:	440b      	add	r3, r1
 80054de:	4618      	mov	r0, r3
 80054e0:	f7ff fbeb 	bl	8004cba <ld_dword>
 80054e4:	4603      	mov	r3, r0
 80054e6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80054ea:	617b      	str	r3, [r7, #20]
			break;
 80054ec:	e009      	b.n	8005502 <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80054ee:	2301      	movs	r3, #1
 80054f0:	617b      	str	r3, [r7, #20]
 80054f2:	e006      	b.n	8005502 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80054f4:	bf00      	nop
 80054f6:	e004      	b.n	8005502 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80054f8:	bf00      	nop
 80054fa:	e002      	b.n	8005502 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80054fc:	bf00      	nop
 80054fe:	e000      	b.n	8005502 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005500:	bf00      	nop
		}
	}

	return val;
 8005502:	697b      	ldr	r3, [r7, #20]
}
 8005504:	4618      	mov	r0, r3
 8005506:	3718      	adds	r7, #24
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}

0800550c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800550c:	b590      	push	{r4, r7, lr}
 800550e:	b089      	sub	sp, #36	@ 0x24
 8005510:	af00      	add	r7, sp, #0
 8005512:	60f8      	str	r0, [r7, #12]
 8005514:	60b9      	str	r1, [r7, #8]
 8005516:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8005518:	2302      	movs	r3, #2
 800551a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	2b01      	cmp	r3, #1
 8005520:	f240 8109 	bls.w	8005736 <put_fat+0x22a>
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	69db      	ldr	r3, [r3, #28]
 8005528:	68ba      	ldr	r2, [r7, #8]
 800552a:	429a      	cmp	r2, r3
 800552c:	f080 8103 	bcs.w	8005736 <put_fat+0x22a>
		switch (fs->fs_type) {
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	781b      	ldrb	r3, [r3, #0]
 8005534:	2b03      	cmp	r3, #3
 8005536:	f000 80b6 	beq.w	80056a6 <put_fat+0x19a>
 800553a:	2b03      	cmp	r3, #3
 800553c:	f300 80fb 	bgt.w	8005736 <put_fat+0x22a>
 8005540:	2b01      	cmp	r3, #1
 8005542:	d003      	beq.n	800554c <put_fat+0x40>
 8005544:	2b02      	cmp	r3, #2
 8005546:	f000 8083 	beq.w	8005650 <put_fat+0x144>
 800554a:	e0f4      	b.n	8005736 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	61bb      	str	r3, [r7, #24]
 8005550:	69bb      	ldr	r3, [r7, #24]
 8005552:	085b      	lsrs	r3, r3, #1
 8005554:	69ba      	ldr	r2, [r7, #24]
 8005556:	4413      	add	r3, r2
 8005558:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	899b      	ldrh	r3, [r3, #12]
 8005562:	4619      	mov	r1, r3
 8005564:	69bb      	ldr	r3, [r7, #24]
 8005566:	fbb3 f3f1 	udiv	r3, r3, r1
 800556a:	4413      	add	r3, r2
 800556c:	4619      	mov	r1, r3
 800556e:	68f8      	ldr	r0, [r7, #12]
 8005570:	f7ff fe3c 	bl	80051ec <move_window>
 8005574:	4603      	mov	r3, r0
 8005576:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005578:	7ffb      	ldrb	r3, [r7, #31]
 800557a:	2b00      	cmp	r3, #0
 800557c:	f040 80d4 	bne.w	8005728 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005586:	69bb      	ldr	r3, [r7, #24]
 8005588:	1c5a      	adds	r2, r3, #1
 800558a:	61ba      	str	r2, [r7, #24]
 800558c:	68fa      	ldr	r2, [r7, #12]
 800558e:	8992      	ldrh	r2, [r2, #12]
 8005590:	fbb3 f0f2 	udiv	r0, r3, r2
 8005594:	fb00 f202 	mul.w	r2, r0, r2
 8005598:	1a9b      	subs	r3, r3, r2
 800559a:	440b      	add	r3, r1
 800559c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	f003 0301 	and.w	r3, r3, #1
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d00d      	beq.n	80055c4 <put_fat+0xb8>
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	781b      	ldrb	r3, [r3, #0]
 80055ac:	b25b      	sxtb	r3, r3
 80055ae:	f003 030f 	and.w	r3, r3, #15
 80055b2:	b25a      	sxtb	r2, r3
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	b25b      	sxtb	r3, r3
 80055b8:	011b      	lsls	r3, r3, #4
 80055ba:	b25b      	sxtb	r3, r3
 80055bc:	4313      	orrs	r3, r2
 80055be:	b25b      	sxtb	r3, r3
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	e001      	b.n	80055c8 <put_fat+0xbc>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	697a      	ldr	r2, [r7, #20]
 80055ca:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2201      	movs	r2, #1
 80055d0:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	899b      	ldrh	r3, [r3, #12]
 80055da:	4619      	mov	r1, r3
 80055dc:	69bb      	ldr	r3, [r7, #24]
 80055de:	fbb3 f3f1 	udiv	r3, r3, r1
 80055e2:	4413      	add	r3, r2
 80055e4:	4619      	mov	r1, r3
 80055e6:	68f8      	ldr	r0, [r7, #12]
 80055e8:	f7ff fe00 	bl	80051ec <move_window>
 80055ec:	4603      	mov	r3, r0
 80055ee:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80055f0:	7ffb      	ldrb	r3, [r7, #31]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	f040 809a 	bne.w	800572c <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	899b      	ldrh	r3, [r3, #12]
 8005602:	461a      	mov	r2, r3
 8005604:	69bb      	ldr	r3, [r7, #24]
 8005606:	fbb3 f0f2 	udiv	r0, r3, r2
 800560a:	fb00 f202 	mul.w	r2, r0, r2
 800560e:	1a9b      	subs	r3, r3, r2
 8005610:	440b      	add	r3, r1
 8005612:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	f003 0301 	and.w	r3, r3, #1
 800561a:	2b00      	cmp	r3, #0
 800561c:	d003      	beq.n	8005626 <put_fat+0x11a>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	091b      	lsrs	r3, r3, #4
 8005622:	b2db      	uxtb	r3, r3
 8005624:	e00e      	b.n	8005644 <put_fat+0x138>
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	781b      	ldrb	r3, [r3, #0]
 800562a:	b25b      	sxtb	r3, r3
 800562c:	f023 030f 	bic.w	r3, r3, #15
 8005630:	b25a      	sxtb	r2, r3
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	0a1b      	lsrs	r3, r3, #8
 8005636:	b25b      	sxtb	r3, r3
 8005638:	f003 030f 	and.w	r3, r3, #15
 800563c:	b25b      	sxtb	r3, r3
 800563e:	4313      	orrs	r3, r2
 8005640:	b25b      	sxtb	r3, r3
 8005642:	b2db      	uxtb	r3, r3
 8005644:	697a      	ldr	r2, [r7, #20]
 8005646:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2201      	movs	r2, #1
 800564c:	70da      	strb	r2, [r3, #3]
			break;
 800564e:	e072      	b.n	8005736 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	899b      	ldrh	r3, [r3, #12]
 8005658:	085b      	lsrs	r3, r3, #1
 800565a:	b29b      	uxth	r3, r3
 800565c:	4619      	mov	r1, r3
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	fbb3 f3f1 	udiv	r3, r3, r1
 8005664:	4413      	add	r3, r2
 8005666:	4619      	mov	r1, r3
 8005668:	68f8      	ldr	r0, [r7, #12]
 800566a:	f7ff fdbf 	bl	80051ec <move_window>
 800566e:	4603      	mov	r3, r0
 8005670:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005672:	7ffb      	ldrb	r3, [r7, #31]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d15b      	bne.n	8005730 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	005b      	lsls	r3, r3, #1
 8005682:	68fa      	ldr	r2, [r7, #12]
 8005684:	8992      	ldrh	r2, [r2, #12]
 8005686:	fbb3 f0f2 	udiv	r0, r3, r2
 800568a:	fb00 f202 	mul.w	r2, r0, r2
 800568e:	1a9b      	subs	r3, r3, r2
 8005690:	440b      	add	r3, r1
 8005692:	687a      	ldr	r2, [r7, #4]
 8005694:	b292      	uxth	r2, r2
 8005696:	4611      	mov	r1, r2
 8005698:	4618      	mov	r0, r3
 800569a:	f7ff fb31 	bl	8004d00 <st_word>
			fs->wflag = 1;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2201      	movs	r2, #1
 80056a2:	70da      	strb	r2, [r3, #3]
			break;
 80056a4:	e047      	b.n	8005736 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	899b      	ldrh	r3, [r3, #12]
 80056ae:	089b      	lsrs	r3, r3, #2
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	4619      	mov	r1, r3
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80056ba:	4413      	add	r3, r2
 80056bc:	4619      	mov	r1, r3
 80056be:	68f8      	ldr	r0, [r7, #12]
 80056c0:	f7ff fd94 	bl	80051ec <move_window>
 80056c4:	4603      	mov	r3, r0
 80056c6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80056c8:	7ffb      	ldrb	r3, [r7, #31]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d132      	bne.n	8005734 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	009b      	lsls	r3, r3, #2
 80056de:	68fa      	ldr	r2, [r7, #12]
 80056e0:	8992      	ldrh	r2, [r2, #12]
 80056e2:	fbb3 f0f2 	udiv	r0, r3, r2
 80056e6:	fb00 f202 	mul.w	r2, r0, r2
 80056ea:	1a9b      	subs	r3, r3, r2
 80056ec:	440b      	add	r3, r1
 80056ee:	4618      	mov	r0, r3
 80056f0:	f7ff fae3 	bl	8004cba <ld_dword>
 80056f4:	4603      	mov	r3, r0
 80056f6:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80056fa:	4323      	orrs	r3, r4
 80056fc:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	009b      	lsls	r3, r3, #2
 8005708:	68fa      	ldr	r2, [r7, #12]
 800570a:	8992      	ldrh	r2, [r2, #12]
 800570c:	fbb3 f0f2 	udiv	r0, r3, r2
 8005710:	fb00 f202 	mul.w	r2, r0, r2
 8005714:	1a9b      	subs	r3, r3, r2
 8005716:	440b      	add	r3, r1
 8005718:	6879      	ldr	r1, [r7, #4]
 800571a:	4618      	mov	r0, r3
 800571c:	f7ff fb0b 	bl	8004d36 <st_dword>
			fs->wflag = 1;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2201      	movs	r2, #1
 8005724:	70da      	strb	r2, [r3, #3]
			break;
 8005726:	e006      	b.n	8005736 <put_fat+0x22a>
			if (res != FR_OK) break;
 8005728:	bf00      	nop
 800572a:	e004      	b.n	8005736 <put_fat+0x22a>
			if (res != FR_OK) break;
 800572c:	bf00      	nop
 800572e:	e002      	b.n	8005736 <put_fat+0x22a>
			if (res != FR_OK) break;
 8005730:	bf00      	nop
 8005732:	e000      	b.n	8005736 <put_fat+0x22a>
			if (res != FR_OK) break;
 8005734:	bf00      	nop
		}
	}
	return res;
 8005736:	7ffb      	ldrb	r3, [r7, #31]
}
 8005738:	4618      	mov	r0, r3
 800573a:	3724      	adds	r7, #36	@ 0x24
 800573c:	46bd      	mov	sp, r7
 800573e:	bd90      	pop	{r4, r7, pc}

08005740 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b088      	sub	sp, #32
 8005744:	af00      	add	r7, sp, #0
 8005746:	60f8      	str	r0, [r7, #12]
 8005748:	60b9      	str	r1, [r7, #8]
 800574a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800574c:	2300      	movs	r3, #0
 800574e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	2b01      	cmp	r3, #1
 800575a:	d904      	bls.n	8005766 <remove_chain+0x26>
 800575c:	69bb      	ldr	r3, [r7, #24]
 800575e:	69db      	ldr	r3, [r3, #28]
 8005760:	68ba      	ldr	r2, [r7, #8]
 8005762:	429a      	cmp	r2, r3
 8005764:	d301      	bcc.n	800576a <remove_chain+0x2a>
 8005766:	2302      	movs	r3, #2
 8005768:	e04b      	b.n	8005802 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d00c      	beq.n	800578a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8005770:	f04f 32ff 	mov.w	r2, #4294967295
 8005774:	6879      	ldr	r1, [r7, #4]
 8005776:	69b8      	ldr	r0, [r7, #24]
 8005778:	f7ff fec8 	bl	800550c <put_fat>
 800577c:	4603      	mov	r3, r0
 800577e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8005780:	7ffb      	ldrb	r3, [r7, #31]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d001      	beq.n	800578a <remove_chain+0x4a>
 8005786:	7ffb      	ldrb	r3, [r7, #31]
 8005788:	e03b      	b.n	8005802 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800578a:	68b9      	ldr	r1, [r7, #8]
 800578c:	68f8      	ldr	r0, [r7, #12]
 800578e:	f7ff fdea 	bl	8005366 <get_fat>
 8005792:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d031      	beq.n	80057fe <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	2b01      	cmp	r3, #1
 800579e:	d101      	bne.n	80057a4 <remove_chain+0x64>
 80057a0:	2302      	movs	r3, #2
 80057a2:	e02e      	b.n	8005802 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057aa:	d101      	bne.n	80057b0 <remove_chain+0x70>
 80057ac:	2301      	movs	r3, #1
 80057ae:	e028      	b.n	8005802 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80057b0:	2200      	movs	r2, #0
 80057b2:	68b9      	ldr	r1, [r7, #8]
 80057b4:	69b8      	ldr	r0, [r7, #24]
 80057b6:	f7ff fea9 	bl	800550c <put_fat>
 80057ba:	4603      	mov	r3, r0
 80057bc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80057be:	7ffb      	ldrb	r3, [r7, #31]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d001      	beq.n	80057c8 <remove_chain+0x88>
 80057c4:	7ffb      	ldrb	r3, [r7, #31]
 80057c6:	e01c      	b.n	8005802 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80057c8:	69bb      	ldr	r3, [r7, #24]
 80057ca:	699a      	ldr	r2, [r3, #24]
 80057cc:	69bb      	ldr	r3, [r7, #24]
 80057ce:	69db      	ldr	r3, [r3, #28]
 80057d0:	3b02      	subs	r3, #2
 80057d2:	429a      	cmp	r2, r3
 80057d4:	d20b      	bcs.n	80057ee <remove_chain+0xae>
			fs->free_clst++;
 80057d6:	69bb      	ldr	r3, [r7, #24]
 80057d8:	699b      	ldr	r3, [r3, #24]
 80057da:	1c5a      	adds	r2, r3, #1
 80057dc:	69bb      	ldr	r3, [r7, #24]
 80057de:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 80057e0:	69bb      	ldr	r3, [r7, #24]
 80057e2:	791b      	ldrb	r3, [r3, #4]
 80057e4:	f043 0301 	orr.w	r3, r3, #1
 80057e8:	b2da      	uxtb	r2, r3
 80057ea:	69bb      	ldr	r3, [r7, #24]
 80057ec:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80057f2:	69bb      	ldr	r3, [r7, #24]
 80057f4:	69db      	ldr	r3, [r3, #28]
 80057f6:	68ba      	ldr	r2, [r7, #8]
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d3c6      	bcc.n	800578a <remove_chain+0x4a>
 80057fc:	e000      	b.n	8005800 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80057fe:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8005800:	2300      	movs	r3, #0
}
 8005802:	4618      	mov	r0, r3
 8005804:	3720      	adds	r7, #32
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}

0800580a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800580a:	b580      	push	{r7, lr}
 800580c:	b088      	sub	sp, #32
 800580e:	af00      	add	r7, sp, #0
 8005810:	6078      	str	r0, [r7, #4]
 8005812:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d10d      	bne.n	800583c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	695b      	ldr	r3, [r3, #20]
 8005824:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005826:	69bb      	ldr	r3, [r7, #24]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d004      	beq.n	8005836 <create_chain+0x2c>
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	69db      	ldr	r3, [r3, #28]
 8005830:	69ba      	ldr	r2, [r7, #24]
 8005832:	429a      	cmp	r2, r3
 8005834:	d31b      	bcc.n	800586e <create_chain+0x64>
 8005836:	2301      	movs	r3, #1
 8005838:	61bb      	str	r3, [r7, #24]
 800583a:	e018      	b.n	800586e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800583c:	6839      	ldr	r1, [r7, #0]
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f7ff fd91 	bl	8005366 <get_fat>
 8005844:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2b01      	cmp	r3, #1
 800584a:	d801      	bhi.n	8005850 <create_chain+0x46>
 800584c:	2301      	movs	r3, #1
 800584e:	e070      	b.n	8005932 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005856:	d101      	bne.n	800585c <create_chain+0x52>
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	e06a      	b.n	8005932 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	69db      	ldr	r3, [r3, #28]
 8005860:	68fa      	ldr	r2, [r7, #12]
 8005862:	429a      	cmp	r2, r3
 8005864:	d201      	bcs.n	800586a <create_chain+0x60>
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	e063      	b.n	8005932 <create_chain+0x128>
		scl = clst;
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800586e:	69bb      	ldr	r3, [r7, #24]
 8005870:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8005872:	69fb      	ldr	r3, [r7, #28]
 8005874:	3301      	adds	r3, #1
 8005876:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	69db      	ldr	r3, [r3, #28]
 800587c:	69fa      	ldr	r2, [r7, #28]
 800587e:	429a      	cmp	r2, r3
 8005880:	d307      	bcc.n	8005892 <create_chain+0x88>
				ncl = 2;
 8005882:	2302      	movs	r3, #2
 8005884:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8005886:	69fa      	ldr	r2, [r7, #28]
 8005888:	69bb      	ldr	r3, [r7, #24]
 800588a:	429a      	cmp	r2, r3
 800588c:	d901      	bls.n	8005892 <create_chain+0x88>
 800588e:	2300      	movs	r3, #0
 8005890:	e04f      	b.n	8005932 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8005892:	69f9      	ldr	r1, [r7, #28]
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f7ff fd66 	bl	8005366 <get_fat>
 800589a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d00e      	beq.n	80058c0 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d003      	beq.n	80058b0 <create_chain+0xa6>
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ae:	d101      	bne.n	80058b4 <create_chain+0xaa>
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	e03e      	b.n	8005932 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80058b4:	69fa      	ldr	r2, [r7, #28]
 80058b6:	69bb      	ldr	r3, [r7, #24]
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d1da      	bne.n	8005872 <create_chain+0x68>
 80058bc:	2300      	movs	r3, #0
 80058be:	e038      	b.n	8005932 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80058c0:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80058c2:	f04f 32ff 	mov.w	r2, #4294967295
 80058c6:	69f9      	ldr	r1, [r7, #28]
 80058c8:	6938      	ldr	r0, [r7, #16]
 80058ca:	f7ff fe1f 	bl	800550c <put_fat>
 80058ce:	4603      	mov	r3, r0
 80058d0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80058d2:	7dfb      	ldrb	r3, [r7, #23]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d109      	bne.n	80058ec <create_chain+0xe2>
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d006      	beq.n	80058ec <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80058de:	69fa      	ldr	r2, [r7, #28]
 80058e0:	6839      	ldr	r1, [r7, #0]
 80058e2:	6938      	ldr	r0, [r7, #16]
 80058e4:	f7ff fe12 	bl	800550c <put_fat>
 80058e8:	4603      	mov	r3, r0
 80058ea:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80058ec:	7dfb      	ldrb	r3, [r7, #23]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d116      	bne.n	8005920 <create_chain+0x116>
		fs->last_clst = ncl;
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	69fa      	ldr	r2, [r7, #28]
 80058f6:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	699a      	ldr	r2, [r3, #24]
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	69db      	ldr	r3, [r3, #28]
 8005900:	3b02      	subs	r3, #2
 8005902:	429a      	cmp	r2, r3
 8005904:	d804      	bhi.n	8005910 <create_chain+0x106>
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	699b      	ldr	r3, [r3, #24]
 800590a:	1e5a      	subs	r2, r3, #1
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	791b      	ldrb	r3, [r3, #4]
 8005914:	f043 0301 	orr.w	r3, r3, #1
 8005918:	b2da      	uxtb	r2, r3
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	711a      	strb	r2, [r3, #4]
 800591e:	e007      	b.n	8005930 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8005920:	7dfb      	ldrb	r3, [r7, #23]
 8005922:	2b01      	cmp	r3, #1
 8005924:	d102      	bne.n	800592c <create_chain+0x122>
 8005926:	f04f 33ff 	mov.w	r3, #4294967295
 800592a:	e000      	b.n	800592e <create_chain+0x124>
 800592c:	2301      	movs	r3, #1
 800592e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8005930:	69fb      	ldr	r3, [r7, #28]
}
 8005932:	4618      	mov	r0, r3
 8005934:	3720      	adds	r7, #32
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}

0800593a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800593a:	b480      	push	{r7}
 800593c:	b087      	sub	sp, #28
 800593e:	af00      	add	r7, sp, #0
 8005940:	6078      	str	r0, [r7, #4]
 8005942:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800594e:	3304      	adds	r3, #4
 8005950:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	899b      	ldrh	r3, [r3, #12]
 8005956:	461a      	mov	r2, r3
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	fbb3 f3f2 	udiv	r3, r3, r2
 800595e:	68fa      	ldr	r2, [r7, #12]
 8005960:	8952      	ldrh	r2, [r2, #10]
 8005962:	fbb3 f3f2 	udiv	r3, r3, r2
 8005966:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	1d1a      	adds	r2, r3, #4
 800596c:	613a      	str	r2, [r7, #16]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d101      	bne.n	800597c <clmt_clust+0x42>
 8005978:	2300      	movs	r3, #0
 800597a:	e010      	b.n	800599e <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800597c:	697a      	ldr	r2, [r7, #20]
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	429a      	cmp	r2, r3
 8005982:	d307      	bcc.n	8005994 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8005984:	697a      	ldr	r2, [r7, #20]
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	1ad3      	subs	r3, r2, r3
 800598a:	617b      	str	r3, [r7, #20]
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	3304      	adds	r3, #4
 8005990:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005992:	e7e9      	b.n	8005968 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8005994:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	681a      	ldr	r2, [r3, #0]
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	4413      	add	r3, r2
}
 800599e:	4618      	mov	r0, r3
 80059a0:	371c      	adds	r7, #28
 80059a2:	46bd      	mov	sp, r7
 80059a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a8:	4770      	bx	lr

080059aa <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80059aa:	b580      	push	{r7, lr}
 80059ac:	b086      	sub	sp, #24
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	6078      	str	r0, [r7, #4]
 80059b2:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80059c0:	d204      	bcs.n	80059cc <dir_sdi+0x22>
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	f003 031f 	and.w	r3, r3, #31
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d001      	beq.n	80059d0 <dir_sdi+0x26>
		return FR_INT_ERR;
 80059cc:	2302      	movs	r3, #2
 80059ce:	e071      	b.n	8005ab4 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	683a      	ldr	r2, [r7, #0]
 80059d4:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	689b      	ldr	r3, [r3, #8]
 80059da:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d106      	bne.n	80059f0 <dir_sdi+0x46>
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	781b      	ldrb	r3, [r3, #0]
 80059e6:	2b02      	cmp	r3, #2
 80059e8:	d902      	bls.n	80059f0 <dir_sdi+0x46>
		clst = fs->dirbase;
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059ee:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d10c      	bne.n	8005a10 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	095b      	lsrs	r3, r3, #5
 80059fa:	693a      	ldr	r2, [r7, #16]
 80059fc:	8912      	ldrh	r2, [r2, #8]
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d301      	bcc.n	8005a06 <dir_sdi+0x5c>
 8005a02:	2302      	movs	r3, #2
 8005a04:	e056      	b.n	8005ab4 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	61da      	str	r2, [r3, #28]
 8005a0e:	e02d      	b.n	8005a6c <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	895b      	ldrh	r3, [r3, #10]
 8005a14:	461a      	mov	r2, r3
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	899b      	ldrh	r3, [r3, #12]
 8005a1a:	fb02 f303 	mul.w	r3, r2, r3
 8005a1e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005a20:	e019      	b.n	8005a56 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6979      	ldr	r1, [r7, #20]
 8005a26:	4618      	mov	r0, r3
 8005a28:	f7ff fc9d 	bl	8005366 <get_fat>
 8005a2c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a34:	d101      	bne.n	8005a3a <dir_sdi+0x90>
 8005a36:	2301      	movs	r3, #1
 8005a38:	e03c      	b.n	8005ab4 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d904      	bls.n	8005a4a <dir_sdi+0xa0>
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	69db      	ldr	r3, [r3, #28]
 8005a44:	697a      	ldr	r2, [r7, #20]
 8005a46:	429a      	cmp	r2, r3
 8005a48:	d301      	bcc.n	8005a4e <dir_sdi+0xa4>
 8005a4a:	2302      	movs	r3, #2
 8005a4c:	e032      	b.n	8005ab4 <dir_sdi+0x10a>
			ofs -= csz;
 8005a4e:	683a      	ldr	r2, [r7, #0]
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	1ad3      	subs	r3, r2, r3
 8005a54:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005a56:	683a      	ldr	r2, [r7, #0]
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d2e1      	bcs.n	8005a22 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8005a5e:	6979      	ldr	r1, [r7, #20]
 8005a60:	6938      	ldr	r0, [r7, #16]
 8005a62:	f7ff fc61 	bl	8005328 <clust2sect>
 8005a66:	4602      	mov	r2, r0
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	697a      	ldr	r2, [r7, #20]
 8005a70:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	69db      	ldr	r3, [r3, #28]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d101      	bne.n	8005a7e <dir_sdi+0xd4>
 8005a7a:	2302      	movs	r3, #2
 8005a7c:	e01a      	b.n	8005ab4 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	69da      	ldr	r2, [r3, #28]
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	899b      	ldrh	r3, [r3, #12]
 8005a86:	4619      	mov	r1, r3
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8005a8e:	441a      	add	r2, r3
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	899b      	ldrh	r3, [r3, #12]
 8005a9e:	461a      	mov	r2, r3
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	fbb3 f0f2 	udiv	r0, r3, r2
 8005aa6:	fb00 f202 	mul.w	r2, r0, r2
 8005aaa:	1a9b      	subs	r3, r3, r2
 8005aac:	18ca      	adds	r2, r1, r3
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005ab2:	2300      	movs	r3, #0
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3718      	adds	r7, #24
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}

08005abc <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b086      	sub	sp, #24
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	695b      	ldr	r3, [r3, #20]
 8005ad0:	3320      	adds	r3, #32
 8005ad2:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	69db      	ldr	r3, [r3, #28]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d003      	beq.n	8005ae4 <dir_next+0x28>
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005ae2:	d301      	bcc.n	8005ae8 <dir_next+0x2c>
 8005ae4:	2304      	movs	r3, #4
 8005ae6:	e0bb      	b.n	8005c60 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	899b      	ldrh	r3, [r3, #12]
 8005aec:	461a      	mov	r2, r3
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	fbb3 f1f2 	udiv	r1, r3, r2
 8005af4:	fb01 f202 	mul.w	r2, r1, r2
 8005af8:	1a9b      	subs	r3, r3, r2
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	f040 809d 	bne.w	8005c3a <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	69db      	ldr	r3, [r3, #28]
 8005b04:	1c5a      	adds	r2, r3, #1
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	699b      	ldr	r3, [r3, #24]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d10b      	bne.n	8005b2a <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	095b      	lsrs	r3, r3, #5
 8005b16:	68fa      	ldr	r2, [r7, #12]
 8005b18:	8912      	ldrh	r2, [r2, #8]
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	f0c0 808d 	bcc.w	8005c3a <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2200      	movs	r2, #0
 8005b24:	61da      	str	r2, [r3, #28]
 8005b26:	2304      	movs	r3, #4
 8005b28:	e09a      	b.n	8005c60 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	899b      	ldrh	r3, [r3, #12]
 8005b2e:	461a      	mov	r2, r3
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b36:	68fa      	ldr	r2, [r7, #12]
 8005b38:	8952      	ldrh	r2, [r2, #10]
 8005b3a:	3a01      	subs	r2, #1
 8005b3c:	4013      	ands	r3, r2
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d17b      	bne.n	8005c3a <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8005b42:	687a      	ldr	r2, [r7, #4]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	699b      	ldr	r3, [r3, #24]
 8005b48:	4619      	mov	r1, r3
 8005b4a:	4610      	mov	r0, r2
 8005b4c:	f7ff fc0b 	bl	8005366 <get_fat>
 8005b50:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d801      	bhi.n	8005b5c <dir_next+0xa0>
 8005b58:	2302      	movs	r3, #2
 8005b5a:	e081      	b.n	8005c60 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b62:	d101      	bne.n	8005b68 <dir_next+0xac>
 8005b64:	2301      	movs	r3, #1
 8005b66:	e07b      	b.n	8005c60 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	69db      	ldr	r3, [r3, #28]
 8005b6c:	697a      	ldr	r2, [r7, #20]
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	d359      	bcc.n	8005c26 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d104      	bne.n	8005b82 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	61da      	str	r2, [r3, #28]
 8005b7e:	2304      	movs	r3, #4
 8005b80:	e06e      	b.n	8005c60 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	699b      	ldr	r3, [r3, #24]
 8005b88:	4619      	mov	r1, r3
 8005b8a:	4610      	mov	r0, r2
 8005b8c:	f7ff fe3d 	bl	800580a <create_chain>
 8005b90:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d101      	bne.n	8005b9c <dir_next+0xe0>
 8005b98:	2307      	movs	r3, #7
 8005b9a:	e061      	b.n	8005c60 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	2b01      	cmp	r3, #1
 8005ba0:	d101      	bne.n	8005ba6 <dir_next+0xea>
 8005ba2:	2302      	movs	r3, #2
 8005ba4:	e05c      	b.n	8005c60 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bac:	d101      	bne.n	8005bb2 <dir_next+0xf6>
 8005bae:	2301      	movs	r3, #1
 8005bb0:	e056      	b.n	8005c60 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8005bb2:	68f8      	ldr	r0, [r7, #12]
 8005bb4:	f7ff fad6 	bl	8005164 <sync_window>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d001      	beq.n	8005bc2 <dir_next+0x106>
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	e04e      	b.n	8005c60 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	899b      	ldrh	r3, [r3, #12]
 8005bcc:	461a      	mov	r2, r3
 8005bce:	2100      	movs	r1, #0
 8005bd0:	f7ff f8fe 	bl	8004dd0 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	613b      	str	r3, [r7, #16]
 8005bd8:	6979      	ldr	r1, [r7, #20]
 8005bda:	68f8      	ldr	r0, [r7, #12]
 8005bdc:	f7ff fba4 	bl	8005328 <clust2sect>
 8005be0:	4602      	mov	r2, r0
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	635a      	str	r2, [r3, #52]	@ 0x34
 8005be6:	e012      	b.n	8005c0e <dir_next+0x152>
						fs->wflag = 1;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2201      	movs	r2, #1
 8005bec:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8005bee:	68f8      	ldr	r0, [r7, #12]
 8005bf0:	f7ff fab8 	bl	8005164 <sync_window>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d001      	beq.n	8005bfe <dir_next+0x142>
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e030      	b.n	8005c60 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	3301      	adds	r3, #1
 8005c02:	613b      	str	r3, [r7, #16]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c08:	1c5a      	adds	r2, r3, #1
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	635a      	str	r2, [r3, #52]	@ 0x34
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	895b      	ldrh	r3, [r3, #10]
 8005c12:	461a      	mov	r2, r3
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d3e6      	bcc.n	8005be8 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	1ad2      	subs	r2, r2, r3
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	697a      	ldr	r2, [r7, #20]
 8005c2a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8005c2c:	6979      	ldr	r1, [r7, #20]
 8005c2e:	68f8      	ldr	r0, [r7, #12]
 8005c30:	f7ff fb7a 	bl	8005328 <clust2sect>
 8005c34:	4602      	mov	r2, r0
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	68ba      	ldr	r2, [r7, #8]
 8005c3e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	899b      	ldrh	r3, [r3, #12]
 8005c4a:	461a      	mov	r2, r3
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	fbb3 f0f2 	udiv	r0, r3, r2
 8005c52:	fb00 f202 	mul.w	r2, r0, r2
 8005c56:	1a9b      	subs	r3, r3, r2
 8005c58:	18ca      	adds	r2, r1, r3
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005c5e:	2300      	movs	r3, #0
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3718      	adds	r7, #24
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}

08005c68 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b086      	sub	sp, #24
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
 8005c70:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8005c78:	2100      	movs	r1, #0
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f7ff fe95 	bl	80059aa <dir_sdi>
 8005c80:	4603      	mov	r3, r0
 8005c82:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005c84:	7dfb      	ldrb	r3, [r7, #23]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d12b      	bne.n	8005ce2 <dir_alloc+0x7a>
		n = 0;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	69db      	ldr	r3, [r3, #28]
 8005c92:	4619      	mov	r1, r3
 8005c94:	68f8      	ldr	r0, [r7, #12]
 8005c96:	f7ff faa9 	bl	80051ec <move_window>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005c9e:	7dfb      	ldrb	r3, [r7, #23]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d11d      	bne.n	8005ce0 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6a1b      	ldr	r3, [r3, #32]
 8005ca8:	781b      	ldrb	r3, [r3, #0]
 8005caa:	2be5      	cmp	r3, #229	@ 0xe5
 8005cac:	d004      	beq.n	8005cb8 <dir_alloc+0x50>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6a1b      	ldr	r3, [r3, #32]
 8005cb2:	781b      	ldrb	r3, [r3, #0]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d107      	bne.n	8005cc8 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	3301      	adds	r3, #1
 8005cbc:	613b      	str	r3, [r7, #16]
 8005cbe:	693a      	ldr	r2, [r7, #16]
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	d102      	bne.n	8005ccc <dir_alloc+0x64>
 8005cc6:	e00c      	b.n	8005ce2 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8005cc8:	2300      	movs	r3, #0
 8005cca:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8005ccc:	2101      	movs	r1, #1
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f7ff fef4 	bl	8005abc <dir_next>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8005cd8:	7dfb      	ldrb	r3, [r7, #23]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d0d7      	beq.n	8005c8e <dir_alloc+0x26>
 8005cde:	e000      	b.n	8005ce2 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8005ce0:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005ce2:	7dfb      	ldrb	r3, [r7, #23]
 8005ce4:	2b04      	cmp	r3, #4
 8005ce6:	d101      	bne.n	8005cec <dir_alloc+0x84>
 8005ce8:	2307      	movs	r3, #7
 8005cea:	75fb      	strb	r3, [r7, #23]
	return res;
 8005cec:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3718      	adds	r7, #24
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}

08005cf6 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8005cf6:	b580      	push	{r7, lr}
 8005cf8:	b084      	sub	sp, #16
 8005cfa:	af00      	add	r7, sp, #0
 8005cfc:	6078      	str	r0, [r7, #4]
 8005cfe:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	331a      	adds	r3, #26
 8005d04:	4618      	mov	r0, r3
 8005d06:	f7fe ffbf 	bl	8004c88 <ld_word>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	781b      	ldrb	r3, [r3, #0]
 8005d12:	2b03      	cmp	r3, #3
 8005d14:	d109      	bne.n	8005d2a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	3314      	adds	r3, #20
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f7fe ffb4 	bl	8004c88 <ld_word>
 8005d20:	4603      	mov	r3, r0
 8005d22:	041b      	lsls	r3, r3, #16
 8005d24:	68fa      	ldr	r2, [r7, #12]
 8005d26:	4313      	orrs	r3, r2
 8005d28:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3710      	adds	r7, #16
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}

08005d34 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b084      	sub	sp, #16
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	60f8      	str	r0, [r7, #12]
 8005d3c:	60b9      	str	r1, [r7, #8]
 8005d3e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	331a      	adds	r3, #26
 8005d44:	687a      	ldr	r2, [r7, #4]
 8005d46:	b292      	uxth	r2, r2
 8005d48:	4611      	mov	r1, r2
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f7fe ffd8 	bl	8004d00 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	781b      	ldrb	r3, [r3, #0]
 8005d54:	2b03      	cmp	r3, #3
 8005d56:	d109      	bne.n	8005d6c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	f103 0214 	add.w	r2, r3, #20
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	0c1b      	lsrs	r3, r3, #16
 8005d62:	b29b      	uxth	r3, r3
 8005d64:	4619      	mov	r1, r3
 8005d66:	4610      	mov	r0, r2
 8005d68:	f7fe ffca 	bl	8004d00 <st_word>
	}
}
 8005d6c:	bf00      	nop
 8005d6e:	3710      	adds	r7, #16
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}

08005d74 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8005d74:	b590      	push	{r4, r7, lr}
 8005d76:	b087      	sub	sp, #28
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	331a      	adds	r3, #26
 8005d82:	4618      	mov	r0, r3
 8005d84:	f7fe ff80 	bl	8004c88 <ld_word>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d001      	beq.n	8005d92 <cmp_lfn+0x1e>
 8005d8e:	2300      	movs	r3, #0
 8005d90:	e059      	b.n	8005e46 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	781b      	ldrb	r3, [r3, #0]
 8005d96:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005d9a:	1e5a      	subs	r2, r3, #1
 8005d9c:	4613      	mov	r3, r2
 8005d9e:	005b      	lsls	r3, r3, #1
 8005da0:	4413      	add	r3, r2
 8005da2:	009b      	lsls	r3, r3, #2
 8005da4:	4413      	add	r3, r2
 8005da6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005da8:	2301      	movs	r3, #1
 8005daa:	81fb      	strh	r3, [r7, #14]
 8005dac:	2300      	movs	r3, #0
 8005dae:	613b      	str	r3, [r7, #16]
 8005db0:	e033      	b.n	8005e1a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8005db2:	4a27      	ldr	r2, [pc, #156]	@ (8005e50 <cmp_lfn+0xdc>)
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	4413      	add	r3, r2
 8005db8:	781b      	ldrb	r3, [r3, #0]
 8005dba:	461a      	mov	r2, r3
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	4413      	add	r3, r2
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	f7fe ff61 	bl	8004c88 <ld_word>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8005dca:	89fb      	ldrh	r3, [r7, #14]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d01a      	beq.n	8005e06 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	2bfe      	cmp	r3, #254	@ 0xfe
 8005dd4:	d812      	bhi.n	8005dfc <cmp_lfn+0x88>
 8005dd6:	89bb      	ldrh	r3, [r7, #12]
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f001 fd7b 	bl	80078d4 <ff_wtoupper>
 8005dde:	4603      	mov	r3, r0
 8005de0:	461c      	mov	r4, r3
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	1c5a      	adds	r2, r3, #1
 8005de6:	617a      	str	r2, [r7, #20]
 8005de8:	005b      	lsls	r3, r3, #1
 8005dea:	687a      	ldr	r2, [r7, #4]
 8005dec:	4413      	add	r3, r2
 8005dee:	881b      	ldrh	r3, [r3, #0]
 8005df0:	4618      	mov	r0, r3
 8005df2:	f001 fd6f 	bl	80078d4 <ff_wtoupper>
 8005df6:	4603      	mov	r3, r0
 8005df8:	429c      	cmp	r4, r3
 8005dfa:	d001      	beq.n	8005e00 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	e022      	b.n	8005e46 <cmp_lfn+0xd2>
			}
			wc = uc;
 8005e00:	89bb      	ldrh	r3, [r7, #12]
 8005e02:	81fb      	strh	r3, [r7, #14]
 8005e04:	e006      	b.n	8005e14 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8005e06:	89bb      	ldrh	r3, [r7, #12]
 8005e08:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d001      	beq.n	8005e14 <cmp_lfn+0xa0>
 8005e10:	2300      	movs	r3, #0
 8005e12:	e018      	b.n	8005e46 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	3301      	adds	r3, #1
 8005e18:	613b      	str	r3, [r7, #16]
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	2b0c      	cmp	r3, #12
 8005e1e:	d9c8      	bls.n	8005db2 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	781b      	ldrb	r3, [r3, #0]
 8005e24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d00b      	beq.n	8005e44 <cmp_lfn+0xd0>
 8005e2c:	89fb      	ldrh	r3, [r7, #14]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d008      	beq.n	8005e44 <cmp_lfn+0xd0>
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	005b      	lsls	r3, r3, #1
 8005e36:	687a      	ldr	r2, [r7, #4]
 8005e38:	4413      	add	r3, r2
 8005e3a:	881b      	ldrh	r3, [r3, #0]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d001      	beq.n	8005e44 <cmp_lfn+0xd0>
 8005e40:	2300      	movs	r3, #0
 8005e42:	e000      	b.n	8005e46 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8005e44:	2301      	movs	r3, #1
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	371c      	adds	r7, #28
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd90      	pop	{r4, r7, pc}
 8005e4e:	bf00      	nop
 8005e50:	08007d30 	.word	0x08007d30

08005e54 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b088      	sub	sp, #32
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	60f8      	str	r0, [r7, #12]
 8005e5c:	60b9      	str	r1, [r7, #8]
 8005e5e:	4611      	mov	r1, r2
 8005e60:	461a      	mov	r2, r3
 8005e62:	460b      	mov	r3, r1
 8005e64:	71fb      	strb	r3, [r7, #7]
 8005e66:	4613      	mov	r3, r2
 8005e68:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	330d      	adds	r3, #13
 8005e6e:	79ba      	ldrb	r2, [r7, #6]
 8005e70:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	330b      	adds	r3, #11
 8005e76:	220f      	movs	r2, #15
 8005e78:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	330c      	adds	r3, #12
 8005e7e:	2200      	movs	r2, #0
 8005e80:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	331a      	adds	r3, #26
 8005e86:	2100      	movs	r1, #0
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f7fe ff39 	bl	8004d00 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8005e8e:	79fb      	ldrb	r3, [r7, #7]
 8005e90:	1e5a      	subs	r2, r3, #1
 8005e92:	4613      	mov	r3, r2
 8005e94:	005b      	lsls	r3, r3, #1
 8005e96:	4413      	add	r3, r2
 8005e98:	009b      	lsls	r3, r3, #2
 8005e9a:	4413      	add	r3, r2
 8005e9c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	82fb      	strh	r3, [r7, #22]
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8005ea6:	8afb      	ldrh	r3, [r7, #22]
 8005ea8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d007      	beq.n	8005ec0 <put_lfn+0x6c>
 8005eb0:	69fb      	ldr	r3, [r7, #28]
 8005eb2:	1c5a      	adds	r2, r3, #1
 8005eb4:	61fa      	str	r2, [r7, #28]
 8005eb6:	005b      	lsls	r3, r3, #1
 8005eb8:	68fa      	ldr	r2, [r7, #12]
 8005eba:	4413      	add	r3, r2
 8005ebc:	881b      	ldrh	r3, [r3, #0]
 8005ebe:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8005ec0:	4a17      	ldr	r2, [pc, #92]	@ (8005f20 <put_lfn+0xcc>)
 8005ec2:	69bb      	ldr	r3, [r7, #24]
 8005ec4:	4413      	add	r3, r2
 8005ec6:	781b      	ldrb	r3, [r3, #0]
 8005ec8:	461a      	mov	r2, r3
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	4413      	add	r3, r2
 8005ece:	8afa      	ldrh	r2, [r7, #22]
 8005ed0:	4611      	mov	r1, r2
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f7fe ff14 	bl	8004d00 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8005ed8:	8afb      	ldrh	r3, [r7, #22]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d102      	bne.n	8005ee4 <put_lfn+0x90>
 8005ede:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005ee2:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8005ee4:	69bb      	ldr	r3, [r7, #24]
 8005ee6:	3301      	adds	r3, #1
 8005ee8:	61bb      	str	r3, [r7, #24]
 8005eea:	69bb      	ldr	r3, [r7, #24]
 8005eec:	2b0c      	cmp	r3, #12
 8005eee:	d9da      	bls.n	8005ea6 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8005ef0:	8afb      	ldrh	r3, [r7, #22]
 8005ef2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d006      	beq.n	8005f08 <put_lfn+0xb4>
 8005efa:	69fb      	ldr	r3, [r7, #28]
 8005efc:	005b      	lsls	r3, r3, #1
 8005efe:	68fa      	ldr	r2, [r7, #12]
 8005f00:	4413      	add	r3, r2
 8005f02:	881b      	ldrh	r3, [r3, #0]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d103      	bne.n	8005f10 <put_lfn+0xbc>
 8005f08:	79fb      	ldrb	r3, [r7, #7]
 8005f0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f0e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	79fa      	ldrb	r2, [r7, #7]
 8005f14:	701a      	strb	r2, [r3, #0]
}
 8005f16:	bf00      	nop
 8005f18:	3720      	adds	r7, #32
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}
 8005f1e:	bf00      	nop
 8005f20:	08007d30 	.word	0x08007d30

08005f24 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b08c      	sub	sp, #48	@ 0x30
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	60f8      	str	r0, [r7, #12]
 8005f2c:	60b9      	str	r1, [r7, #8]
 8005f2e:	607a      	str	r2, [r7, #4]
 8005f30:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8005f32:	220b      	movs	r2, #11
 8005f34:	68b9      	ldr	r1, [r7, #8]
 8005f36:	68f8      	ldr	r0, [r7, #12]
 8005f38:	f7fe ff29 	bl	8004d8e <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	2b05      	cmp	r3, #5
 8005f40:	d92b      	bls.n	8005f9a <gen_numname+0x76>
		sr = seq;
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8005f46:	e022      	b.n	8005f8e <gen_numname+0x6a>
			wc = *lfn++;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	1c9a      	adds	r2, r3, #2
 8005f4c:	607a      	str	r2, [r7, #4]
 8005f4e:	881b      	ldrh	r3, [r3, #0]
 8005f50:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 8005f52:	2300      	movs	r3, #0
 8005f54:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005f56:	e017      	b.n	8005f88 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8005f58:	69fb      	ldr	r3, [r7, #28]
 8005f5a:	005a      	lsls	r2, r3, #1
 8005f5c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005f5e:	f003 0301 	and.w	r3, r3, #1
 8005f62:	4413      	add	r3, r2
 8005f64:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8005f66:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005f68:	085b      	lsrs	r3, r3, #1
 8005f6a:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8005f6c:	69fb      	ldr	r3, [r7, #28]
 8005f6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d005      	beq.n	8005f82 <gen_numname+0x5e>
 8005f76:	69fb      	ldr	r3, [r7, #28]
 8005f78:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 8005f7c:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 8005f80:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8005f82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f84:	3301      	adds	r3, #1
 8005f86:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005f88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f8a:	2b0f      	cmp	r3, #15
 8005f8c:	d9e4      	bls.n	8005f58 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	881b      	ldrh	r3, [r3, #0]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d1d8      	bne.n	8005f48 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8005f96:	69fb      	ldr	r3, [r7, #28]
 8005f98:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8005f9a:	2307      	movs	r3, #7
 8005f9c:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	b2db      	uxtb	r3, r3
 8005fa2:	f003 030f 	and.w	r3, r3, #15
 8005fa6:	b2db      	uxtb	r3, r3
 8005fa8:	3330      	adds	r3, #48	@ 0x30
 8005faa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 8005fae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005fb2:	2b39      	cmp	r3, #57	@ 0x39
 8005fb4:	d904      	bls.n	8005fc0 <gen_numname+0x9c>
 8005fb6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005fba:	3307      	adds	r3, #7
 8005fbc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8005fc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fc2:	1e5a      	subs	r2, r3, #1
 8005fc4:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005fc6:	3330      	adds	r3, #48	@ 0x30
 8005fc8:	443b      	add	r3, r7
 8005fca:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8005fce:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	091b      	lsrs	r3, r3, #4
 8005fd6:	603b      	str	r3, [r7, #0]
	} while (seq);
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d1df      	bne.n	8005f9e <gen_numname+0x7a>
	ns[i] = '~';
 8005fde:	f107 0214 	add.w	r2, r7, #20
 8005fe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fe4:	4413      	add	r3, r2
 8005fe6:	227e      	movs	r2, #126	@ 0x7e
 8005fe8:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8005fea:	2300      	movs	r3, #0
 8005fec:	627b      	str	r3, [r7, #36]	@ 0x24
 8005fee:	e002      	b.n	8005ff6 <gen_numname+0xd2>
 8005ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ff2:	3301      	adds	r3, #1
 8005ff4:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ff6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ff8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	d205      	bcs.n	800600a <gen_numname+0xe6>
 8005ffe:	68fa      	ldr	r2, [r7, #12]
 8006000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006002:	4413      	add	r3, r2
 8006004:	781b      	ldrb	r3, [r3, #0]
 8006006:	2b20      	cmp	r3, #32
 8006008:	d1f2      	bne.n	8005ff0 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800600a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800600c:	2b07      	cmp	r3, #7
 800600e:	d807      	bhi.n	8006020 <gen_numname+0xfc>
 8006010:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006012:	1c5a      	adds	r2, r3, #1
 8006014:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006016:	3330      	adds	r3, #48	@ 0x30
 8006018:	443b      	add	r3, r7
 800601a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800601e:	e000      	b.n	8006022 <gen_numname+0xfe>
 8006020:	2120      	movs	r1, #32
 8006022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006024:	1c5a      	adds	r2, r3, #1
 8006026:	627a      	str	r2, [r7, #36]	@ 0x24
 8006028:	68fa      	ldr	r2, [r7, #12]
 800602a:	4413      	add	r3, r2
 800602c:	460a      	mov	r2, r1
 800602e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8006030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006032:	2b07      	cmp	r3, #7
 8006034:	d9e9      	bls.n	800600a <gen_numname+0xe6>
}
 8006036:	bf00      	nop
 8006038:	bf00      	nop
 800603a:	3730      	adds	r7, #48	@ 0x30
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}

08006040 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8006040:	b480      	push	{r7}
 8006042:	b085      	sub	sp, #20
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8006048:	2300      	movs	r3, #0
 800604a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800604c:	230b      	movs	r3, #11
 800604e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8006050:	7bfb      	ldrb	r3, [r7, #15]
 8006052:	b2da      	uxtb	r2, r3
 8006054:	0852      	lsrs	r2, r2, #1
 8006056:	01db      	lsls	r3, r3, #7
 8006058:	4313      	orrs	r3, r2
 800605a:	b2da      	uxtb	r2, r3
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	1c59      	adds	r1, r3, #1
 8006060:	6079      	str	r1, [r7, #4]
 8006062:	781b      	ldrb	r3, [r3, #0]
 8006064:	4413      	add	r3, r2
 8006066:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	3b01      	subs	r3, #1
 800606c:	60bb      	str	r3, [r7, #8]
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d1ed      	bne.n	8006050 <sum_sfn+0x10>
	return sum;
 8006074:	7bfb      	ldrb	r3, [r7, #15]
}
 8006076:	4618      	mov	r0, r3
 8006078:	3714      	adds	r7, #20
 800607a:	46bd      	mov	sp, r7
 800607c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006080:	4770      	bx	lr

08006082 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006082:	b580      	push	{r7, lr}
 8006084:	b086      	sub	sp, #24
 8006086:	af00      	add	r7, sp, #0
 8006088:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006090:	2100      	movs	r1, #0
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f7ff fc89 	bl	80059aa <dir_sdi>
 8006098:	4603      	mov	r3, r0
 800609a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800609c:	7dfb      	ldrb	r3, [r7, #23]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d001      	beq.n	80060a6 <dir_find+0x24>
 80060a2:	7dfb      	ldrb	r3, [r7, #23]
 80060a4:	e0a9      	b.n	80061fa <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80060a6:	23ff      	movs	r3, #255	@ 0xff
 80060a8:	753b      	strb	r3, [r7, #20]
 80060aa:	7d3b      	ldrb	r3, [r7, #20]
 80060ac:	757b      	strb	r3, [r7, #21]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f04f 32ff 	mov.w	r2, #4294967295
 80060b4:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	69db      	ldr	r3, [r3, #28]
 80060ba:	4619      	mov	r1, r3
 80060bc:	6938      	ldr	r0, [r7, #16]
 80060be:	f7ff f895 	bl	80051ec <move_window>
 80060c2:	4603      	mov	r3, r0
 80060c4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80060c6:	7dfb      	ldrb	r3, [r7, #23]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	f040 8090 	bne.w	80061ee <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6a1b      	ldr	r3, [r3, #32]
 80060d2:	781b      	ldrb	r3, [r3, #0]
 80060d4:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80060d6:	7dbb      	ldrb	r3, [r7, #22]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d102      	bne.n	80060e2 <dir_find+0x60>
 80060dc:	2304      	movs	r3, #4
 80060de:	75fb      	strb	r3, [r7, #23]
 80060e0:	e08a      	b.n	80061f8 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6a1b      	ldr	r3, [r3, #32]
 80060e6:	330b      	adds	r3, #11
 80060e8:	781b      	ldrb	r3, [r3, #0]
 80060ea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80060ee:	73fb      	strb	r3, [r7, #15]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	7bfa      	ldrb	r2, [r7, #15]
 80060f4:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80060f6:	7dbb      	ldrb	r3, [r7, #22]
 80060f8:	2be5      	cmp	r3, #229	@ 0xe5
 80060fa:	d007      	beq.n	800610c <dir_find+0x8a>
 80060fc:	7bfb      	ldrb	r3, [r7, #15]
 80060fe:	f003 0308 	and.w	r3, r3, #8
 8006102:	2b00      	cmp	r3, #0
 8006104:	d009      	beq.n	800611a <dir_find+0x98>
 8006106:	7bfb      	ldrb	r3, [r7, #15]
 8006108:	2b0f      	cmp	r3, #15
 800610a:	d006      	beq.n	800611a <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800610c:	23ff      	movs	r3, #255	@ 0xff
 800610e:	757b      	strb	r3, [r7, #21]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f04f 32ff 	mov.w	r2, #4294967295
 8006116:	631a      	str	r2, [r3, #48]	@ 0x30
 8006118:	e05e      	b.n	80061d8 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800611a:	7bfb      	ldrb	r3, [r7, #15]
 800611c:	2b0f      	cmp	r3, #15
 800611e:	d136      	bne.n	800618e <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8006126:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800612a:	2b00      	cmp	r3, #0
 800612c:	d154      	bne.n	80061d8 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800612e:	7dbb      	ldrb	r3, [r7, #22]
 8006130:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006134:	2b00      	cmp	r3, #0
 8006136:	d00d      	beq.n	8006154 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6a1b      	ldr	r3, [r3, #32]
 800613c:	7b5b      	ldrb	r3, [r3, #13]
 800613e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8006140:	7dbb      	ldrb	r3, [r7, #22]
 8006142:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006146:	75bb      	strb	r3, [r7, #22]
 8006148:	7dbb      	ldrb	r3, [r7, #22]
 800614a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	695a      	ldr	r2, [r3, #20]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8006154:	7dba      	ldrb	r2, [r7, #22]
 8006156:	7d7b      	ldrb	r3, [r7, #21]
 8006158:	429a      	cmp	r2, r3
 800615a:	d115      	bne.n	8006188 <dir_find+0x106>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6a1b      	ldr	r3, [r3, #32]
 8006160:	330d      	adds	r3, #13
 8006162:	781b      	ldrb	r3, [r3, #0]
 8006164:	7d3a      	ldrb	r2, [r7, #20]
 8006166:	429a      	cmp	r2, r3
 8006168:	d10e      	bne.n	8006188 <dir_find+0x106>
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	691a      	ldr	r2, [r3, #16]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6a1b      	ldr	r3, [r3, #32]
 8006172:	4619      	mov	r1, r3
 8006174:	4610      	mov	r0, r2
 8006176:	f7ff fdfd 	bl	8005d74 <cmp_lfn>
 800617a:	4603      	mov	r3, r0
 800617c:	2b00      	cmp	r3, #0
 800617e:	d003      	beq.n	8006188 <dir_find+0x106>
 8006180:	7d7b      	ldrb	r3, [r7, #21]
 8006182:	3b01      	subs	r3, #1
 8006184:	b2db      	uxtb	r3, r3
 8006186:	e000      	b.n	800618a <dir_find+0x108>
 8006188:	23ff      	movs	r3, #255	@ 0xff
 800618a:	757b      	strb	r3, [r7, #21]
 800618c:	e024      	b.n	80061d8 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800618e:	7d7b      	ldrb	r3, [r7, #21]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d109      	bne.n	80061a8 <dir_find+0x126>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6a1b      	ldr	r3, [r3, #32]
 8006198:	4618      	mov	r0, r3
 800619a:	f7ff ff51 	bl	8006040 <sum_sfn>
 800619e:	4603      	mov	r3, r0
 80061a0:	461a      	mov	r2, r3
 80061a2:	7d3b      	ldrb	r3, [r7, #20]
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d024      	beq.n	80061f2 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80061ae:	f003 0301 	and.w	r3, r3, #1
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d10a      	bne.n	80061cc <dir_find+0x14a>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6a18      	ldr	r0, [r3, #32]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	3324      	adds	r3, #36	@ 0x24
 80061be:	220b      	movs	r2, #11
 80061c0:	4619      	mov	r1, r3
 80061c2:	f7fe fe20 	bl	8004e06 <mem_cmp>
 80061c6:	4603      	mov	r3, r0
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d014      	beq.n	80061f6 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80061cc:	23ff      	movs	r3, #255	@ 0xff
 80061ce:	757b      	strb	r3, [r7, #21]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f04f 32ff 	mov.w	r2, #4294967295
 80061d6:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80061d8:	2100      	movs	r1, #0
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f7ff fc6e 	bl	8005abc <dir_next>
 80061e0:	4603      	mov	r3, r0
 80061e2:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80061e4:	7dfb      	ldrb	r3, [r7, #23]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	f43f af65 	beq.w	80060b6 <dir_find+0x34>
 80061ec:	e004      	b.n	80061f8 <dir_find+0x176>
		if (res != FR_OK) break;
 80061ee:	bf00      	nop
 80061f0:	e002      	b.n	80061f8 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80061f2:	bf00      	nop
 80061f4:	e000      	b.n	80061f8 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80061f6:	bf00      	nop

	return res;
 80061f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3718      	adds	r7, #24
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}
	...

08006204 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b08c      	sub	sp, #48	@ 0x30
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8006218:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800621c:	2b00      	cmp	r3, #0
 800621e:	d001      	beq.n	8006224 <dir_register+0x20>
 8006220:	2306      	movs	r3, #6
 8006222:	e0e0      	b.n	80063e6 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8006224:	2300      	movs	r3, #0
 8006226:	627b      	str	r3, [r7, #36]	@ 0x24
 8006228:	e002      	b.n	8006230 <dir_register+0x2c>
 800622a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800622c:	3301      	adds	r3, #1
 800622e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006230:	69fb      	ldr	r3, [r7, #28]
 8006232:	691a      	ldr	r2, [r3, #16]
 8006234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006236:	005b      	lsls	r3, r3, #1
 8006238:	4413      	add	r3, r2
 800623a:	881b      	ldrh	r3, [r3, #0]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d1f4      	bne.n	800622a <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8006246:	f107 030c 	add.w	r3, r7, #12
 800624a:	220c      	movs	r2, #12
 800624c:	4618      	mov	r0, r3
 800624e:	f7fe fd9e 	bl	8004d8e <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8006252:	7dfb      	ldrb	r3, [r7, #23]
 8006254:	f003 0301 	and.w	r3, r3, #1
 8006258:	2b00      	cmp	r3, #0
 800625a:	d032      	beq.n	80062c2 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2240      	movs	r2, #64	@ 0x40
 8006260:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8006264:	2301      	movs	r3, #1
 8006266:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006268:	e016      	b.n	8006298 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8006270:	69fb      	ldr	r3, [r7, #28]
 8006272:	691a      	ldr	r2, [r3, #16]
 8006274:	f107 010c 	add.w	r1, r7, #12
 8006278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800627a:	f7ff fe53 	bl	8005f24 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f7ff feff 	bl	8006082 <dir_find>
 8006284:	4603      	mov	r3, r0
 8006286:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 800628a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800628e:	2b00      	cmp	r3, #0
 8006290:	d106      	bne.n	80062a0 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8006292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006294:	3301      	adds	r3, #1
 8006296:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800629a:	2b63      	cmp	r3, #99	@ 0x63
 800629c:	d9e5      	bls.n	800626a <dir_register+0x66>
 800629e:	e000      	b.n	80062a2 <dir_register+0x9e>
			if (res != FR_OK) break;
 80062a0:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80062a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062a4:	2b64      	cmp	r3, #100	@ 0x64
 80062a6:	d101      	bne.n	80062ac <dir_register+0xa8>
 80062a8:	2307      	movs	r3, #7
 80062aa:	e09c      	b.n	80063e6 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80062ac:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80062b0:	2b04      	cmp	r3, #4
 80062b2:	d002      	beq.n	80062ba <dir_register+0xb6>
 80062b4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80062b8:	e095      	b.n	80063e6 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80062ba:	7dfa      	ldrb	r2, [r7, #23]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80062c2:	7dfb      	ldrb	r3, [r7, #23]
 80062c4:	f003 0302 	and.w	r3, r3, #2
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d007      	beq.n	80062dc <dir_register+0xd8>
 80062cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ce:	330c      	adds	r3, #12
 80062d0:	4a47      	ldr	r2, [pc, #284]	@ (80063f0 <dir_register+0x1ec>)
 80062d2:	fba2 2303 	umull	r2, r3, r2, r3
 80062d6:	089b      	lsrs	r3, r3, #2
 80062d8:	3301      	adds	r3, #1
 80062da:	e000      	b.n	80062de <dir_register+0xda>
 80062dc:	2301      	movs	r3, #1
 80062de:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80062e0:	6a39      	ldr	r1, [r7, #32]
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f7ff fcc0 	bl	8005c68 <dir_alloc>
 80062e8:	4603      	mov	r3, r0
 80062ea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80062ee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d148      	bne.n	8006388 <dir_register+0x184>
 80062f6:	6a3b      	ldr	r3, [r7, #32]
 80062f8:	3b01      	subs	r3, #1
 80062fa:	623b      	str	r3, [r7, #32]
 80062fc:	6a3b      	ldr	r3, [r7, #32]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d042      	beq.n	8006388 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	695a      	ldr	r2, [r3, #20]
 8006306:	6a3b      	ldr	r3, [r7, #32]
 8006308:	015b      	lsls	r3, r3, #5
 800630a:	1ad3      	subs	r3, r2, r3
 800630c:	4619      	mov	r1, r3
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f7ff fb4b 	bl	80059aa <dir_sdi>
 8006314:	4603      	mov	r3, r0
 8006316:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800631a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800631e:	2b00      	cmp	r3, #0
 8006320:	d132      	bne.n	8006388 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	3324      	adds	r3, #36	@ 0x24
 8006326:	4618      	mov	r0, r3
 8006328:	f7ff fe8a 	bl	8006040 <sum_sfn>
 800632c:	4603      	mov	r3, r0
 800632e:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	69db      	ldr	r3, [r3, #28]
 8006334:	4619      	mov	r1, r3
 8006336:	69f8      	ldr	r0, [r7, #28]
 8006338:	f7fe ff58 	bl	80051ec <move_window>
 800633c:	4603      	mov	r3, r0
 800633e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 8006342:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006346:	2b00      	cmp	r3, #0
 8006348:	d11d      	bne.n	8006386 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800634a:	69fb      	ldr	r3, [r7, #28]
 800634c:	6918      	ldr	r0, [r3, #16]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6a19      	ldr	r1, [r3, #32]
 8006352:	6a3b      	ldr	r3, [r7, #32]
 8006354:	b2da      	uxtb	r2, r3
 8006356:	7efb      	ldrb	r3, [r7, #27]
 8006358:	f7ff fd7c 	bl	8005e54 <put_lfn>
				fs->wflag = 1;
 800635c:	69fb      	ldr	r3, [r7, #28]
 800635e:	2201      	movs	r2, #1
 8006360:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8006362:	2100      	movs	r1, #0
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f7ff fba9 	bl	8005abc <dir_next>
 800636a:	4603      	mov	r3, r0
 800636c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8006370:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006374:	2b00      	cmp	r3, #0
 8006376:	d107      	bne.n	8006388 <dir_register+0x184>
 8006378:	6a3b      	ldr	r3, [r7, #32]
 800637a:	3b01      	subs	r3, #1
 800637c:	623b      	str	r3, [r7, #32]
 800637e:	6a3b      	ldr	r3, [r7, #32]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d1d5      	bne.n	8006330 <dir_register+0x12c>
 8006384:	e000      	b.n	8006388 <dir_register+0x184>
				if (res != FR_OK) break;
 8006386:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006388:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800638c:	2b00      	cmp	r3, #0
 800638e:	d128      	bne.n	80063e2 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	69db      	ldr	r3, [r3, #28]
 8006394:	4619      	mov	r1, r3
 8006396:	69f8      	ldr	r0, [r7, #28]
 8006398:	f7fe ff28 	bl	80051ec <move_window>
 800639c:	4603      	mov	r3, r0
 800639e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 80063a2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d11b      	bne.n	80063e2 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6a1b      	ldr	r3, [r3, #32]
 80063ae:	2220      	movs	r2, #32
 80063b0:	2100      	movs	r1, #0
 80063b2:	4618      	mov	r0, r3
 80063b4:	f7fe fd0c 	bl	8004dd0 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6a18      	ldr	r0, [r3, #32]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	3324      	adds	r3, #36	@ 0x24
 80063c0:	220b      	movs	r2, #11
 80063c2:	4619      	mov	r1, r3
 80063c4:	f7fe fce3 	bl	8004d8e <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6a1b      	ldr	r3, [r3, #32]
 80063d2:	330c      	adds	r3, #12
 80063d4:	f002 0218 	and.w	r2, r2, #24
 80063d8:	b2d2      	uxtb	r2, r2
 80063da:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80063dc:	69fb      	ldr	r3, [r7, #28]
 80063de:	2201      	movs	r2, #1
 80063e0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80063e2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3730      	adds	r7, #48	@ 0x30
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}
 80063ee:	bf00      	nop
 80063f0:	4ec4ec4f 	.word	0x4ec4ec4f

080063f4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b08a      	sub	sp, #40	@ 0x28
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	613b      	str	r3, [r7, #16]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	691b      	ldr	r3, [r3, #16]
 800640a:	60fb      	str	r3, [r7, #12]
 800640c:	2300      	movs	r3, #0
 800640e:	617b      	str	r3, [r7, #20]
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8006414:	69bb      	ldr	r3, [r7, #24]
 8006416:	1c5a      	adds	r2, r3, #1
 8006418:	61ba      	str	r2, [r7, #24]
 800641a:	693a      	ldr	r2, [r7, #16]
 800641c:	4413      	add	r3, r2
 800641e:	781b      	ldrb	r3, [r3, #0]
 8006420:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8006422:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006424:	2b1f      	cmp	r3, #31
 8006426:	d940      	bls.n	80064aa <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8006428:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800642a:	2b2f      	cmp	r3, #47	@ 0x2f
 800642c:	d006      	beq.n	800643c <create_name+0x48>
 800642e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006430:	2b5c      	cmp	r3, #92	@ 0x5c
 8006432:	d110      	bne.n	8006456 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006434:	e002      	b.n	800643c <create_name+0x48>
 8006436:	69bb      	ldr	r3, [r7, #24]
 8006438:	3301      	adds	r3, #1
 800643a:	61bb      	str	r3, [r7, #24]
 800643c:	693a      	ldr	r2, [r7, #16]
 800643e:	69bb      	ldr	r3, [r7, #24]
 8006440:	4413      	add	r3, r2
 8006442:	781b      	ldrb	r3, [r3, #0]
 8006444:	2b2f      	cmp	r3, #47	@ 0x2f
 8006446:	d0f6      	beq.n	8006436 <create_name+0x42>
 8006448:	693a      	ldr	r2, [r7, #16]
 800644a:	69bb      	ldr	r3, [r7, #24]
 800644c:	4413      	add	r3, r2
 800644e:	781b      	ldrb	r3, [r3, #0]
 8006450:	2b5c      	cmp	r3, #92	@ 0x5c
 8006452:	d0f0      	beq.n	8006436 <create_name+0x42>
			break;
 8006454:	e02a      	b.n	80064ac <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	2bfe      	cmp	r3, #254	@ 0xfe
 800645a:	d901      	bls.n	8006460 <create_name+0x6c>
 800645c:	2306      	movs	r3, #6
 800645e:	e17d      	b.n	800675c <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8006460:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006462:	b2db      	uxtb	r3, r3
 8006464:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8006466:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006468:	2101      	movs	r1, #1
 800646a:	4618      	mov	r0, r3
 800646c:	f001 f9f6 	bl	800785c <ff_convert>
 8006470:	4603      	mov	r3, r0
 8006472:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8006474:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006476:	2b00      	cmp	r3, #0
 8006478:	d101      	bne.n	800647e <create_name+0x8a>
 800647a:	2306      	movs	r3, #6
 800647c:	e16e      	b.n	800675c <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800647e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006480:	2b7f      	cmp	r3, #127	@ 0x7f
 8006482:	d809      	bhi.n	8006498 <create_name+0xa4>
 8006484:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006486:	4619      	mov	r1, r3
 8006488:	488d      	ldr	r0, [pc, #564]	@ (80066c0 <create_name+0x2cc>)
 800648a:	f7fe fce3 	bl	8004e54 <chk_chr>
 800648e:	4603      	mov	r3, r0
 8006490:	2b00      	cmp	r3, #0
 8006492:	d001      	beq.n	8006498 <create_name+0xa4>
 8006494:	2306      	movs	r3, #6
 8006496:	e161      	b.n	800675c <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	1c5a      	adds	r2, r3, #1
 800649c:	617a      	str	r2, [r7, #20]
 800649e:	005b      	lsls	r3, r3, #1
 80064a0:	68fa      	ldr	r2, [r7, #12]
 80064a2:	4413      	add	r3, r2
 80064a4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80064a6:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80064a8:	e7b4      	b.n	8006414 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80064aa:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80064ac:	693a      	ldr	r2, [r7, #16]
 80064ae:	69bb      	ldr	r3, [r7, #24]
 80064b0:	441a      	add	r2, r3
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80064b6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80064b8:	2b1f      	cmp	r3, #31
 80064ba:	d801      	bhi.n	80064c0 <create_name+0xcc>
 80064bc:	2304      	movs	r3, #4
 80064be:	e000      	b.n	80064c2 <create_name+0xce>
 80064c0:	2300      	movs	r3, #0
 80064c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80064c6:	e011      	b.n	80064ec <create_name+0xf8>
		w = lfn[di - 1];
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80064ce:	3b01      	subs	r3, #1
 80064d0:	005b      	lsls	r3, r3, #1
 80064d2:	68fa      	ldr	r2, [r7, #12]
 80064d4:	4413      	add	r3, r2
 80064d6:	881b      	ldrh	r3, [r3, #0]
 80064d8:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 80064da:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80064dc:	2b20      	cmp	r3, #32
 80064de:	d002      	beq.n	80064e6 <create_name+0xf2>
 80064e0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80064e2:	2b2e      	cmp	r3, #46	@ 0x2e
 80064e4:	d106      	bne.n	80064f4 <create_name+0x100>
		di--;
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	3b01      	subs	r3, #1
 80064ea:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d1ea      	bne.n	80064c8 <create_name+0xd4>
 80064f2:	e000      	b.n	80064f6 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 80064f4:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	005b      	lsls	r3, r3, #1
 80064fa:	68fa      	ldr	r2, [r7, #12]
 80064fc:	4413      	add	r3, r2
 80064fe:	2200      	movs	r2, #0
 8006500:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d101      	bne.n	800650c <create_name+0x118>
 8006508:	2306      	movs	r3, #6
 800650a:	e127      	b.n	800675c <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	3324      	adds	r3, #36	@ 0x24
 8006510:	220b      	movs	r2, #11
 8006512:	2120      	movs	r1, #32
 8006514:	4618      	mov	r0, r3
 8006516:	f7fe fc5b 	bl	8004dd0 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800651a:	2300      	movs	r3, #0
 800651c:	61bb      	str	r3, [r7, #24]
 800651e:	e002      	b.n	8006526 <create_name+0x132>
 8006520:	69bb      	ldr	r3, [r7, #24]
 8006522:	3301      	adds	r3, #1
 8006524:	61bb      	str	r3, [r7, #24]
 8006526:	69bb      	ldr	r3, [r7, #24]
 8006528:	005b      	lsls	r3, r3, #1
 800652a:	68fa      	ldr	r2, [r7, #12]
 800652c:	4413      	add	r3, r2
 800652e:	881b      	ldrh	r3, [r3, #0]
 8006530:	2b20      	cmp	r3, #32
 8006532:	d0f5      	beq.n	8006520 <create_name+0x12c>
 8006534:	69bb      	ldr	r3, [r7, #24]
 8006536:	005b      	lsls	r3, r3, #1
 8006538:	68fa      	ldr	r2, [r7, #12]
 800653a:	4413      	add	r3, r2
 800653c:	881b      	ldrh	r3, [r3, #0]
 800653e:	2b2e      	cmp	r3, #46	@ 0x2e
 8006540:	d0ee      	beq.n	8006520 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8006542:	69bb      	ldr	r3, [r7, #24]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d009      	beq.n	800655c <create_name+0x168>
 8006548:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800654c:	f043 0303 	orr.w	r3, r3, #3
 8006550:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8006554:	e002      	b.n	800655c <create_name+0x168>
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	3b01      	subs	r3, #1
 800655a:	617b      	str	r3, [r7, #20]
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d009      	beq.n	8006576 <create_name+0x182>
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8006568:	3b01      	subs	r3, #1
 800656a:	005b      	lsls	r3, r3, #1
 800656c:	68fa      	ldr	r2, [r7, #12]
 800656e:	4413      	add	r3, r2
 8006570:	881b      	ldrh	r3, [r3, #0]
 8006572:	2b2e      	cmp	r3, #46	@ 0x2e
 8006574:	d1ef      	bne.n	8006556 <create_name+0x162>

	i = b = 0; ni = 8;
 8006576:	2300      	movs	r3, #0
 8006578:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800657c:	2300      	movs	r3, #0
 800657e:	623b      	str	r3, [r7, #32]
 8006580:	2308      	movs	r3, #8
 8006582:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8006584:	69bb      	ldr	r3, [r7, #24]
 8006586:	1c5a      	adds	r2, r3, #1
 8006588:	61ba      	str	r2, [r7, #24]
 800658a:	005b      	lsls	r3, r3, #1
 800658c:	68fa      	ldr	r2, [r7, #12]
 800658e:	4413      	add	r3, r2
 8006590:	881b      	ldrh	r3, [r3, #0]
 8006592:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8006594:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006596:	2b00      	cmp	r3, #0
 8006598:	f000 8090 	beq.w	80066bc <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800659c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800659e:	2b20      	cmp	r3, #32
 80065a0:	d006      	beq.n	80065b0 <create_name+0x1bc>
 80065a2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80065a4:	2b2e      	cmp	r3, #46	@ 0x2e
 80065a6:	d10a      	bne.n	80065be <create_name+0x1ca>
 80065a8:	69ba      	ldr	r2, [r7, #24]
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	429a      	cmp	r2, r3
 80065ae:	d006      	beq.n	80065be <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 80065b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80065b4:	f043 0303 	orr.w	r3, r3, #3
 80065b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80065bc:	e07d      	b.n	80066ba <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80065be:	6a3a      	ldr	r2, [r7, #32]
 80065c0:	69fb      	ldr	r3, [r7, #28]
 80065c2:	429a      	cmp	r2, r3
 80065c4:	d203      	bcs.n	80065ce <create_name+0x1da>
 80065c6:	69ba      	ldr	r2, [r7, #24]
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	429a      	cmp	r2, r3
 80065cc:	d123      	bne.n	8006616 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 80065ce:	69fb      	ldr	r3, [r7, #28]
 80065d0:	2b0b      	cmp	r3, #11
 80065d2:	d106      	bne.n	80065e2 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 80065d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80065d8:	f043 0303 	orr.w	r3, r3, #3
 80065dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80065e0:	e075      	b.n	80066ce <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80065e2:	69ba      	ldr	r2, [r7, #24]
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	429a      	cmp	r2, r3
 80065e8:	d005      	beq.n	80065f6 <create_name+0x202>
 80065ea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80065ee:	f043 0303 	orr.w	r3, r3, #3
 80065f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 80065f6:	69ba      	ldr	r2, [r7, #24]
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	429a      	cmp	r2, r3
 80065fc:	d866      	bhi.n	80066cc <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	61bb      	str	r3, [r7, #24]
 8006602:	2308      	movs	r3, #8
 8006604:	623b      	str	r3, [r7, #32]
 8006606:	230b      	movs	r3, #11
 8006608:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800660a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800660e:	009b      	lsls	r3, r3, #2
 8006610:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8006614:	e051      	b.n	80066ba <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8006616:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006618:	2b7f      	cmp	r3, #127	@ 0x7f
 800661a:	d914      	bls.n	8006646 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800661c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800661e:	2100      	movs	r1, #0
 8006620:	4618      	mov	r0, r3
 8006622:	f001 f91b 	bl	800785c <ff_convert>
 8006626:	4603      	mov	r3, r0
 8006628:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800662a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800662c:	2b00      	cmp	r3, #0
 800662e:	d004      	beq.n	800663a <create_name+0x246>
 8006630:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006632:	3b80      	subs	r3, #128	@ 0x80
 8006634:	4a23      	ldr	r2, [pc, #140]	@ (80066c4 <create_name+0x2d0>)
 8006636:	5cd3      	ldrb	r3, [r2, r3]
 8006638:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800663a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800663e:	f043 0302 	orr.w	r3, r3, #2
 8006642:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8006646:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006648:	2b00      	cmp	r3, #0
 800664a:	d007      	beq.n	800665c <create_name+0x268>
 800664c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800664e:	4619      	mov	r1, r3
 8006650:	481d      	ldr	r0, [pc, #116]	@ (80066c8 <create_name+0x2d4>)
 8006652:	f7fe fbff 	bl	8004e54 <chk_chr>
 8006656:	4603      	mov	r3, r0
 8006658:	2b00      	cmp	r3, #0
 800665a:	d008      	beq.n	800666e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800665c:	235f      	movs	r3, #95	@ 0x5f
 800665e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8006660:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006664:	f043 0303 	orr.w	r3, r3, #3
 8006668:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800666c:	e01b      	b.n	80066a6 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800666e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006670:	2b40      	cmp	r3, #64	@ 0x40
 8006672:	d909      	bls.n	8006688 <create_name+0x294>
 8006674:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006676:	2b5a      	cmp	r3, #90	@ 0x5a
 8006678:	d806      	bhi.n	8006688 <create_name+0x294>
					b |= 2;
 800667a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800667e:	f043 0302 	orr.w	r3, r3, #2
 8006682:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8006686:	e00e      	b.n	80066a6 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8006688:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800668a:	2b60      	cmp	r3, #96	@ 0x60
 800668c:	d90b      	bls.n	80066a6 <create_name+0x2b2>
 800668e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006690:	2b7a      	cmp	r3, #122	@ 0x7a
 8006692:	d808      	bhi.n	80066a6 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8006694:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006698:	f043 0301 	orr.w	r3, r3, #1
 800669c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80066a0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80066a2:	3b20      	subs	r3, #32
 80066a4:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80066a6:	6a3b      	ldr	r3, [r7, #32]
 80066a8:	1c5a      	adds	r2, r3, #1
 80066aa:	623a      	str	r2, [r7, #32]
 80066ac:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80066ae:	b2d1      	uxtb	r1, r2
 80066b0:	687a      	ldr	r2, [r7, #4]
 80066b2:	4413      	add	r3, r2
 80066b4:	460a      	mov	r2, r1
 80066b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 80066ba:	e763      	b.n	8006584 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 80066bc:	bf00      	nop
 80066be:	e006      	b.n	80066ce <create_name+0x2da>
 80066c0:	08007c48 	.word	0x08007c48
 80066c4:	08007cb0 	.word	0x08007cb0
 80066c8:	08007c54 	.word	0x08007c54
			if (si > di) break;			/* No extension */
 80066cc:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80066d4:	2be5      	cmp	r3, #229	@ 0xe5
 80066d6:	d103      	bne.n	80066e0 <create_name+0x2ec>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2205      	movs	r2, #5
 80066dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 80066e0:	69fb      	ldr	r3, [r7, #28]
 80066e2:	2b08      	cmp	r3, #8
 80066e4:	d104      	bne.n	80066f0 <create_name+0x2fc>
 80066e6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80066ea:	009b      	lsls	r3, r3, #2
 80066ec:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80066f0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80066f4:	f003 030c 	and.w	r3, r3, #12
 80066f8:	2b0c      	cmp	r3, #12
 80066fa:	d005      	beq.n	8006708 <create_name+0x314>
 80066fc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006700:	f003 0303 	and.w	r3, r3, #3
 8006704:	2b03      	cmp	r3, #3
 8006706:	d105      	bne.n	8006714 <create_name+0x320>
 8006708:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800670c:	f043 0302 	orr.w	r3, r3, #2
 8006710:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8006714:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006718:	f003 0302 	and.w	r3, r3, #2
 800671c:	2b00      	cmp	r3, #0
 800671e:	d117      	bne.n	8006750 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8006720:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006724:	f003 0303 	and.w	r3, r3, #3
 8006728:	2b01      	cmp	r3, #1
 800672a:	d105      	bne.n	8006738 <create_name+0x344>
 800672c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006730:	f043 0310 	orr.w	r3, r3, #16
 8006734:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8006738:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800673c:	f003 030c 	and.w	r3, r3, #12
 8006740:	2b04      	cmp	r3, #4
 8006742:	d105      	bne.n	8006750 <create_name+0x35c>
 8006744:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006748:	f043 0308 	orr.w	r3, r3, #8
 800674c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8006756:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 800675a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800675c:	4618      	mov	r0, r3
 800675e:	3728      	adds	r7, #40	@ 0x28
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}

08006764 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b086      	sub	sp, #24
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006778:	e002      	b.n	8006780 <follow_path+0x1c>
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	3301      	adds	r3, #1
 800677e:	603b      	str	r3, [r7, #0]
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	781b      	ldrb	r3, [r3, #0]
 8006784:	2b2f      	cmp	r3, #47	@ 0x2f
 8006786:	d0f8      	beq.n	800677a <follow_path+0x16>
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	781b      	ldrb	r3, [r3, #0]
 800678c:	2b5c      	cmp	r3, #92	@ 0x5c
 800678e:	d0f4      	beq.n	800677a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	2200      	movs	r2, #0
 8006794:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	781b      	ldrb	r3, [r3, #0]
 800679a:	2b1f      	cmp	r3, #31
 800679c:	d80a      	bhi.n	80067b4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2280      	movs	r2, #128	@ 0x80
 80067a2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 80067a6:	2100      	movs	r1, #0
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	f7ff f8fe 	bl	80059aa <dir_sdi>
 80067ae:	4603      	mov	r3, r0
 80067b0:	75fb      	strb	r3, [r7, #23]
 80067b2:	e048      	b.n	8006846 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80067b4:	463b      	mov	r3, r7
 80067b6:	4619      	mov	r1, r3
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	f7ff fe1b 	bl	80063f4 <create_name>
 80067be:	4603      	mov	r3, r0
 80067c0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80067c2:	7dfb      	ldrb	r3, [r7, #23]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d139      	bne.n	800683c <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f7ff fc5a 	bl	8006082 <dir_find>
 80067ce:	4603      	mov	r3, r0
 80067d0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80067d8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80067da:	7dfb      	ldrb	r3, [r7, #23]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d00a      	beq.n	80067f6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80067e0:	7dfb      	ldrb	r3, [r7, #23]
 80067e2:	2b04      	cmp	r3, #4
 80067e4:	d12c      	bne.n	8006840 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80067e6:	7afb      	ldrb	r3, [r7, #11]
 80067e8:	f003 0304 	and.w	r3, r3, #4
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d127      	bne.n	8006840 <follow_path+0xdc>
 80067f0:	2305      	movs	r3, #5
 80067f2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80067f4:	e024      	b.n	8006840 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80067f6:	7afb      	ldrb	r3, [r7, #11]
 80067f8:	f003 0304 	and.w	r3, r3, #4
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d121      	bne.n	8006844 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	799b      	ldrb	r3, [r3, #6]
 8006804:	f003 0310 	and.w	r3, r3, #16
 8006808:	2b00      	cmp	r3, #0
 800680a:	d102      	bne.n	8006812 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800680c:	2305      	movs	r3, #5
 800680e:	75fb      	strb	r3, [r7, #23]
 8006810:	e019      	b.n	8006846 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	695b      	ldr	r3, [r3, #20]
 800681c:	68fa      	ldr	r2, [r7, #12]
 800681e:	8992      	ldrh	r2, [r2, #12]
 8006820:	fbb3 f0f2 	udiv	r0, r3, r2
 8006824:	fb00 f202 	mul.w	r2, r0, r2
 8006828:	1a9b      	subs	r3, r3, r2
 800682a:	440b      	add	r3, r1
 800682c:	4619      	mov	r1, r3
 800682e:	68f8      	ldr	r0, [r7, #12]
 8006830:	f7ff fa61 	bl	8005cf6 <ld_clust>
 8006834:	4602      	mov	r2, r0
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800683a:	e7bb      	b.n	80067b4 <follow_path+0x50>
			if (res != FR_OK) break;
 800683c:	bf00      	nop
 800683e:	e002      	b.n	8006846 <follow_path+0xe2>
				break;
 8006840:	bf00      	nop
 8006842:	e000      	b.n	8006846 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006844:	bf00      	nop
			}
		}
	}

	return res;
 8006846:	7dfb      	ldrb	r3, [r7, #23]
}
 8006848:	4618      	mov	r0, r3
 800684a:	3718      	adds	r7, #24
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}

08006850 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006850:	b480      	push	{r7}
 8006852:	b087      	sub	sp, #28
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006858:	f04f 33ff 	mov.w	r3, #4294967295
 800685c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d031      	beq.n	80068ca <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	617b      	str	r3, [r7, #20]
 800686c:	e002      	b.n	8006874 <get_ldnumber+0x24>
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	3301      	adds	r3, #1
 8006872:	617b      	str	r3, [r7, #20]
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	781b      	ldrb	r3, [r3, #0]
 8006878:	2b1f      	cmp	r3, #31
 800687a:	d903      	bls.n	8006884 <get_ldnumber+0x34>
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	781b      	ldrb	r3, [r3, #0]
 8006880:	2b3a      	cmp	r3, #58	@ 0x3a
 8006882:	d1f4      	bne.n	800686e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	2b3a      	cmp	r3, #58	@ 0x3a
 800688a:	d11c      	bne.n	80068c6 <get_ldnumber+0x76>
			tp = *path;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	1c5a      	adds	r2, r3, #1
 8006896:	60fa      	str	r2, [r7, #12]
 8006898:	781b      	ldrb	r3, [r3, #0]
 800689a:	3b30      	subs	r3, #48	@ 0x30
 800689c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	2b09      	cmp	r3, #9
 80068a2:	d80e      	bhi.n	80068c2 <get_ldnumber+0x72>
 80068a4:	68fa      	ldr	r2, [r7, #12]
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	429a      	cmp	r2, r3
 80068aa:	d10a      	bne.n	80068c2 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d107      	bne.n	80068c2 <get_ldnumber+0x72>
					vol = (int)i;
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	3301      	adds	r3, #1
 80068ba:	617b      	str	r3, [r7, #20]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	697a      	ldr	r2, [r7, #20]
 80068c0:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	e002      	b.n	80068cc <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80068c6:	2300      	movs	r3, #0
 80068c8:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80068ca:	693b      	ldr	r3, [r7, #16]
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	371c      	adds	r7, #28
 80068d0:	46bd      	mov	sp, r7
 80068d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d6:	4770      	bx	lr

080068d8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b082      	sub	sp, #8
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
 80068e0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2200      	movs	r2, #0
 80068e6:	70da      	strb	r2, [r3, #3]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f04f 32ff 	mov.w	r2, #4294967295
 80068ee:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80068f0:	6839      	ldr	r1, [r7, #0]
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f7fe fc7a 	bl	80051ec <move_window>
 80068f8:	4603      	mov	r3, r0
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d001      	beq.n	8006902 <check_fs+0x2a>
 80068fe:	2304      	movs	r3, #4
 8006900:	e038      	b.n	8006974 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	3338      	adds	r3, #56	@ 0x38
 8006906:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800690a:	4618      	mov	r0, r3
 800690c:	f7fe f9bc 	bl	8004c88 <ld_word>
 8006910:	4603      	mov	r3, r0
 8006912:	461a      	mov	r2, r3
 8006914:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8006918:	429a      	cmp	r2, r3
 800691a:	d001      	beq.n	8006920 <check_fs+0x48>
 800691c:	2303      	movs	r3, #3
 800691e:	e029      	b.n	8006974 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006926:	2be9      	cmp	r3, #233	@ 0xe9
 8006928:	d009      	beq.n	800693e <check_fs+0x66>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006930:	2beb      	cmp	r3, #235	@ 0xeb
 8006932:	d11e      	bne.n	8006972 <check_fs+0x9a>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800693a:	2b90      	cmp	r3, #144	@ 0x90
 800693c:	d119      	bne.n	8006972 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	3338      	adds	r3, #56	@ 0x38
 8006942:	3336      	adds	r3, #54	@ 0x36
 8006944:	4618      	mov	r0, r3
 8006946:	f7fe f9b8 	bl	8004cba <ld_dword>
 800694a:	4603      	mov	r3, r0
 800694c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006950:	4a0a      	ldr	r2, [pc, #40]	@ (800697c <check_fs+0xa4>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d101      	bne.n	800695a <check_fs+0x82>
 8006956:	2300      	movs	r3, #0
 8006958:	e00c      	b.n	8006974 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	3338      	adds	r3, #56	@ 0x38
 800695e:	3352      	adds	r3, #82	@ 0x52
 8006960:	4618      	mov	r0, r3
 8006962:	f7fe f9aa 	bl	8004cba <ld_dword>
 8006966:	4603      	mov	r3, r0
 8006968:	4a05      	ldr	r2, [pc, #20]	@ (8006980 <check_fs+0xa8>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d101      	bne.n	8006972 <check_fs+0x9a>
 800696e:	2300      	movs	r3, #0
 8006970:	e000      	b.n	8006974 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8006972:	2302      	movs	r3, #2
}
 8006974:	4618      	mov	r0, r3
 8006976:	3708      	adds	r7, #8
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}
 800697c:	00544146 	.word	0x00544146
 8006980:	33544146 	.word	0x33544146

08006984 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b096      	sub	sp, #88	@ 0x58
 8006988:	af00      	add	r7, sp, #0
 800698a:	60f8      	str	r0, [r7, #12]
 800698c:	60b9      	str	r1, [r7, #8]
 800698e:	4613      	mov	r3, r2
 8006990:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	2200      	movs	r2, #0
 8006996:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006998:	68f8      	ldr	r0, [r7, #12]
 800699a:	f7ff ff59 	bl	8006850 <get_ldnumber>
 800699e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80069a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	da01      	bge.n	80069aa <find_volume+0x26>
 80069a6:	230b      	movs	r3, #11
 80069a8:	e265      	b.n	8006e76 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80069aa:	4a9f      	ldr	r2, [pc, #636]	@ (8006c28 <find_volume+0x2a4>)
 80069ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069b2:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80069b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d101      	bne.n	80069be <find_volume+0x3a>
 80069ba:	230c      	movs	r3, #12
 80069bc:	e25b      	b.n	8006e76 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80069c2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80069c4:	79fb      	ldrb	r3, [r7, #7]
 80069c6:	f023 0301 	bic.w	r3, r3, #1
 80069ca:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80069cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069ce:	781b      	ldrb	r3, [r3, #0]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d01a      	beq.n	8006a0a <find_volume+0x86>
		stat = disk_status(fs->drv);
 80069d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069d6:	785b      	ldrb	r3, [r3, #1]
 80069d8:	4618      	mov	r0, r3
 80069da:	f7fe f8b5 	bl	8004b48 <disk_status>
 80069de:	4603      	mov	r3, r0
 80069e0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80069e4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80069e8:	f003 0301 	and.w	r3, r3, #1
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d10c      	bne.n	8006a0a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80069f0:	79fb      	ldrb	r3, [r7, #7]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d007      	beq.n	8006a06 <find_volume+0x82>
 80069f6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80069fa:	f003 0304 	and.w	r3, r3, #4
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d001      	beq.n	8006a06 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8006a02:	230a      	movs	r3, #10
 8006a04:	e237      	b.n	8006e76 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8006a06:	2300      	movs	r3, #0
 8006a08:	e235      	b.n	8006e76 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006a0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006a10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a12:	b2da      	uxtb	r2, r3
 8006a14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a16:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006a18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a1a:	785b      	ldrb	r3, [r3, #1]
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f7fe f8ad 	bl	8004b7c <disk_initialize>
 8006a22:	4603      	mov	r3, r0
 8006a24:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006a28:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006a2c:	f003 0301 	and.w	r3, r3, #1
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d001      	beq.n	8006a38 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006a34:	2303      	movs	r3, #3
 8006a36:	e21e      	b.n	8006e76 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006a38:	79fb      	ldrb	r3, [r7, #7]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d007      	beq.n	8006a4e <find_volume+0xca>
 8006a3e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006a42:	f003 0304 	and.w	r3, r3, #4
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d001      	beq.n	8006a4e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8006a4a:	230a      	movs	r3, #10
 8006a4c:	e213      	b.n	8006e76 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8006a4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a50:	7858      	ldrb	r0, [r3, #1]
 8006a52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a54:	330c      	adds	r3, #12
 8006a56:	461a      	mov	r2, r3
 8006a58:	2102      	movs	r1, #2
 8006a5a:	f7fe f8f7 	bl	8004c4c <disk_ioctl>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d001      	beq.n	8006a68 <find_volume+0xe4>
 8006a64:	2301      	movs	r3, #1
 8006a66:	e206      	b.n	8006e76 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8006a68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a6a:	899b      	ldrh	r3, [r3, #12]
 8006a6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a70:	d80d      	bhi.n	8006a8e <find_volume+0x10a>
 8006a72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a74:	899b      	ldrh	r3, [r3, #12]
 8006a76:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a7a:	d308      	bcc.n	8006a8e <find_volume+0x10a>
 8006a7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a7e:	899b      	ldrh	r3, [r3, #12]
 8006a80:	461a      	mov	r2, r3
 8006a82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a84:	899b      	ldrh	r3, [r3, #12]
 8006a86:	3b01      	subs	r3, #1
 8006a88:	4013      	ands	r3, r2
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d001      	beq.n	8006a92 <find_volume+0x10e>
 8006a8e:	2301      	movs	r3, #1
 8006a90:	e1f1      	b.n	8006e76 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8006a92:	2300      	movs	r3, #0
 8006a94:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8006a96:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006a98:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006a9a:	f7ff ff1d 	bl	80068d8 <check_fs>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006aa4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006aa8:	2b02      	cmp	r3, #2
 8006aaa:	d149      	bne.n	8006b40 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006aac:	2300      	movs	r3, #0
 8006aae:	643b      	str	r3, [r7, #64]	@ 0x40
 8006ab0:	e01e      	b.n	8006af0 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8006ab2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ab4:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8006ab8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006aba:	011b      	lsls	r3, r3, #4
 8006abc:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8006ac0:	4413      	add	r3, r2
 8006ac2:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006ac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ac6:	3304      	adds	r3, #4
 8006ac8:	781b      	ldrb	r3, [r3, #0]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d006      	beq.n	8006adc <find_volume+0x158>
 8006ace:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ad0:	3308      	adds	r3, #8
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f7fe f8f1 	bl	8004cba <ld_dword>
 8006ad8:	4602      	mov	r2, r0
 8006ada:	e000      	b.n	8006ade <find_volume+0x15a>
 8006adc:	2200      	movs	r2, #0
 8006ade:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ae0:	009b      	lsls	r3, r3, #2
 8006ae2:	3358      	adds	r3, #88	@ 0x58
 8006ae4:	443b      	add	r3, r7
 8006ae6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006aea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006aec:	3301      	adds	r3, #1
 8006aee:	643b      	str	r3, [r7, #64]	@ 0x40
 8006af0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006af2:	2b03      	cmp	r3, #3
 8006af4:	d9dd      	bls.n	8006ab2 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8006af6:	2300      	movs	r3, #0
 8006af8:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8006afa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d002      	beq.n	8006b06 <find_volume+0x182>
 8006b00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b02:	3b01      	subs	r3, #1
 8006b04:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8006b06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b08:	009b      	lsls	r3, r3, #2
 8006b0a:	3358      	adds	r3, #88	@ 0x58
 8006b0c:	443b      	add	r3, r7
 8006b0e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006b12:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006b14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d005      	beq.n	8006b26 <find_volume+0x1a2>
 8006b1a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006b1c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006b1e:	f7ff fedb 	bl	80068d8 <check_fs>
 8006b22:	4603      	mov	r3, r0
 8006b24:	e000      	b.n	8006b28 <find_volume+0x1a4>
 8006b26:	2303      	movs	r3, #3
 8006b28:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006b2c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	d905      	bls.n	8006b40 <find_volume+0x1bc>
 8006b34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b36:	3301      	adds	r3, #1
 8006b38:	643b      	str	r3, [r7, #64]	@ 0x40
 8006b3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b3c:	2b03      	cmp	r3, #3
 8006b3e:	d9e2      	bls.n	8006b06 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006b40:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006b44:	2b04      	cmp	r3, #4
 8006b46:	d101      	bne.n	8006b4c <find_volume+0x1c8>
 8006b48:	2301      	movs	r3, #1
 8006b4a:	e194      	b.n	8006e76 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006b4c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006b50:	2b01      	cmp	r3, #1
 8006b52:	d901      	bls.n	8006b58 <find_volume+0x1d4>
 8006b54:	230d      	movs	r3, #13
 8006b56:	e18e      	b.n	8006e76 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006b58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b5a:	3338      	adds	r3, #56	@ 0x38
 8006b5c:	330b      	adds	r3, #11
 8006b5e:	4618      	mov	r0, r3
 8006b60:	f7fe f892 	bl	8004c88 <ld_word>
 8006b64:	4603      	mov	r3, r0
 8006b66:	461a      	mov	r2, r3
 8006b68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b6a:	899b      	ldrh	r3, [r3, #12]
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	d001      	beq.n	8006b74 <find_volume+0x1f0>
 8006b70:	230d      	movs	r3, #13
 8006b72:	e180      	b.n	8006e76 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006b74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b76:	3338      	adds	r3, #56	@ 0x38
 8006b78:	3316      	adds	r3, #22
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f7fe f884 	bl	8004c88 <ld_word>
 8006b80:	4603      	mov	r3, r0
 8006b82:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006b84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d106      	bne.n	8006b98 <find_volume+0x214>
 8006b8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b8c:	3338      	adds	r3, #56	@ 0x38
 8006b8e:	3324      	adds	r3, #36	@ 0x24
 8006b90:	4618      	mov	r0, r3
 8006b92:	f7fe f892 	bl	8004cba <ld_dword>
 8006b96:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8006b98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b9a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006b9c:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006b9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ba0:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8006ba4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ba6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006ba8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006baa:	789b      	ldrb	r3, [r3, #2]
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	d005      	beq.n	8006bbc <find_volume+0x238>
 8006bb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bb2:	789b      	ldrb	r3, [r3, #2]
 8006bb4:	2b02      	cmp	r3, #2
 8006bb6:	d001      	beq.n	8006bbc <find_volume+0x238>
 8006bb8:	230d      	movs	r3, #13
 8006bba:	e15c      	b.n	8006e76 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006bbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bbe:	789b      	ldrb	r3, [r3, #2]
 8006bc0:	461a      	mov	r2, r3
 8006bc2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006bc4:	fb02 f303 	mul.w	r3, r2, r3
 8006bc8:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006bca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bcc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006bd0:	461a      	mov	r2, r3
 8006bd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bd4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006bd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bd8:	895b      	ldrh	r3, [r3, #10]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d008      	beq.n	8006bf0 <find_volume+0x26c>
 8006bde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006be0:	895b      	ldrh	r3, [r3, #10]
 8006be2:	461a      	mov	r2, r3
 8006be4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006be6:	895b      	ldrh	r3, [r3, #10]
 8006be8:	3b01      	subs	r3, #1
 8006bea:	4013      	ands	r3, r2
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d001      	beq.n	8006bf4 <find_volume+0x270>
 8006bf0:	230d      	movs	r3, #13
 8006bf2:	e140      	b.n	8006e76 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006bf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bf6:	3338      	adds	r3, #56	@ 0x38
 8006bf8:	3311      	adds	r3, #17
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f7fe f844 	bl	8004c88 <ld_word>
 8006c00:	4603      	mov	r3, r0
 8006c02:	461a      	mov	r2, r3
 8006c04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c06:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006c08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c0a:	891b      	ldrh	r3, [r3, #8]
 8006c0c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006c0e:	8992      	ldrh	r2, [r2, #12]
 8006c10:	0952      	lsrs	r2, r2, #5
 8006c12:	b292      	uxth	r2, r2
 8006c14:	fbb3 f1f2 	udiv	r1, r3, r2
 8006c18:	fb01 f202 	mul.w	r2, r1, r2
 8006c1c:	1a9b      	subs	r3, r3, r2
 8006c1e:	b29b      	uxth	r3, r3
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d003      	beq.n	8006c2c <find_volume+0x2a8>
 8006c24:	230d      	movs	r3, #13
 8006c26:	e126      	b.n	8006e76 <find_volume+0x4f2>
 8006c28:	2000228c 	.word	0x2000228c

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006c2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c2e:	3338      	adds	r3, #56	@ 0x38
 8006c30:	3313      	adds	r3, #19
 8006c32:	4618      	mov	r0, r3
 8006c34:	f7fe f828 	bl	8004c88 <ld_word>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006c3c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d106      	bne.n	8006c50 <find_volume+0x2cc>
 8006c42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c44:	3338      	adds	r3, #56	@ 0x38
 8006c46:	3320      	adds	r3, #32
 8006c48:	4618      	mov	r0, r3
 8006c4a:	f7fe f836 	bl	8004cba <ld_dword>
 8006c4e:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8006c50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c52:	3338      	adds	r3, #56	@ 0x38
 8006c54:	330e      	adds	r3, #14
 8006c56:	4618      	mov	r0, r3
 8006c58:	f7fe f816 	bl	8004c88 <ld_word>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8006c60:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d101      	bne.n	8006c6a <find_volume+0x2e6>
 8006c66:	230d      	movs	r3, #13
 8006c68:	e105      	b.n	8006e76 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006c6a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8006c6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c6e:	4413      	add	r3, r2
 8006c70:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006c72:	8911      	ldrh	r1, [r2, #8]
 8006c74:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006c76:	8992      	ldrh	r2, [r2, #12]
 8006c78:	0952      	lsrs	r2, r2, #5
 8006c7a:	b292      	uxth	r2, r2
 8006c7c:	fbb1 f2f2 	udiv	r2, r1, r2
 8006c80:	b292      	uxth	r2, r2
 8006c82:	4413      	add	r3, r2
 8006c84:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8006c86:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006c88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d201      	bcs.n	8006c92 <find_volume+0x30e>
 8006c8e:	230d      	movs	r3, #13
 8006c90:	e0f1      	b.n	8006e76 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006c92:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006c94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c96:	1ad3      	subs	r3, r2, r3
 8006c98:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006c9a:	8952      	ldrh	r2, [r2, #10]
 8006c9c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ca0:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d101      	bne.n	8006cac <find_volume+0x328>
 8006ca8:	230d      	movs	r3, #13
 8006caa:	e0e4      	b.n	8006e76 <find_volume+0x4f2>
		fmt = FS_FAT32;
 8006cac:	2303      	movs	r3, #3
 8006cae:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8006cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cb4:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d802      	bhi.n	8006cc2 <find_volume+0x33e>
 8006cbc:	2302      	movs	r3, #2
 8006cbe:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8006cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cc4:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d802      	bhi.n	8006cd2 <find_volume+0x34e>
 8006ccc:	2301      	movs	r3, #1
 8006cce:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cd4:	1c9a      	adds	r2, r3, #2
 8006cd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cd8:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8006cda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cdc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006cde:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006ce0:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8006ce2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ce4:	441a      	add	r2, r3
 8006ce6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ce8:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8006cea:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006cec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cee:	441a      	add	r2, r3
 8006cf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cf2:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 8006cf4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006cf8:	2b03      	cmp	r3, #3
 8006cfa:	d11e      	bne.n	8006d3a <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006cfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cfe:	3338      	adds	r3, #56	@ 0x38
 8006d00:	332a      	adds	r3, #42	@ 0x2a
 8006d02:	4618      	mov	r0, r3
 8006d04:	f7fd ffc0 	bl	8004c88 <ld_word>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d001      	beq.n	8006d12 <find_volume+0x38e>
 8006d0e:	230d      	movs	r3, #13
 8006d10:	e0b1      	b.n	8006e76 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8006d12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d14:	891b      	ldrh	r3, [r3, #8]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d001      	beq.n	8006d1e <find_volume+0x39a>
 8006d1a:	230d      	movs	r3, #13
 8006d1c:	e0ab      	b.n	8006e76 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006d1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d20:	3338      	adds	r3, #56	@ 0x38
 8006d22:	332c      	adds	r3, #44	@ 0x2c
 8006d24:	4618      	mov	r0, r3
 8006d26:	f7fd ffc8 	bl	8004cba <ld_dword>
 8006d2a:	4602      	mov	r2, r0
 8006d2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d2e:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8006d30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d32:	69db      	ldr	r3, [r3, #28]
 8006d34:	009b      	lsls	r3, r3, #2
 8006d36:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d38:	e01f      	b.n	8006d7a <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006d3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d3c:	891b      	ldrh	r3, [r3, #8]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d101      	bne.n	8006d46 <find_volume+0x3c2>
 8006d42:	230d      	movs	r3, #13
 8006d44:	e097      	b.n	8006e76 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006d46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d48:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006d4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d4c:	441a      	add	r2, r3
 8006d4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d50:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006d52:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006d56:	2b02      	cmp	r3, #2
 8006d58:	d103      	bne.n	8006d62 <find_volume+0x3de>
 8006d5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d5c:	69db      	ldr	r3, [r3, #28]
 8006d5e:	005b      	lsls	r3, r3, #1
 8006d60:	e00a      	b.n	8006d78 <find_volume+0x3f4>
 8006d62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d64:	69da      	ldr	r2, [r3, #28]
 8006d66:	4613      	mov	r3, r2
 8006d68:	005b      	lsls	r3, r3, #1
 8006d6a:	4413      	add	r3, r2
 8006d6c:	085a      	lsrs	r2, r3, #1
 8006d6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d70:	69db      	ldr	r3, [r3, #28]
 8006d72:	f003 0301 	and.w	r3, r3, #1
 8006d76:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8006d78:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006d7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d7c:	6a1a      	ldr	r2, [r3, #32]
 8006d7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d80:	899b      	ldrh	r3, [r3, #12]
 8006d82:	4619      	mov	r1, r3
 8006d84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d86:	440b      	add	r3, r1
 8006d88:	3b01      	subs	r3, #1
 8006d8a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006d8c:	8989      	ldrh	r1, [r1, #12]
 8006d8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006d92:	429a      	cmp	r2, r3
 8006d94:	d201      	bcs.n	8006d9a <find_volume+0x416>
 8006d96:	230d      	movs	r3, #13
 8006d98:	e06d      	b.n	8006e76 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006d9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d9c:	f04f 32ff 	mov.w	r2, #4294967295
 8006da0:	619a      	str	r2, [r3, #24]
 8006da2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006da4:	699a      	ldr	r2, [r3, #24]
 8006da6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006da8:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8006daa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dac:	2280      	movs	r2, #128	@ 0x80
 8006dae:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8006db0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006db4:	2b03      	cmp	r3, #3
 8006db6:	d149      	bne.n	8006e4c <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006db8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dba:	3338      	adds	r3, #56	@ 0x38
 8006dbc:	3330      	adds	r3, #48	@ 0x30
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f7fd ff62 	bl	8004c88 <ld_word>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	2b01      	cmp	r3, #1
 8006dc8:	d140      	bne.n	8006e4c <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8006dca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006dcc:	3301      	adds	r3, #1
 8006dce:	4619      	mov	r1, r3
 8006dd0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006dd2:	f7fe fa0b 	bl	80051ec <move_window>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d137      	bne.n	8006e4c <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8006ddc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dde:	2200      	movs	r2, #0
 8006de0:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006de2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006de4:	3338      	adds	r3, #56	@ 0x38
 8006de6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8006dea:	4618      	mov	r0, r3
 8006dec:	f7fd ff4c 	bl	8004c88 <ld_word>
 8006df0:	4603      	mov	r3, r0
 8006df2:	461a      	mov	r2, r3
 8006df4:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8006df8:	429a      	cmp	r2, r3
 8006dfa:	d127      	bne.n	8006e4c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006dfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dfe:	3338      	adds	r3, #56	@ 0x38
 8006e00:	4618      	mov	r0, r3
 8006e02:	f7fd ff5a 	bl	8004cba <ld_dword>
 8006e06:	4603      	mov	r3, r0
 8006e08:	4a1d      	ldr	r2, [pc, #116]	@ (8006e80 <find_volume+0x4fc>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d11e      	bne.n	8006e4c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006e0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e10:	3338      	adds	r3, #56	@ 0x38
 8006e12:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8006e16:	4618      	mov	r0, r3
 8006e18:	f7fd ff4f 	bl	8004cba <ld_dword>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	4a19      	ldr	r2, [pc, #100]	@ (8006e84 <find_volume+0x500>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d113      	bne.n	8006e4c <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8006e24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e26:	3338      	adds	r3, #56	@ 0x38
 8006e28:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	f7fd ff44 	bl	8004cba <ld_dword>
 8006e32:	4602      	mov	r2, r0
 8006e34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e36:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006e38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e3a:	3338      	adds	r3, #56	@ 0x38
 8006e3c:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8006e40:	4618      	mov	r0, r3
 8006e42:	f7fd ff3a 	bl	8004cba <ld_dword>
 8006e46:	4602      	mov	r2, r0
 8006e48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e4a:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8006e4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e4e:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8006e52:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8006e54:	4b0c      	ldr	r3, [pc, #48]	@ (8006e88 <find_volume+0x504>)
 8006e56:	881b      	ldrh	r3, [r3, #0]
 8006e58:	3301      	adds	r3, #1
 8006e5a:	b29a      	uxth	r2, r3
 8006e5c:	4b0a      	ldr	r3, [pc, #40]	@ (8006e88 <find_volume+0x504>)
 8006e5e:	801a      	strh	r2, [r3, #0]
 8006e60:	4b09      	ldr	r3, [pc, #36]	@ (8006e88 <find_volume+0x504>)
 8006e62:	881a      	ldrh	r2, [r3, #0]
 8006e64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e66:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8006e68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e6a:	4a08      	ldr	r2, [pc, #32]	@ (8006e8c <find_volume+0x508>)
 8006e6c:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8006e6e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006e70:	f7fe f954 	bl	800511c <clear_lock>
#endif
	return FR_OK;
 8006e74:	2300      	movs	r3, #0
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	3758      	adds	r7, #88	@ 0x58
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}
 8006e7e:	bf00      	nop
 8006e80:	41615252 	.word	0x41615252
 8006e84:	61417272 	.word	0x61417272
 8006e88:	20002290 	.word	0x20002290
 8006e8c:	200022b4 	.word	0x200022b4

08006e90 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b084      	sub	sp, #16
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
 8006e98:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8006e9a:	2309      	movs	r3, #9
 8006e9c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d01c      	beq.n	8006ede <validate+0x4e>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d018      	beq.n	8006ede <validate+0x4e>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	781b      	ldrb	r3, [r3, #0]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d013      	beq.n	8006ede <validate+0x4e>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	889a      	ldrh	r2, [r3, #4]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	88db      	ldrh	r3, [r3, #6]
 8006ec0:	429a      	cmp	r2, r3
 8006ec2:	d10c      	bne.n	8006ede <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	785b      	ldrb	r3, [r3, #1]
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f7fd fe3c 	bl	8004b48 <disk_status>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	f003 0301 	and.w	r3, r3, #1
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d101      	bne.n	8006ede <validate+0x4e>
			res = FR_OK;
 8006eda:	2300      	movs	r3, #0
 8006edc:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006ede:	7bfb      	ldrb	r3, [r7, #15]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d102      	bne.n	8006eea <validate+0x5a>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	e000      	b.n	8006eec <validate+0x5c>
 8006eea:	2300      	movs	r3, #0
 8006eec:	683a      	ldr	r2, [r7, #0]
 8006eee:	6013      	str	r3, [r2, #0]
	return res;
 8006ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	3710      	adds	r7, #16
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}
	...

08006efc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b088      	sub	sp, #32
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	60f8      	str	r0, [r7, #12]
 8006f04:	60b9      	str	r1, [r7, #8]
 8006f06:	4613      	mov	r3, r2
 8006f08:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8006f0e:	f107 0310 	add.w	r3, r7, #16
 8006f12:	4618      	mov	r0, r3
 8006f14:	f7ff fc9c 	bl	8006850 <get_ldnumber>
 8006f18:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006f1a:	69fb      	ldr	r3, [r7, #28]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	da01      	bge.n	8006f24 <f_mount+0x28>
 8006f20:	230b      	movs	r3, #11
 8006f22:	e02b      	b.n	8006f7c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006f24:	4a17      	ldr	r2, [pc, #92]	@ (8006f84 <f_mount+0x88>)
 8006f26:	69fb      	ldr	r3, [r7, #28]
 8006f28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f2c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006f2e:	69bb      	ldr	r3, [r7, #24]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d005      	beq.n	8006f40 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8006f34:	69b8      	ldr	r0, [r7, #24]
 8006f36:	f7fe f8f1 	bl	800511c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006f3a:	69bb      	ldr	r3, [r7, #24]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d002      	beq.n	8006f4c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006f4c:	68fa      	ldr	r2, [r7, #12]
 8006f4e:	490d      	ldr	r1, [pc, #52]	@ (8006f84 <f_mount+0x88>)
 8006f50:	69fb      	ldr	r3, [r7, #28]
 8006f52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d002      	beq.n	8006f62 <f_mount+0x66>
 8006f5c:	79fb      	ldrb	r3, [r7, #7]
 8006f5e:	2b01      	cmp	r3, #1
 8006f60:	d001      	beq.n	8006f66 <f_mount+0x6a>
 8006f62:	2300      	movs	r3, #0
 8006f64:	e00a      	b.n	8006f7c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006f66:	f107 010c 	add.w	r1, r7, #12
 8006f6a:	f107 0308 	add.w	r3, r7, #8
 8006f6e:	2200      	movs	r2, #0
 8006f70:	4618      	mov	r0, r3
 8006f72:	f7ff fd07 	bl	8006984 <find_volume>
 8006f76:	4603      	mov	r3, r0
 8006f78:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8006f7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3720      	adds	r7, #32
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}
 8006f84:	2000228c 	.word	0x2000228c

08006f88 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b09a      	sub	sp, #104	@ 0x68
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	60f8      	str	r0, [r7, #12]
 8006f90:	60b9      	str	r1, [r7, #8]
 8006f92:	4613      	mov	r3, r2
 8006f94:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d101      	bne.n	8006fa0 <f_open+0x18>
 8006f9c:	2309      	movs	r3, #9
 8006f9e:	e1b7      	b.n	8007310 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8006fa0:	79fb      	ldrb	r3, [r7, #7]
 8006fa2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006fa6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8006fa8:	79fa      	ldrb	r2, [r7, #7]
 8006faa:	f107 0114 	add.w	r1, r7, #20
 8006fae:	f107 0308 	add.w	r3, r7, #8
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	f7ff fce6 	bl	8006984 <find_volume>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 8006fbe:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	f040 819b 	bne.w	80072fe <f_open+0x376>
		dj.obj.fs = fs;
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8006fcc:	68ba      	ldr	r2, [r7, #8]
 8006fce:	f107 0318 	add.w	r3, r7, #24
 8006fd2:	4611      	mov	r1, r2
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	f7ff fbc5 	bl	8006764 <follow_path>
 8006fda:	4603      	mov	r3, r0
 8006fdc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8006fe0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d118      	bne.n	800701a <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8006fe8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8006fec:	b25b      	sxtb	r3, r3
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	da03      	bge.n	8006ffa <f_open+0x72>
				res = FR_INVALID_NAME;
 8006ff2:	2306      	movs	r3, #6
 8006ff4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8006ff8:	e00f      	b.n	800701a <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006ffa:	79fb      	ldrb	r3, [r7, #7]
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	bf8c      	ite	hi
 8007000:	2301      	movhi	r3, #1
 8007002:	2300      	movls	r3, #0
 8007004:	b2db      	uxtb	r3, r3
 8007006:	461a      	mov	r2, r3
 8007008:	f107 0318 	add.w	r3, r7, #24
 800700c:	4611      	mov	r1, r2
 800700e:	4618      	mov	r0, r3
 8007010:	f7fd ff3c 	bl	8004e8c <chk_lock>
 8007014:	4603      	mov	r3, r0
 8007016:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800701a:	79fb      	ldrb	r3, [r7, #7]
 800701c:	f003 031c 	and.w	r3, r3, #28
 8007020:	2b00      	cmp	r3, #0
 8007022:	d07f      	beq.n	8007124 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8007024:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007028:	2b00      	cmp	r3, #0
 800702a:	d017      	beq.n	800705c <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800702c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007030:	2b04      	cmp	r3, #4
 8007032:	d10e      	bne.n	8007052 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007034:	f7fd ff86 	bl	8004f44 <enq_lock>
 8007038:	4603      	mov	r3, r0
 800703a:	2b00      	cmp	r3, #0
 800703c:	d006      	beq.n	800704c <f_open+0xc4>
 800703e:	f107 0318 	add.w	r3, r7, #24
 8007042:	4618      	mov	r0, r3
 8007044:	f7ff f8de 	bl	8006204 <dir_register>
 8007048:	4603      	mov	r3, r0
 800704a:	e000      	b.n	800704e <f_open+0xc6>
 800704c:	2312      	movs	r3, #18
 800704e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007052:	79fb      	ldrb	r3, [r7, #7]
 8007054:	f043 0308 	orr.w	r3, r3, #8
 8007058:	71fb      	strb	r3, [r7, #7]
 800705a:	e010      	b.n	800707e <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800705c:	7fbb      	ldrb	r3, [r7, #30]
 800705e:	f003 0311 	and.w	r3, r3, #17
 8007062:	2b00      	cmp	r3, #0
 8007064:	d003      	beq.n	800706e <f_open+0xe6>
					res = FR_DENIED;
 8007066:	2307      	movs	r3, #7
 8007068:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800706c:	e007      	b.n	800707e <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800706e:	79fb      	ldrb	r3, [r7, #7]
 8007070:	f003 0304 	and.w	r3, r3, #4
 8007074:	2b00      	cmp	r3, #0
 8007076:	d002      	beq.n	800707e <f_open+0xf6>
 8007078:	2308      	movs	r3, #8
 800707a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800707e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007082:	2b00      	cmp	r3, #0
 8007084:	d168      	bne.n	8007158 <f_open+0x1d0>
 8007086:	79fb      	ldrb	r3, [r7, #7]
 8007088:	f003 0308 	and.w	r3, r3, #8
 800708c:	2b00      	cmp	r3, #0
 800708e:	d063      	beq.n	8007158 <f_open+0x1d0>
				dw = GET_FATTIME();
 8007090:	f7fd fcfc 	bl	8004a8c <get_fattime>
 8007094:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8007096:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007098:	330e      	adds	r3, #14
 800709a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800709c:	4618      	mov	r0, r3
 800709e:	f7fd fe4a 	bl	8004d36 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80070a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070a4:	3316      	adds	r3, #22
 80070a6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80070a8:	4618      	mov	r0, r3
 80070aa:	f7fd fe44 	bl	8004d36 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80070ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070b0:	330b      	adds	r3, #11
 80070b2:	2220      	movs	r2, #32
 80070b4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80070ba:	4611      	mov	r1, r2
 80070bc:	4618      	mov	r0, r3
 80070be:	f7fe fe1a 	bl	8005cf6 <ld_clust>
 80070c2:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80070c8:	2200      	movs	r2, #0
 80070ca:	4618      	mov	r0, r3
 80070cc:	f7fe fe32 	bl	8005d34 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80070d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070d2:	331c      	adds	r3, #28
 80070d4:	2100      	movs	r1, #0
 80070d6:	4618      	mov	r0, r3
 80070d8:	f7fd fe2d 	bl	8004d36 <st_dword>
					fs->wflag = 1;
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	2201      	movs	r2, #1
 80070e0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80070e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d037      	beq.n	8007158 <f_open+0x1d0>
						dw = fs->winsect;
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070ec:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 80070ee:	f107 0318 	add.w	r3, r7, #24
 80070f2:	2200      	movs	r2, #0
 80070f4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80070f6:	4618      	mov	r0, r3
 80070f8:	f7fe fb22 	bl	8005740 <remove_chain>
 80070fc:	4603      	mov	r3, r0
 80070fe:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 8007102:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007106:	2b00      	cmp	r3, #0
 8007108:	d126      	bne.n	8007158 <f_open+0x1d0>
							res = move_window(fs, dw);
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800710e:	4618      	mov	r0, r3
 8007110:	f7fe f86c 	bl	80051ec <move_window>
 8007114:	4603      	mov	r3, r0
 8007116:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800711e:	3a01      	subs	r2, #1
 8007120:	615a      	str	r2, [r3, #20]
 8007122:	e019      	b.n	8007158 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8007124:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007128:	2b00      	cmp	r3, #0
 800712a:	d115      	bne.n	8007158 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800712c:	7fbb      	ldrb	r3, [r7, #30]
 800712e:	f003 0310 	and.w	r3, r3, #16
 8007132:	2b00      	cmp	r3, #0
 8007134:	d003      	beq.n	800713e <f_open+0x1b6>
					res = FR_NO_FILE;
 8007136:	2304      	movs	r3, #4
 8007138:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800713c:	e00c      	b.n	8007158 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800713e:	79fb      	ldrb	r3, [r7, #7]
 8007140:	f003 0302 	and.w	r3, r3, #2
 8007144:	2b00      	cmp	r3, #0
 8007146:	d007      	beq.n	8007158 <f_open+0x1d0>
 8007148:	7fbb      	ldrb	r3, [r7, #30]
 800714a:	f003 0301 	and.w	r3, r3, #1
 800714e:	2b00      	cmp	r3, #0
 8007150:	d002      	beq.n	8007158 <f_open+0x1d0>
						res = FR_DENIED;
 8007152:	2307      	movs	r3, #7
 8007154:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8007158:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800715c:	2b00      	cmp	r3, #0
 800715e:	d126      	bne.n	80071ae <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007160:	79fb      	ldrb	r3, [r7, #7]
 8007162:	f003 0308 	and.w	r3, r3, #8
 8007166:	2b00      	cmp	r3, #0
 8007168:	d003      	beq.n	8007172 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800716a:	79fb      	ldrb	r3, [r7, #7]
 800716c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007170:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800717a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007180:	79fb      	ldrb	r3, [r7, #7]
 8007182:	2b01      	cmp	r3, #1
 8007184:	bf8c      	ite	hi
 8007186:	2301      	movhi	r3, #1
 8007188:	2300      	movls	r3, #0
 800718a:	b2db      	uxtb	r3, r3
 800718c:	461a      	mov	r2, r3
 800718e:	f107 0318 	add.w	r3, r7, #24
 8007192:	4611      	mov	r1, r2
 8007194:	4618      	mov	r0, r3
 8007196:	f7fd fef7 	bl	8004f88 <inc_lock>
 800719a:	4602      	mov	r2, r0
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	691b      	ldr	r3, [r3, #16]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d102      	bne.n	80071ae <f_open+0x226>
 80071a8:	2302      	movs	r3, #2
 80071aa:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 80071ae:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	f040 80a3 	bne.w	80072fe <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80071bc:	4611      	mov	r1, r2
 80071be:	4618      	mov	r0, r3
 80071c0:	f7fe fd99 	bl	8005cf6 <ld_clust>
 80071c4:	4602      	mov	r2, r0
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80071ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071cc:	331c      	adds	r3, #28
 80071ce:	4618      	mov	r0, r3
 80071d0:	f7fd fd73 	bl	8004cba <ld_dword>
 80071d4:	4602      	mov	r2, r0
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	2200      	movs	r2, #0
 80071de:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80071e0:	697a      	ldr	r2, [r7, #20]
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	88da      	ldrh	r2, [r3, #6]
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	79fa      	ldrb	r2, [r7, #7]
 80071f2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	2200      	movs	r2, #0
 80071f8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2200      	movs	r2, #0
 80071fe:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	2200      	movs	r2, #0
 8007204:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	3330      	adds	r3, #48	@ 0x30
 800720a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800720e:	2100      	movs	r1, #0
 8007210:	4618      	mov	r0, r3
 8007212:	f7fd fddd 	bl	8004dd0 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8007216:	79fb      	ldrb	r3, [r7, #7]
 8007218:	f003 0320 	and.w	r3, r3, #32
 800721c:	2b00      	cmp	r3, #0
 800721e:	d06e      	beq.n	80072fe <f_open+0x376>
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	68db      	ldr	r3, [r3, #12]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d06a      	beq.n	80072fe <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	68da      	ldr	r2, [r3, #12]
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	895b      	ldrh	r3, [r3, #10]
 8007234:	461a      	mov	r2, r3
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	899b      	ldrh	r3, [r3, #12]
 800723a:	fb02 f303 	mul.w	r3, r2, r3
 800723e:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	689b      	ldr	r3, [r3, #8]
 8007244:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	68db      	ldr	r3, [r3, #12]
 800724a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800724c:	e016      	b.n	800727c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8007252:	4618      	mov	r0, r3
 8007254:	f7fe f887 	bl	8005366 <get_fat>
 8007258:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800725a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800725c:	2b01      	cmp	r3, #1
 800725e:	d802      	bhi.n	8007266 <f_open+0x2de>
 8007260:	2302      	movs	r3, #2
 8007262:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007266:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800726c:	d102      	bne.n	8007274 <f_open+0x2ec>
 800726e:	2301      	movs	r3, #1
 8007270:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007274:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007276:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007278:	1ad3      	subs	r3, r2, r3
 800727a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800727c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007280:	2b00      	cmp	r3, #0
 8007282:	d103      	bne.n	800728c <f_open+0x304>
 8007284:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007286:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007288:	429a      	cmp	r2, r3
 800728a:	d8e0      	bhi.n	800724e <f_open+0x2c6>
				}
				fp->clust = clst;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007290:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007292:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007296:	2b00      	cmp	r3, #0
 8007298:	d131      	bne.n	80072fe <f_open+0x376>
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	899b      	ldrh	r3, [r3, #12]
 800729e:	461a      	mov	r2, r3
 80072a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80072a2:	fbb3 f1f2 	udiv	r1, r3, r2
 80072a6:	fb01 f202 	mul.w	r2, r1, r2
 80072aa:	1a9b      	subs	r3, r3, r2
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d026      	beq.n	80072fe <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80072b4:	4618      	mov	r0, r3
 80072b6:	f7fe f837 	bl	8005328 <clust2sect>
 80072ba:	64f8      	str	r0, [r7, #76]	@ 0x4c
 80072bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d103      	bne.n	80072ca <f_open+0x342>
						res = FR_INT_ERR;
 80072c2:	2302      	movs	r3, #2
 80072c4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80072c8:	e019      	b.n	80072fe <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	899b      	ldrh	r3, [r3, #12]
 80072ce:	461a      	mov	r2, r3
 80072d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80072d2:	fbb3 f2f2 	udiv	r2, r3, r2
 80072d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80072d8:	441a      	add	r2, r3
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	7858      	ldrb	r0, [r3, #1]
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	6a1a      	ldr	r2, [r3, #32]
 80072ec:	2301      	movs	r3, #1
 80072ee:	f7fd fc6d 	bl	8004bcc <disk_read>
 80072f2:	4603      	mov	r3, r0
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d002      	beq.n	80072fe <f_open+0x376>
 80072f8:	2301      	movs	r3, #1
 80072fa:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80072fe:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007302:	2b00      	cmp	r3, #0
 8007304:	d002      	beq.n	800730c <f_open+0x384>
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2200      	movs	r2, #0
 800730a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800730c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8007310:	4618      	mov	r0, r3
 8007312:	3768      	adds	r7, #104	@ 0x68
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}

08007318 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b08e      	sub	sp, #56	@ 0x38
 800731c:	af00      	add	r7, sp, #0
 800731e:	60f8      	str	r0, [r7, #12]
 8007320:	60b9      	str	r1, [r7, #8]
 8007322:	607a      	str	r2, [r7, #4]
 8007324:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	2200      	movs	r2, #0
 800732e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	f107 0214 	add.w	r2, r7, #20
 8007336:	4611      	mov	r1, r2
 8007338:	4618      	mov	r0, r3
 800733a:	f7ff fda9 	bl	8006e90 <validate>
 800733e:	4603      	mov	r3, r0
 8007340:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007344:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007348:	2b00      	cmp	r3, #0
 800734a:	d107      	bne.n	800735c <f_read+0x44>
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	7d5b      	ldrb	r3, [r3, #21]
 8007350:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8007354:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007358:	2b00      	cmp	r3, #0
 800735a:	d002      	beq.n	8007362 <f_read+0x4a>
 800735c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007360:	e135      	b.n	80075ce <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	7d1b      	ldrb	r3, [r3, #20]
 8007366:	f003 0301 	and.w	r3, r3, #1
 800736a:	2b00      	cmp	r3, #0
 800736c:	d101      	bne.n	8007372 <f_read+0x5a>
 800736e:	2307      	movs	r3, #7
 8007370:	e12d      	b.n	80075ce <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	68da      	ldr	r2, [r3, #12]
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	699b      	ldr	r3, [r3, #24]
 800737a:	1ad3      	subs	r3, r2, r3
 800737c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800737e:	687a      	ldr	r2, [r7, #4]
 8007380:	6a3b      	ldr	r3, [r7, #32]
 8007382:	429a      	cmp	r2, r3
 8007384:	f240 811e 	bls.w	80075c4 <f_read+0x2ac>
 8007388:	6a3b      	ldr	r3, [r7, #32]
 800738a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800738c:	e11a      	b.n	80075c4 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	699b      	ldr	r3, [r3, #24]
 8007392:	697a      	ldr	r2, [r7, #20]
 8007394:	8992      	ldrh	r2, [r2, #12]
 8007396:	fbb3 f1f2 	udiv	r1, r3, r2
 800739a:	fb01 f202 	mul.w	r2, r1, r2
 800739e:	1a9b      	subs	r3, r3, r2
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	f040 80d5 	bne.w	8007550 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	699b      	ldr	r3, [r3, #24]
 80073aa:	697a      	ldr	r2, [r7, #20]
 80073ac:	8992      	ldrh	r2, [r2, #12]
 80073ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80073b2:	697a      	ldr	r2, [r7, #20]
 80073b4:	8952      	ldrh	r2, [r2, #10]
 80073b6:	3a01      	subs	r2, #1
 80073b8:	4013      	ands	r3, r2
 80073ba:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80073bc:	69fb      	ldr	r3, [r7, #28]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d12f      	bne.n	8007422 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	699b      	ldr	r3, [r3, #24]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d103      	bne.n	80073d2 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	689b      	ldr	r3, [r3, #8]
 80073ce:	633b      	str	r3, [r7, #48]	@ 0x30
 80073d0:	e013      	b.n	80073fa <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d007      	beq.n	80073ea <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	699b      	ldr	r3, [r3, #24]
 80073de:	4619      	mov	r1, r3
 80073e0:	68f8      	ldr	r0, [r7, #12]
 80073e2:	f7fe faaa 	bl	800593a <clmt_clust>
 80073e6:	6338      	str	r0, [r7, #48]	@ 0x30
 80073e8:	e007      	b.n	80073fa <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80073ea:	68fa      	ldr	r2, [r7, #12]
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	69db      	ldr	r3, [r3, #28]
 80073f0:	4619      	mov	r1, r3
 80073f2:	4610      	mov	r0, r2
 80073f4:	f7fd ffb7 	bl	8005366 <get_fat>
 80073f8:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80073fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073fc:	2b01      	cmp	r3, #1
 80073fe:	d804      	bhi.n	800740a <f_read+0xf2>
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2202      	movs	r2, #2
 8007404:	755a      	strb	r2, [r3, #21]
 8007406:	2302      	movs	r3, #2
 8007408:	e0e1      	b.n	80075ce <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800740a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800740c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007410:	d104      	bne.n	800741c <f_read+0x104>
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	2201      	movs	r2, #1
 8007416:	755a      	strb	r2, [r3, #21]
 8007418:	2301      	movs	r3, #1
 800741a:	e0d8      	b.n	80075ce <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007420:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007422:	697a      	ldr	r2, [r7, #20]
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	69db      	ldr	r3, [r3, #28]
 8007428:	4619      	mov	r1, r3
 800742a:	4610      	mov	r0, r2
 800742c:	f7fd ff7c 	bl	8005328 <clust2sect>
 8007430:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007432:	69bb      	ldr	r3, [r7, #24]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d104      	bne.n	8007442 <f_read+0x12a>
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	2202      	movs	r2, #2
 800743c:	755a      	strb	r2, [r3, #21]
 800743e:	2302      	movs	r3, #2
 8007440:	e0c5      	b.n	80075ce <f_read+0x2b6>
			sect += csect;
 8007442:	69ba      	ldr	r2, [r7, #24]
 8007444:	69fb      	ldr	r3, [r7, #28]
 8007446:	4413      	add	r3, r2
 8007448:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	899b      	ldrh	r3, [r3, #12]
 800744e:	461a      	mov	r2, r3
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	fbb3 f3f2 	udiv	r3, r3, r2
 8007456:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8007458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800745a:	2b00      	cmp	r3, #0
 800745c:	d041      	beq.n	80074e2 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800745e:	69fa      	ldr	r2, [r7, #28]
 8007460:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007462:	4413      	add	r3, r2
 8007464:	697a      	ldr	r2, [r7, #20]
 8007466:	8952      	ldrh	r2, [r2, #10]
 8007468:	4293      	cmp	r3, r2
 800746a:	d905      	bls.n	8007478 <f_read+0x160>
					cc = fs->csize - csect;
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	895b      	ldrh	r3, [r3, #10]
 8007470:	461a      	mov	r2, r3
 8007472:	69fb      	ldr	r3, [r7, #28]
 8007474:	1ad3      	subs	r3, r2, r3
 8007476:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	7858      	ldrb	r0, [r3, #1]
 800747c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800747e:	69ba      	ldr	r2, [r7, #24]
 8007480:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007482:	f7fd fba3 	bl	8004bcc <disk_read>
 8007486:	4603      	mov	r3, r0
 8007488:	2b00      	cmp	r3, #0
 800748a:	d004      	beq.n	8007496 <f_read+0x17e>
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	2201      	movs	r2, #1
 8007490:	755a      	strb	r2, [r3, #21]
 8007492:	2301      	movs	r3, #1
 8007494:	e09b      	b.n	80075ce <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	7d1b      	ldrb	r3, [r3, #20]
 800749a:	b25b      	sxtb	r3, r3
 800749c:	2b00      	cmp	r3, #0
 800749e:	da18      	bge.n	80074d2 <f_read+0x1ba>
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	6a1a      	ldr	r2, [r3, #32]
 80074a4:	69bb      	ldr	r3, [r7, #24]
 80074a6:	1ad3      	subs	r3, r2, r3
 80074a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80074aa:	429a      	cmp	r2, r3
 80074ac:	d911      	bls.n	80074d2 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	6a1a      	ldr	r2, [r3, #32]
 80074b2:	69bb      	ldr	r3, [r7, #24]
 80074b4:	1ad3      	subs	r3, r2, r3
 80074b6:	697a      	ldr	r2, [r7, #20]
 80074b8:	8992      	ldrh	r2, [r2, #12]
 80074ba:	fb02 f303 	mul.w	r3, r2, r3
 80074be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074c0:	18d0      	adds	r0, r2, r3
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	899b      	ldrh	r3, [r3, #12]
 80074cc:	461a      	mov	r2, r3
 80074ce:	f7fd fc5e 	bl	8004d8e <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	899b      	ldrh	r3, [r3, #12]
 80074d6:	461a      	mov	r2, r3
 80074d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074da:	fb02 f303 	mul.w	r3, r2, r3
 80074de:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 80074e0:	e05c      	b.n	800759c <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	6a1b      	ldr	r3, [r3, #32]
 80074e6:	69ba      	ldr	r2, [r7, #24]
 80074e8:	429a      	cmp	r2, r3
 80074ea:	d02e      	beq.n	800754a <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	7d1b      	ldrb	r3, [r3, #20]
 80074f0:	b25b      	sxtb	r3, r3
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	da18      	bge.n	8007528 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	7858      	ldrb	r0, [r3, #1]
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	6a1a      	ldr	r2, [r3, #32]
 8007504:	2301      	movs	r3, #1
 8007506:	f7fd fb81 	bl	8004c0c <disk_write>
 800750a:	4603      	mov	r3, r0
 800750c:	2b00      	cmp	r3, #0
 800750e:	d004      	beq.n	800751a <f_read+0x202>
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	2201      	movs	r2, #1
 8007514:	755a      	strb	r2, [r3, #21]
 8007516:	2301      	movs	r3, #1
 8007518:	e059      	b.n	80075ce <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	7d1b      	ldrb	r3, [r3, #20]
 800751e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007522:	b2da      	uxtb	r2, r3
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	7858      	ldrb	r0, [r3, #1]
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007532:	2301      	movs	r3, #1
 8007534:	69ba      	ldr	r2, [r7, #24]
 8007536:	f7fd fb49 	bl	8004bcc <disk_read>
 800753a:	4603      	mov	r3, r0
 800753c:	2b00      	cmp	r3, #0
 800753e:	d004      	beq.n	800754a <f_read+0x232>
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	2201      	movs	r2, #1
 8007544:	755a      	strb	r2, [r3, #21]
 8007546:	2301      	movs	r3, #1
 8007548:	e041      	b.n	80075ce <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	69ba      	ldr	r2, [r7, #24]
 800754e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	899b      	ldrh	r3, [r3, #12]
 8007554:	4618      	mov	r0, r3
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	699b      	ldr	r3, [r3, #24]
 800755a:	697a      	ldr	r2, [r7, #20]
 800755c:	8992      	ldrh	r2, [r2, #12]
 800755e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007562:	fb01 f202 	mul.w	r2, r1, r2
 8007566:	1a9b      	subs	r3, r3, r2
 8007568:	1ac3      	subs	r3, r0, r3
 800756a:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800756c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	429a      	cmp	r2, r3
 8007572:	d901      	bls.n	8007578 <f_read+0x260>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	699b      	ldr	r3, [r3, #24]
 8007582:	697a      	ldr	r2, [r7, #20]
 8007584:	8992      	ldrh	r2, [r2, #12]
 8007586:	fbb3 f0f2 	udiv	r0, r3, r2
 800758a:	fb00 f202 	mul.w	r2, r0, r2
 800758e:	1a9b      	subs	r3, r3, r2
 8007590:	440b      	add	r3, r1
 8007592:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007594:	4619      	mov	r1, r3
 8007596:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007598:	f7fd fbf9 	bl	8004d8e <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800759c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800759e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075a0:	4413      	add	r3, r2
 80075a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	699a      	ldr	r2, [r3, #24]
 80075a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075aa:	441a      	add	r2, r3
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	619a      	str	r2, [r3, #24]
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	681a      	ldr	r2, [r3, #0]
 80075b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075b6:	441a      	add	r2, r3
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	601a      	str	r2, [r3, #0]
 80075bc:	687a      	ldr	r2, [r7, #4]
 80075be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075c0:	1ad3      	subs	r3, r2, r3
 80075c2:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	f47f aee1 	bne.w	800738e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80075cc:	2300      	movs	r3, #0
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3738      	adds	r7, #56	@ 0x38
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}

080075d6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80075d6:	b580      	push	{r7, lr}
 80075d8:	b086      	sub	sp, #24
 80075da:	af00      	add	r7, sp, #0
 80075dc:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	f107 0208 	add.w	r2, r7, #8
 80075e4:	4611      	mov	r1, r2
 80075e6:	4618      	mov	r0, r3
 80075e8:	f7ff fc52 	bl	8006e90 <validate>
 80075ec:	4603      	mov	r3, r0
 80075ee:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80075f0:	7dfb      	ldrb	r3, [r7, #23]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d168      	bne.n	80076c8 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	7d1b      	ldrb	r3, [r3, #20]
 80075fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d062      	beq.n	80076c8 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	7d1b      	ldrb	r3, [r3, #20]
 8007606:	b25b      	sxtb	r3, r3
 8007608:	2b00      	cmp	r3, #0
 800760a:	da15      	bge.n	8007638 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	7858      	ldrb	r0, [r3, #1]
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6a1a      	ldr	r2, [r3, #32]
 800761a:	2301      	movs	r3, #1
 800761c:	f7fd faf6 	bl	8004c0c <disk_write>
 8007620:	4603      	mov	r3, r0
 8007622:	2b00      	cmp	r3, #0
 8007624:	d001      	beq.n	800762a <f_sync+0x54>
 8007626:	2301      	movs	r3, #1
 8007628:	e04f      	b.n	80076ca <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	7d1b      	ldrb	r3, [r3, #20]
 800762e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007632:	b2da      	uxtb	r2, r3
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8007638:	f7fd fa28 	bl	8004a8c <get_fattime>
 800763c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800763e:	68ba      	ldr	r2, [r7, #8]
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007644:	4619      	mov	r1, r3
 8007646:	4610      	mov	r0, r2
 8007648:	f7fd fdd0 	bl	80051ec <move_window>
 800764c:	4603      	mov	r3, r0
 800764e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8007650:	7dfb      	ldrb	r3, [r7, #23]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d138      	bne.n	80076c8 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800765a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	330b      	adds	r3, #11
 8007660:	781a      	ldrb	r2, [r3, #0]
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	330b      	adds	r3, #11
 8007666:	f042 0220 	orr.w	r2, r2, #32
 800766a:	b2d2      	uxtb	r2, r2
 800766c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6818      	ldr	r0, [r3, #0]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	689b      	ldr	r3, [r3, #8]
 8007676:	461a      	mov	r2, r3
 8007678:	68f9      	ldr	r1, [r7, #12]
 800767a:	f7fe fb5b 	bl	8005d34 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	f103 021c 	add.w	r2, r3, #28
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	68db      	ldr	r3, [r3, #12]
 8007688:	4619      	mov	r1, r3
 800768a:	4610      	mov	r0, r2
 800768c:	f7fd fb53 	bl	8004d36 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	3316      	adds	r3, #22
 8007694:	6939      	ldr	r1, [r7, #16]
 8007696:	4618      	mov	r0, r3
 8007698:	f7fd fb4d 	bl	8004d36 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	3312      	adds	r3, #18
 80076a0:	2100      	movs	r1, #0
 80076a2:	4618      	mov	r0, r3
 80076a4:	f7fd fb2c 	bl	8004d00 <st_word>
					fs->wflag = 1;
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	2201      	movs	r2, #1
 80076ac:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	4618      	mov	r0, r3
 80076b2:	f7fd fdc9 	bl	8005248 <sync_fs>
 80076b6:	4603      	mov	r3, r0
 80076b8:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	7d1b      	ldrb	r3, [r3, #20]
 80076be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80076c2:	b2da      	uxtb	r2, r3
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80076c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	3718      	adds	r7, #24
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}

080076d2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80076d2:	b580      	push	{r7, lr}
 80076d4:	b084      	sub	sp, #16
 80076d6:	af00      	add	r7, sp, #0
 80076d8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f7ff ff7b 	bl	80075d6 <f_sync>
 80076e0:	4603      	mov	r3, r0
 80076e2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80076e4:	7bfb      	ldrb	r3, [r7, #15]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d118      	bne.n	800771c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f107 0208 	add.w	r2, r7, #8
 80076f0:	4611      	mov	r1, r2
 80076f2:	4618      	mov	r0, r3
 80076f4:	f7ff fbcc 	bl	8006e90 <validate>
 80076f8:	4603      	mov	r3, r0
 80076fa:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80076fc:	7bfb      	ldrb	r3, [r7, #15]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d10c      	bne.n	800771c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	691b      	ldr	r3, [r3, #16]
 8007706:	4618      	mov	r0, r3
 8007708:	f7fd fccc 	bl	80050a4 <dec_lock>
 800770c:	4603      	mov	r3, r0
 800770e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007710:	7bfb      	ldrb	r3, [r7, #15]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d102      	bne.n	800771c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2200      	movs	r2, #0
 800771a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800771c:	7bfb      	ldrb	r3, [r7, #15]
}
 800771e:	4618      	mov	r0, r3
 8007720:	3710      	adds	r7, #16
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}

08007726 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8007726:	b580      	push	{r7, lr}
 8007728:	b088      	sub	sp, #32
 800772a:	af00      	add	r7, sp, #0
 800772c:	60f8      	str	r0, [r7, #12]
 800772e:	60b9      	str	r1, [r7, #8]
 8007730:	607a      	str	r2, [r7, #4]
	int n = 0;
 8007732:	2300      	movs	r3, #0
 8007734:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800773a:	e01c      	b.n	8007776 <f_gets+0x50>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800773c:	f107 0310 	add.w	r3, r7, #16
 8007740:	f107 0114 	add.w	r1, r7, #20
 8007744:	2201      	movs	r2, #1
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f7ff fde6 	bl	8007318 <f_read>
		if (rc != 1) break;
 800774c:	693b      	ldr	r3, [r7, #16]
 800774e:	2b01      	cmp	r3, #1
 8007750:	d117      	bne.n	8007782 <f_gets+0x5c>
		c = s[0];
 8007752:	7d3b      	ldrb	r3, [r7, #20]
 8007754:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8007756:	7dfb      	ldrb	r3, [r7, #23]
 8007758:	2b0d      	cmp	r3, #13
 800775a:	d00b      	beq.n	8007774 <f_gets+0x4e>
		*p++ = c;
 800775c:	69bb      	ldr	r3, [r7, #24]
 800775e:	1c5a      	adds	r2, r3, #1
 8007760:	61ba      	str	r2, [r7, #24]
 8007762:	7dfa      	ldrb	r2, [r7, #23]
 8007764:	701a      	strb	r2, [r3, #0]
		n++;
 8007766:	69fb      	ldr	r3, [r7, #28]
 8007768:	3301      	adds	r3, #1
 800776a:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800776c:	7dfb      	ldrb	r3, [r7, #23]
 800776e:	2b0a      	cmp	r3, #10
 8007770:	d009      	beq.n	8007786 <f_gets+0x60>
 8007772:	e000      	b.n	8007776 <f_gets+0x50>
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8007774:	bf00      	nop
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	3b01      	subs	r3, #1
 800777a:	69fa      	ldr	r2, [r7, #28]
 800777c:	429a      	cmp	r2, r3
 800777e:	dbdd      	blt.n	800773c <f_gets+0x16>
 8007780:	e002      	b.n	8007788 <f_gets+0x62>
		if (rc != 1) break;
 8007782:	bf00      	nop
 8007784:	e000      	b.n	8007788 <f_gets+0x62>
		if (c == '\n') break;		/* Break on EOL */
 8007786:	bf00      	nop
	}
	*p = 0;
 8007788:	69bb      	ldr	r3, [r7, #24]
 800778a:	2200      	movs	r2, #0
 800778c:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800778e:	69fb      	ldr	r3, [r7, #28]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d001      	beq.n	8007798 <f_gets+0x72>
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	e000      	b.n	800779a <f_gets+0x74>
 8007798:	2300      	movs	r3, #0
}
 800779a:	4618      	mov	r0, r3
 800779c:	3720      	adds	r7, #32
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}
	...

080077a4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80077a4:	b480      	push	{r7}
 80077a6:	b087      	sub	sp, #28
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	60f8      	str	r0, [r7, #12]
 80077ac:	60b9      	str	r1, [r7, #8]
 80077ae:	4613      	mov	r3, r2
 80077b0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80077b2:	2301      	movs	r3, #1
 80077b4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80077b6:	2300      	movs	r3, #0
 80077b8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80077ba:	4b1f      	ldr	r3, [pc, #124]	@ (8007838 <FATFS_LinkDriverEx+0x94>)
 80077bc:	7a5b      	ldrb	r3, [r3, #9]
 80077be:	b2db      	uxtb	r3, r3
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d131      	bne.n	8007828 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80077c4:	4b1c      	ldr	r3, [pc, #112]	@ (8007838 <FATFS_LinkDriverEx+0x94>)
 80077c6:	7a5b      	ldrb	r3, [r3, #9]
 80077c8:	b2db      	uxtb	r3, r3
 80077ca:	461a      	mov	r2, r3
 80077cc:	4b1a      	ldr	r3, [pc, #104]	@ (8007838 <FATFS_LinkDriverEx+0x94>)
 80077ce:	2100      	movs	r1, #0
 80077d0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80077d2:	4b19      	ldr	r3, [pc, #100]	@ (8007838 <FATFS_LinkDriverEx+0x94>)
 80077d4:	7a5b      	ldrb	r3, [r3, #9]
 80077d6:	b2db      	uxtb	r3, r3
 80077d8:	4a17      	ldr	r2, [pc, #92]	@ (8007838 <FATFS_LinkDriverEx+0x94>)
 80077da:	009b      	lsls	r3, r3, #2
 80077dc:	4413      	add	r3, r2
 80077de:	68fa      	ldr	r2, [r7, #12]
 80077e0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80077e2:	4b15      	ldr	r3, [pc, #84]	@ (8007838 <FATFS_LinkDriverEx+0x94>)
 80077e4:	7a5b      	ldrb	r3, [r3, #9]
 80077e6:	b2db      	uxtb	r3, r3
 80077e8:	461a      	mov	r2, r3
 80077ea:	4b13      	ldr	r3, [pc, #76]	@ (8007838 <FATFS_LinkDriverEx+0x94>)
 80077ec:	4413      	add	r3, r2
 80077ee:	79fa      	ldrb	r2, [r7, #7]
 80077f0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80077f2:	4b11      	ldr	r3, [pc, #68]	@ (8007838 <FATFS_LinkDriverEx+0x94>)
 80077f4:	7a5b      	ldrb	r3, [r3, #9]
 80077f6:	b2db      	uxtb	r3, r3
 80077f8:	1c5a      	adds	r2, r3, #1
 80077fa:	b2d1      	uxtb	r1, r2
 80077fc:	4a0e      	ldr	r2, [pc, #56]	@ (8007838 <FATFS_LinkDriverEx+0x94>)
 80077fe:	7251      	strb	r1, [r2, #9]
 8007800:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007802:	7dbb      	ldrb	r3, [r7, #22]
 8007804:	3330      	adds	r3, #48	@ 0x30
 8007806:	b2da      	uxtb	r2, r3
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	3301      	adds	r3, #1
 8007810:	223a      	movs	r2, #58	@ 0x3a
 8007812:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	3302      	adds	r3, #2
 8007818:	222f      	movs	r2, #47	@ 0x2f
 800781a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	3303      	adds	r3, #3
 8007820:	2200      	movs	r2, #0
 8007822:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007824:	2300      	movs	r3, #0
 8007826:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007828:	7dfb      	ldrb	r3, [r7, #23]
}
 800782a:	4618      	mov	r0, r3
 800782c:	371c      	adds	r7, #28
 800782e:	46bd      	mov	sp, r7
 8007830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007834:	4770      	bx	lr
 8007836:	bf00      	nop
 8007838:	200024b4 	.word	0x200024b4

0800783c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b082      	sub	sp, #8
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
 8007844:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007846:	2200      	movs	r2, #0
 8007848:	6839      	ldr	r1, [r7, #0]
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f7ff ffaa 	bl	80077a4 <FATFS_LinkDriverEx>
 8007850:	4603      	mov	r3, r0
}
 8007852:	4618      	mov	r0, r3
 8007854:	3708      	adds	r7, #8
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}
	...

0800785c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800785c:	b480      	push	{r7}
 800785e:	b085      	sub	sp, #20
 8007860:	af00      	add	r7, sp, #0
 8007862:	4603      	mov	r3, r0
 8007864:	6039      	str	r1, [r7, #0]
 8007866:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8007868:	88fb      	ldrh	r3, [r7, #6]
 800786a:	2b7f      	cmp	r3, #127	@ 0x7f
 800786c:	d802      	bhi.n	8007874 <ff_convert+0x18>
		c = chr;
 800786e:	88fb      	ldrh	r3, [r7, #6]
 8007870:	81fb      	strh	r3, [r7, #14]
 8007872:	e025      	b.n	80078c0 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d00b      	beq.n	8007892 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800787a:	88fb      	ldrh	r3, [r7, #6]
 800787c:	2bff      	cmp	r3, #255	@ 0xff
 800787e:	d805      	bhi.n	800788c <ff_convert+0x30>
 8007880:	88fb      	ldrh	r3, [r7, #6]
 8007882:	3b80      	subs	r3, #128	@ 0x80
 8007884:	4a12      	ldr	r2, [pc, #72]	@ (80078d0 <ff_convert+0x74>)
 8007886:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800788a:	e000      	b.n	800788e <ff_convert+0x32>
 800788c:	2300      	movs	r3, #0
 800788e:	81fb      	strh	r3, [r7, #14]
 8007890:	e016      	b.n	80078c0 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8007892:	2300      	movs	r3, #0
 8007894:	81fb      	strh	r3, [r7, #14]
 8007896:	e009      	b.n	80078ac <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8007898:	89fb      	ldrh	r3, [r7, #14]
 800789a:	4a0d      	ldr	r2, [pc, #52]	@ (80078d0 <ff_convert+0x74>)
 800789c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80078a0:	88fa      	ldrh	r2, [r7, #6]
 80078a2:	429a      	cmp	r2, r3
 80078a4:	d006      	beq.n	80078b4 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80078a6:	89fb      	ldrh	r3, [r7, #14]
 80078a8:	3301      	adds	r3, #1
 80078aa:	81fb      	strh	r3, [r7, #14]
 80078ac:	89fb      	ldrh	r3, [r7, #14]
 80078ae:	2b7f      	cmp	r3, #127	@ 0x7f
 80078b0:	d9f2      	bls.n	8007898 <ff_convert+0x3c>
 80078b2:	e000      	b.n	80078b6 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80078b4:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80078b6:	89fb      	ldrh	r3, [r7, #14]
 80078b8:	3380      	adds	r3, #128	@ 0x80
 80078ba:	b29b      	uxth	r3, r3
 80078bc:	b2db      	uxtb	r3, r3
 80078be:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80078c0:	89fb      	ldrh	r3, [r7, #14]
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	3714      	adds	r7, #20
 80078c6:	46bd      	mov	sp, r7
 80078c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078cc:	4770      	bx	lr
 80078ce:	bf00      	nop
 80078d0:	08007d40 	.word	0x08007d40

080078d4 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80078d4:	b480      	push	{r7}
 80078d6:	b087      	sub	sp, #28
 80078d8:	af00      	add	r7, sp, #0
 80078da:	4603      	mov	r3, r0
 80078dc:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80078de:	88fb      	ldrh	r3, [r7, #6]
 80078e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80078e4:	d201      	bcs.n	80078ea <ff_wtoupper+0x16>
 80078e6:	4b3e      	ldr	r3, [pc, #248]	@ (80079e0 <ff_wtoupper+0x10c>)
 80078e8:	e000      	b.n	80078ec <ff_wtoupper+0x18>
 80078ea:	4b3e      	ldr	r3, [pc, #248]	@ (80079e4 <ff_wtoupper+0x110>)
 80078ec:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	1c9a      	adds	r2, r3, #2
 80078f2:	617a      	str	r2, [r7, #20]
 80078f4:	881b      	ldrh	r3, [r3, #0]
 80078f6:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80078f8:	8a7b      	ldrh	r3, [r7, #18]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d068      	beq.n	80079d0 <ff_wtoupper+0xfc>
 80078fe:	88fa      	ldrh	r2, [r7, #6]
 8007900:	8a7b      	ldrh	r3, [r7, #18]
 8007902:	429a      	cmp	r2, r3
 8007904:	d364      	bcc.n	80079d0 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	1c9a      	adds	r2, r3, #2
 800790a:	617a      	str	r2, [r7, #20]
 800790c:	881b      	ldrh	r3, [r3, #0]
 800790e:	823b      	strh	r3, [r7, #16]
 8007910:	8a3b      	ldrh	r3, [r7, #16]
 8007912:	0a1b      	lsrs	r3, r3, #8
 8007914:	81fb      	strh	r3, [r7, #14]
 8007916:	8a3b      	ldrh	r3, [r7, #16]
 8007918:	b2db      	uxtb	r3, r3
 800791a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800791c:	88fa      	ldrh	r2, [r7, #6]
 800791e:	8a79      	ldrh	r1, [r7, #18]
 8007920:	8a3b      	ldrh	r3, [r7, #16]
 8007922:	440b      	add	r3, r1
 8007924:	429a      	cmp	r2, r3
 8007926:	da49      	bge.n	80079bc <ff_wtoupper+0xe8>
			switch (cmd) {
 8007928:	89fb      	ldrh	r3, [r7, #14]
 800792a:	2b08      	cmp	r3, #8
 800792c:	d84f      	bhi.n	80079ce <ff_wtoupper+0xfa>
 800792e:	a201      	add	r2, pc, #4	@ (adr r2, 8007934 <ff_wtoupper+0x60>)
 8007930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007934:	08007959 	.word	0x08007959
 8007938:	0800796b 	.word	0x0800796b
 800793c:	08007981 	.word	0x08007981
 8007940:	08007989 	.word	0x08007989
 8007944:	08007991 	.word	0x08007991
 8007948:	08007999 	.word	0x08007999
 800794c:	080079a1 	.word	0x080079a1
 8007950:	080079a9 	.word	0x080079a9
 8007954:	080079b1 	.word	0x080079b1
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8007958:	88fa      	ldrh	r2, [r7, #6]
 800795a:	8a7b      	ldrh	r3, [r7, #18]
 800795c:	1ad3      	subs	r3, r2, r3
 800795e:	005b      	lsls	r3, r3, #1
 8007960:	697a      	ldr	r2, [r7, #20]
 8007962:	4413      	add	r3, r2
 8007964:	881b      	ldrh	r3, [r3, #0]
 8007966:	80fb      	strh	r3, [r7, #6]
 8007968:	e027      	b.n	80079ba <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800796a:	88fa      	ldrh	r2, [r7, #6]
 800796c:	8a7b      	ldrh	r3, [r7, #18]
 800796e:	1ad3      	subs	r3, r2, r3
 8007970:	b29b      	uxth	r3, r3
 8007972:	f003 0301 	and.w	r3, r3, #1
 8007976:	b29b      	uxth	r3, r3
 8007978:	88fa      	ldrh	r2, [r7, #6]
 800797a:	1ad3      	subs	r3, r2, r3
 800797c:	80fb      	strh	r3, [r7, #6]
 800797e:	e01c      	b.n	80079ba <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8007980:	88fb      	ldrh	r3, [r7, #6]
 8007982:	3b10      	subs	r3, #16
 8007984:	80fb      	strh	r3, [r7, #6]
 8007986:	e018      	b.n	80079ba <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8007988:	88fb      	ldrh	r3, [r7, #6]
 800798a:	3b20      	subs	r3, #32
 800798c:	80fb      	strh	r3, [r7, #6]
 800798e:	e014      	b.n	80079ba <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8007990:	88fb      	ldrh	r3, [r7, #6]
 8007992:	3b30      	subs	r3, #48	@ 0x30
 8007994:	80fb      	strh	r3, [r7, #6]
 8007996:	e010      	b.n	80079ba <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8007998:	88fb      	ldrh	r3, [r7, #6]
 800799a:	3b1a      	subs	r3, #26
 800799c:	80fb      	strh	r3, [r7, #6]
 800799e:	e00c      	b.n	80079ba <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80079a0:	88fb      	ldrh	r3, [r7, #6]
 80079a2:	3308      	adds	r3, #8
 80079a4:	80fb      	strh	r3, [r7, #6]
 80079a6:	e008      	b.n	80079ba <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 80079a8:	88fb      	ldrh	r3, [r7, #6]
 80079aa:	3b50      	subs	r3, #80	@ 0x50
 80079ac:	80fb      	strh	r3, [r7, #6]
 80079ae:	e004      	b.n	80079ba <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80079b0:	88fb      	ldrh	r3, [r7, #6]
 80079b2:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 80079b6:	80fb      	strh	r3, [r7, #6]
 80079b8:	bf00      	nop
			}
			break;
 80079ba:	e008      	b.n	80079ce <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 80079bc:	89fb      	ldrh	r3, [r7, #14]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d195      	bne.n	80078ee <ff_wtoupper+0x1a>
 80079c2:	8a3b      	ldrh	r3, [r7, #16]
 80079c4:	005b      	lsls	r3, r3, #1
 80079c6:	697a      	ldr	r2, [r7, #20]
 80079c8:	4413      	add	r3, r2
 80079ca:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80079cc:	e78f      	b.n	80078ee <ff_wtoupper+0x1a>
			break;
 80079ce:	bf00      	nop
	}

	return chr;
 80079d0:	88fb      	ldrh	r3, [r7, #6]
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	371c      	adds	r7, #28
 80079d6:	46bd      	mov	sp, r7
 80079d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079dc:	4770      	bx	lr
 80079de:	bf00      	nop
 80079e0:	08007e40 	.word	0x08007e40
 80079e4:	08008034 	.word	0x08008034

080079e8 <memset>:
 80079e8:	4402      	add	r2, r0
 80079ea:	4603      	mov	r3, r0
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d100      	bne.n	80079f2 <memset+0xa>
 80079f0:	4770      	bx	lr
 80079f2:	f803 1b01 	strb.w	r1, [r3], #1
 80079f6:	e7f9      	b.n	80079ec <memset+0x4>

080079f8 <__libc_init_array>:
 80079f8:	b570      	push	{r4, r5, r6, lr}
 80079fa:	4d0d      	ldr	r5, [pc, #52]	@ (8007a30 <__libc_init_array+0x38>)
 80079fc:	4c0d      	ldr	r4, [pc, #52]	@ (8007a34 <__libc_init_array+0x3c>)
 80079fe:	1b64      	subs	r4, r4, r5
 8007a00:	10a4      	asrs	r4, r4, #2
 8007a02:	2600      	movs	r6, #0
 8007a04:	42a6      	cmp	r6, r4
 8007a06:	d109      	bne.n	8007a1c <__libc_init_array+0x24>
 8007a08:	4d0b      	ldr	r5, [pc, #44]	@ (8007a38 <__libc_init_array+0x40>)
 8007a0a:	4c0c      	ldr	r4, [pc, #48]	@ (8007a3c <__libc_init_array+0x44>)
 8007a0c:	f000 f818 	bl	8007a40 <_init>
 8007a10:	1b64      	subs	r4, r4, r5
 8007a12:	10a4      	asrs	r4, r4, #2
 8007a14:	2600      	movs	r6, #0
 8007a16:	42a6      	cmp	r6, r4
 8007a18:	d105      	bne.n	8007a26 <__libc_init_array+0x2e>
 8007a1a:	bd70      	pop	{r4, r5, r6, pc}
 8007a1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a20:	4798      	blx	r3
 8007a22:	3601      	adds	r6, #1
 8007a24:	e7ee      	b.n	8007a04 <__libc_init_array+0xc>
 8007a26:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a2a:	4798      	blx	r3
 8007a2c:	3601      	adds	r6, #1
 8007a2e:	e7f2      	b.n	8007a16 <__libc_init_array+0x1e>
 8007a30:	080080f8 	.word	0x080080f8
 8007a34:	080080f8 	.word	0x080080f8
 8007a38:	080080f8 	.word	0x080080f8
 8007a3c:	080080fc 	.word	0x080080fc

08007a40 <_init>:
 8007a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a42:	bf00      	nop
 8007a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a46:	bc08      	pop	{r3}
 8007a48:	469e      	mov	lr, r3
 8007a4a:	4770      	bx	lr

08007a4c <_fini>:
 8007a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a4e:	bf00      	nop
 8007a50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a52:	bc08      	pop	{r3}
 8007a54:	469e      	mov	lr, r3
 8007a56:	4770      	bx	lr
