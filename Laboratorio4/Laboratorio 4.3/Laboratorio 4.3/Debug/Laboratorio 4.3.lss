
Laboratorio 4.3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000218  000002ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000218  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800102  00800102  000002ae  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002ae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000320  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000097e  00000000  00000000  000003a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000079c  00000000  00000000  00000d26  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004d1  00000000  00000000  000014c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000013c  00000000  00000000  00001994  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000466  00000000  00000000  00001ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000027b  00000000  00000000  00001f36  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  000021b1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__vector_1>
   8:	0c 94 c1 00 	jmp	0x182	; 0x182 <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__vector_24>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e1       	ldi	r30, 0x18	; 24
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 30       	cpi	r26, 0x03	; 3
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 5e 00 	call	0xbc	; 0xbc <main>
  9e:	0c 94 0a 01 	jmp	0x214	; 0x214 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <I2C_esclavo_init>:
 *  Author: jaidy
 */ 
#include "I2C_SLAVE.h"

void I2C_esclavo_init() {
	TWAR = SLA_ESCLAVO << 1; // Configura la dirección del esclavo
  a6:	80 e4       	ldi	r24, 0x40	; 64
  a8:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
	TWCR = (1 << TWEA) | (1 << TWEN) | (1 << TWINT) | (1 << TWIE); // Habilita I2C y la interrupción
  ac:	85 ec       	ldi	r24, 0xC5	; 197
  ae:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  b2:	08 95       	ret

000000b4 <I2C_reset>:
	//PORTC |= (1 << PC4) | (1 << PC5); // Habilita pull-ups internos en SDA y SCL
}

void I2C_reset(){
	TWCR = (1 << TWEA) | (1 << TWEN) | (1 << TWINT) | (1 << TWIE); // Reinicia I2C para recibir más datos
  b4:	85 ec       	ldi	r24, 0xC5	; 197
  b6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  ba:	08 95       	ret

000000bc <main>:
volatile uint8_t dato_recibido;
volatile uint8_t dato_a_enviar = 0x22;


int main(void){
    I2C_esclavo_init();			// Inicializa el esclavo
  bc:	0e 94 53 00 	call	0xa6	; 0xa6 <I2C_esclavo_init>
	initPinChange0(rising_edge);//INTERRUPCION EXTERNA PD2 FLANCO DE BAJADA
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <initPinChange0>
	initPinChange1(rising_edge);//INTERRUPCION ECTERNA PD3 FLANCO DE BAJADA
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <initPinChange1>
    sei();						// Habilita interrupciones globales
  cc:	78 94       	sei
    DDRB = 0xFF;
  ce:	8f ef       	ldi	r24, 0xFF	; 255
  d0:	84 b9       	out	0x04, r24	; 4
  d2:	ff cf       	rjmp	.-2      	; 0xd2 <main+0x16>

000000d4 <__vector_24>:
    while (1){
		
    }
}

ISR(TWI_vect) {
  d4:	1f 92       	push	r1
  d6:	0f 92       	push	r0
  d8:	0f b6       	in	r0, 0x3f	; 63
  da:	0f 92       	push	r0
  dc:	11 24       	eor	r1, r1
  de:	2f 93       	push	r18
  e0:	3f 93       	push	r19
  e2:	4f 93       	push	r20
  e4:	5f 93       	push	r21
  e6:	6f 93       	push	r22
  e8:	7f 93       	push	r23
  ea:	8f 93       	push	r24
  ec:	9f 93       	push	r25
  ee:	af 93       	push	r26
  f0:	bf 93       	push	r27
  f2:	ef 93       	push	r30
  f4:	ff 93       	push	r31
	switch (TWSR & 0xF8) {
  f6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  fa:	88 7f       	andi	r24, 0xF8	; 248
  fc:	80 38       	cpi	r24, 0x80	; 128
  fe:	19 f0       	breq	.+6      	; 0x106 <__vector_24+0x32>
 100:	88 3a       	cpi	r24, 0xA8	; 168
 102:	49 f0       	breq	.+18     	; 0x116 <__vector_24+0x42>
 104:	0f c0       	rjmp	.+30     	; 0x124 <__vector_24+0x50>
		case 0x80:				// Dato recibido de maestro
		dato_recibido = TWDR;	// Guarda el dato recibido
 106:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 10a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
		PORTB = dato_recibido;
 10e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 112:	85 b9       	out	0x05, r24	; 5
		break;
 114:	07 c0       	rjmp	.+14     	; 0x124 <__vector_24+0x50>
		case 0xA8:				// Maestro solicita lectura
		TWDR = cont;			// Carga el dato a enviar
 116:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 11a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		cont = 2;
 11e:	82 e0       	ldi	r24, 0x02	; 2
 120:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		break;
	}
	I2C_reset();				// Reinicia I2C para recibir más datos
 124:	0e 94 5a 00 	call	0xb4	; 0xb4 <I2C_reset>
}
 128:	ff 91       	pop	r31
 12a:	ef 91       	pop	r30
 12c:	bf 91       	pop	r27
 12e:	af 91       	pop	r26
 130:	9f 91       	pop	r25
 132:	8f 91       	pop	r24
 134:	7f 91       	pop	r23
 136:	6f 91       	pop	r22
 138:	5f 91       	pop	r21
 13a:	4f 91       	pop	r20
 13c:	3f 91       	pop	r19
 13e:	2f 91       	pop	r18
 140:	0f 90       	pop	r0
 142:	0f be       	out	0x3f, r0	; 63
 144:	0f 90       	pop	r0
 146:	1f 90       	pop	r1
 148:	18 95       	reti

0000014a <__vector_1>:

ISR (INT0_vect){
 14a:	1f 92       	push	r1
 14c:	0f 92       	push	r0
 14e:	0f b6       	in	r0, 0x3f	; 63
 150:	0f 92       	push	r0
 152:	11 24       	eor	r1, r1
 154:	2f 93       	push	r18
 156:	8f 93       	push	r24
 158:	9f 93       	push	r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15a:	2f ef       	ldi	r18, 0xFF	; 255
 15c:	81 ee       	ldi	r24, 0xE1	; 225
 15e:	94 e0       	ldi	r25, 0x04	; 4
 160:	21 50       	subi	r18, 0x01	; 1
 162:	80 40       	sbci	r24, 0x00	; 0
 164:	90 40       	sbci	r25, 0x00	; 0
 166:	e1 f7       	brne	.-8      	; 0x160 <__vector_1+0x16>
 168:	00 c0       	rjmp	.+0      	; 0x16a <__vector_1+0x20>
 16a:	00 00       	nop
	_delay_ms(100);
	cont = 1;
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
}
 172:	9f 91       	pop	r25
 174:	8f 91       	pop	r24
 176:	2f 91       	pop	r18
 178:	0f 90       	pop	r0
 17a:	0f be       	out	0x3f, r0	; 63
 17c:	0f 90       	pop	r0
 17e:	1f 90       	pop	r1
 180:	18 95       	reti

00000182 <__vector_2>:

ISR (INT1_vect){
 182:	1f 92       	push	r1
 184:	0f 92       	push	r0
 186:	0f b6       	in	r0, 0x3f	; 63
 188:	0f 92       	push	r0
 18a:	11 24       	eor	r1, r1
 18c:	2f 93       	push	r18
 18e:	8f 93       	push	r24
 190:	9f 93       	push	r25
 192:	2f ef       	ldi	r18, 0xFF	; 255
 194:	81 ee       	ldi	r24, 0xE1	; 225
 196:	94 e0       	ldi	r25, 0x04	; 4
 198:	21 50       	subi	r18, 0x01	; 1
 19a:	80 40       	sbci	r24, 0x00	; 0
 19c:	90 40       	sbci	r25, 0x00	; 0
 19e:	e1 f7       	brne	.-8      	; 0x198 <__vector_2+0x16>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <__vector_2+0x20>
 1a2:	00 00       	nop
	_delay_ms(100);
	cont = 0;
 1a4:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 1a8:	9f 91       	pop	r25
 1aa:	8f 91       	pop	r24
 1ac:	2f 91       	pop	r18
 1ae:	0f 90       	pop	r0
 1b0:	0f be       	out	0x3f, r0	; 63
 1b2:	0f 90       	pop	r0
 1b4:	1f 90       	pop	r1
 1b6:	18 95       	reti

000001b8 <initPinChange0>:
 *  Author: jaidy
 */ 
#include "Ext_Int.h"

void initPinChange0(uint8_t edge){
	if (edge){
 1b8:	88 23       	and	r24, r24
 1ba:	31 f0       	breq	.+12     	; 0x1c8 <initPinChange0+0x10>
		EICRA |= (1 << ISC01)|(1<< ISC00);
 1bc:	e9 e6       	ldi	r30, 0x69	; 105
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	80 81       	ld	r24, Z
 1c2:	83 60       	ori	r24, 0x03	; 3
 1c4:	80 83       	st	Z, r24
 1c6:	05 c0       	rjmp	.+10     	; 0x1d2 <initPinChange0+0x1a>
	}else{
		EICRA |= (1 << ISC01);
 1c8:	e9 e6       	ldi	r30, 0x69	; 105
 1ca:	f0 e0       	ldi	r31, 0x00	; 0
 1cc:	80 81       	ld	r24, Z
 1ce:	82 60       	ori	r24, 0x02	; 2
 1d0:	80 83       	st	Z, r24
	}
	PORTD |= (1 << PORTD2);
 1d2:	8b b1       	in	r24, 0x0b	; 11
 1d4:	84 60       	ori	r24, 0x04	; 4
 1d6:	8b b9       	out	0x0b, r24	; 11
	EIMSK |= (1 << INT0);
 1d8:	8d b3       	in	r24, 0x1d	; 29
 1da:	81 60       	ori	r24, 0x01	; 1
 1dc:	8d bb       	out	0x1d, r24	; 29
	DDRD &=~ (1 << DDD2);
 1de:	8a b1       	in	r24, 0x0a	; 10
 1e0:	8b 7f       	andi	r24, 0xFB	; 251
 1e2:	8a b9       	out	0x0a, r24	; 10
 1e4:	08 95       	ret

000001e6 <initPinChange1>:
}

void initPinChange1(uint8_t edge){
	if (edge){
 1e6:	88 23       	and	r24, r24
 1e8:	31 f0       	breq	.+12     	; 0x1f6 <initPinChange1+0x10>
		EICRA |= (1 << ISC11)|(1<< ISC10);
 1ea:	e9 e6       	ldi	r30, 0x69	; 105
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	80 81       	ld	r24, Z
 1f0:	8c 60       	ori	r24, 0x0C	; 12
 1f2:	80 83       	st	Z, r24
 1f4:	05 c0       	rjmp	.+10     	; 0x200 <initPinChange1+0x1a>
	}else{
		EICRA |= (1 << ISC11);
 1f6:	e9 e6       	ldi	r30, 0x69	; 105
 1f8:	f0 e0       	ldi	r31, 0x00	; 0
 1fa:	80 81       	ld	r24, Z
 1fc:	88 60       	ori	r24, 0x08	; 8
 1fe:	80 83       	st	Z, r24
	}
	PORTD |= (1 << PORTD3);
 200:	8b b1       	in	r24, 0x0b	; 11
 202:	88 60       	ori	r24, 0x08	; 8
 204:	8b b9       	out	0x0b, r24	; 11
	EIMSK |= (1 << INT1);
 206:	8d b3       	in	r24, 0x1d	; 29
 208:	82 60       	ori	r24, 0x02	; 2
 20a:	8d bb       	out	0x1d, r24	; 29
	DDRD &=~ (1 << DDD3);
 20c:	8a b1       	in	r24, 0x0a	; 10
 20e:	87 7f       	andi	r24, 0xF7	; 247
 210:	8a b9       	out	0x0a, r24	; 10
 212:	08 95       	ret

00000214 <_exit>:
 214:	f8 94       	cli

00000216 <__stop_program>:
 216:	ff cf       	rjmp	.-2      	; 0x216 <__stop_program>
