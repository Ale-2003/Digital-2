
Laboratorio1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  0000044a  000004de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000044a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  0080010a  0080010a  000004e8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004e8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000518  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  00000558  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c1c  00000000  00000000  000005e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007fb  00000000  00000000  00001204  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006a9  00000000  00000000  000019ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000114  00000000  00000000  000020a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000049b  00000000  00000000  000021bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004d8  00000000  00000000  00002657  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00002b2f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__vector_3>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	67 00       	.word	0x0067	; ????
  6a:	6d 00       	.word	0x006d	; ????
  6c:	73 00       	.word	0x0073	; ????
  6e:	79 00       	.word	0x0079	; ????
  70:	7f 00       	.word	0x007f	; ????
  72:	85 00       	.word	0x0085	; ????
  74:	8b 00       	.word	0x008b	; ????
  76:	91 00       	.word	0x0091	; ????
  78:	97 00       	.word	0x0097	; ????
  7a:	9d 00       	.word	0x009d	; ????

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	ea e4       	ldi	r30, 0x4A	; 74
  90:	f4 e0       	ldi	r31, 0x04	; 4
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	aa 30       	cpi	r26, 0x0A	; 10
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	21 e0       	ldi	r18, 0x01	; 1
  a0:	aa e0       	ldi	r26, 0x0A	; 10
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	a1 31       	cpi	r26, 0x11	; 17
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 32 01 	call	0x264	; 0x264 <main>
  b2:	0c 94 23 02 	jmp	0x446	; 0x446 <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <Display7S>:
 *  Author: jaidy
 */ 
#include "Display7.h"

void Display7S(uint8_t num){
	switch(num){
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	8a 30       	cpi	r24, 0x0A	; 10
  be:	91 05       	cpc	r25, r1
  c0:	08 f0       	brcs	.+2      	; 0xc4 <Display7S+0xa>
  c2:	41 c0       	rjmp	.+130    	; 0x146 <Display7S+0x8c>
  c4:	fc 01       	movw	r30, r24
  c6:	ec 5c       	subi	r30, 0xCC	; 204
  c8:	ff 4f       	sbci	r31, 0xFF	; 255
  ca:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__tablejump2__>
		case 0: PORTC = 0b1111110; PORTB |=  (1 << PORTB5); break;
  ce:	8e e7       	ldi	r24, 0x7E	; 126
  d0:	88 b9       	out	0x08, r24	; 8
  d2:	85 b1       	in	r24, 0x05	; 5
  d4:	80 62       	ori	r24, 0x20	; 32
  d6:	85 b9       	out	0x05, r24	; 5
  d8:	08 95       	ret
		case 1: PORTC = 0b0110000; PORTB &= ~(1 << PORTB5); break;
  da:	80 e3       	ldi	r24, 0x30	; 48
  dc:	88 b9       	out	0x08, r24	; 8
  de:	85 b1       	in	r24, 0x05	; 5
  e0:	8f 7d       	andi	r24, 0xDF	; 223
  e2:	85 b9       	out	0x05, r24	; 5
  e4:	08 95       	ret
		case 2: PORTC = 0b1101101; PORTB |=  (1 << PORTB5); break;
  e6:	8d e6       	ldi	r24, 0x6D	; 109
  e8:	88 b9       	out	0x08, r24	; 8
  ea:	85 b1       	in	r24, 0x05	; 5
  ec:	80 62       	ori	r24, 0x20	; 32
  ee:	85 b9       	out	0x05, r24	; 5
  f0:	08 95       	ret
		case 3: PORTC = 0b1111001; PORTB |=  (1 << PORTB5); break;
  f2:	89 e7       	ldi	r24, 0x79	; 121
  f4:	88 b9       	out	0x08, r24	; 8
  f6:	85 b1       	in	r24, 0x05	; 5
  f8:	80 62       	ori	r24, 0x20	; 32
  fa:	85 b9       	out	0x05, r24	; 5
  fc:	08 95       	ret
		case 4: PORTC = 0b0110011; PORTB &= ~(1 << PORTB5); break;
  fe:	83 e3       	ldi	r24, 0x33	; 51
 100:	88 b9       	out	0x08, r24	; 8
 102:	85 b1       	in	r24, 0x05	; 5
 104:	8f 7d       	andi	r24, 0xDF	; 223
 106:	85 b9       	out	0x05, r24	; 5
 108:	08 95       	ret
		case 5: PORTC = 0b1011011; PORTB |=  (1 << PORTB5); break;
 10a:	8b e5       	ldi	r24, 0x5B	; 91
 10c:	88 b9       	out	0x08, r24	; 8
 10e:	85 b1       	in	r24, 0x05	; 5
 110:	80 62       	ori	r24, 0x20	; 32
 112:	85 b9       	out	0x05, r24	; 5
 114:	08 95       	ret
		case 6: PORTC = 0b1101111; PORTB |=  (1 << PORTB5); break;
 116:	8f e6       	ldi	r24, 0x6F	; 111
 118:	88 b9       	out	0x08, r24	; 8
 11a:	85 b1       	in	r24, 0x05	; 5
 11c:	80 62       	ori	r24, 0x20	; 32
 11e:	85 b9       	out	0x05, r24	; 5
 120:	08 95       	ret
		case 7: PORTC = 0b1110000; PORTB |=  (1 << PORTB5); break;
 122:	80 e7       	ldi	r24, 0x70	; 112
 124:	88 b9       	out	0x08, r24	; 8
 126:	85 b1       	in	r24, 0x05	; 5
 128:	80 62       	ori	r24, 0x20	; 32
 12a:	85 b9       	out	0x05, r24	; 5
 12c:	08 95       	ret
		case 8: PORTC = 0b1111111; PORTB |=  (1 << PORTB5); break;
 12e:	8f e7       	ldi	r24, 0x7F	; 127
 130:	88 b9       	out	0x08, r24	; 8
 132:	85 b1       	in	r24, 0x05	; 5
 134:	80 62       	ori	r24, 0x20	; 32
 136:	85 b9       	out	0x05, r24	; 5
 138:	08 95       	ret
		case 9: PORTC = 0b1111011; PORTB |=  (1 << PORTB5); break;
 13a:	8b e7       	ldi	r24, 0x7B	; 123
 13c:	88 b9       	out	0x08, r24	; 8
 13e:	85 b1       	in	r24, 0x05	; 5
 140:	80 62       	ori	r24, 0x20	; 32
 142:	85 b9       	out	0x05, r24	; 5
 144:	08 95       	ret
		default: PORTC = 0; PORTB &= ~(1 << PORTB5); break;
 146:	18 b8       	out	0x08, r1	; 8
 148:	85 b1       	in	r24, 0x05	; 5
 14a:	8f 7d       	andi	r24, 0xDF	; 223
 14c:	85 b9       	out	0x05, r24	; 5
 14e:	08 95       	ret

00000150 <initPinChange0>:
 *  Author: jaidy
 */ 
#include "IntExt.h"

void initPinChange0(uint8_t edge){
	if (edge == 1){
 150:	81 30       	cpi	r24, 0x01	; 1
 152:	39 f4       	brne	.+14     	; 0x162 <initPinChange0+0x12>
		DDRB &= ~(1 << PORTB0);		
 154:	84 b1       	in	r24, 0x04	; 4
 156:	8e 7f       	andi	r24, 0xFE	; 254
 158:	84 b9       	out	0x04, r24	; 4
		PORTB &=~(1 << PORTB0);
 15a:	85 b1       	in	r24, 0x05	; 5
 15c:	8e 7f       	andi	r24, 0xFE	; 254
 15e:	85 b9       	out	0x05, r24	; 5
 160:	06 c0       	rjmp	.+12     	; 0x16e <initPinChange0+0x1e>
		}else{
		DDRB &= ~(1 << PORTB0);
 162:	84 b1       	in	r24, 0x04	; 4
 164:	8e 7f       	andi	r24, 0xFE	; 254
 166:	84 b9       	out	0x04, r24	; 4
		PORTB |= (1 << PORTB0);
 168:	85 b1       	in	r24, 0x05	; 5
 16a:	81 60       	ori	r24, 0x01	; 1
 16c:	85 b9       	out	0x05, r24	; 5
	}
	PCICR |= (1 << PCIF0);
 16e:	e8 e6       	ldi	r30, 0x68	; 104
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	80 81       	ld	r24, Z
 174:	81 60       	ori	r24, 0x01	; 1
 176:	80 83       	st	Z, r24
	PCMSK0 |= (1 << PCINT0);
 178:	eb e6       	ldi	r30, 0x6B	; 107
 17a:	f0 e0       	ldi	r31, 0x00	; 0
 17c:	80 81       	ld	r24, Z
 17e:	81 60       	ori	r24, 0x01	; 1
 180:	80 83       	st	Z, r24
 182:	08 95       	ret

00000184 <initPinChange1>:
}

void initPinChange1(uint8_t edge){
	if (edge == 1){
 184:	81 30       	cpi	r24, 0x01	; 1
 186:	39 f4       	brne	.+14     	; 0x196 <initPinChange1+0x12>
		DDRB &= ~(1 << PORTB1);
 188:	84 b1       	in	r24, 0x04	; 4
 18a:	8d 7f       	andi	r24, 0xFD	; 253
 18c:	84 b9       	out	0x04, r24	; 4
		PORTB &=~(1 << PORTB1);
 18e:	85 b1       	in	r24, 0x05	; 5
 190:	8d 7f       	andi	r24, 0xFD	; 253
 192:	85 b9       	out	0x05, r24	; 5
 194:	06 c0       	rjmp	.+12     	; 0x1a2 <initPinChange1+0x1e>
		}else{
		DDRB &= ~(1 << PORTB1);
 196:	84 b1       	in	r24, 0x04	; 4
 198:	8d 7f       	andi	r24, 0xFD	; 253
 19a:	84 b9       	out	0x04, r24	; 4
		PORTB |= (1 << PORTB1);
 19c:	85 b1       	in	r24, 0x05	; 5
 19e:	82 60       	ori	r24, 0x02	; 2
 1a0:	85 b9       	out	0x05, r24	; 5
	}
	PCICR |= (1 << PCIF0);
 1a2:	e8 e6       	ldi	r30, 0x68	; 104
 1a4:	f0 e0       	ldi	r31, 0x00	; 0
 1a6:	80 81       	ld	r24, Z
 1a8:	81 60       	ori	r24, 0x01	; 1
 1aa:	80 83       	st	Z, r24
	PCMSK0 |= (1 << PCINT1);
 1ac:	eb e6       	ldi	r30, 0x6B	; 107
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	80 81       	ld	r24, Z
 1b2:	82 60       	ori	r24, 0x02	; 2
 1b4:	80 83       	st	Z, r24
 1b6:	08 95       	ret

000001b8 <initPinChange2>:
}

void initPinChange2(uint8_t edge){
	if (edge == 1){
 1b8:	81 30       	cpi	r24, 0x01	; 1
 1ba:	39 f4       	brne	.+14     	; 0x1ca <initPinChange2+0x12>
		DDRB &= ~(1 << PORTB2);
 1bc:	84 b1       	in	r24, 0x04	; 4
 1be:	8b 7f       	andi	r24, 0xFB	; 251
 1c0:	84 b9       	out	0x04, r24	; 4
		PORTB &=~(1 << PORTB2);
 1c2:	85 b1       	in	r24, 0x05	; 5
 1c4:	8b 7f       	andi	r24, 0xFB	; 251
 1c6:	85 b9       	out	0x05, r24	; 5
 1c8:	06 c0       	rjmp	.+12     	; 0x1d6 <initPinChange2+0x1e>
		}else{
		DDRB &= ~(1 << PORTB2);
 1ca:	84 b1       	in	r24, 0x04	; 4
 1cc:	8b 7f       	andi	r24, 0xFB	; 251
 1ce:	84 b9       	out	0x04, r24	; 4
		PORTB |= (1 << PORTB2);
 1d0:	85 b1       	in	r24, 0x05	; 5
 1d2:	84 60       	ori	r24, 0x04	; 4
 1d4:	85 b9       	out	0x05, r24	; 5
	}
	PCICR |= (1 << PCIF0);
 1d6:	e8 e6       	ldi	r30, 0x68	; 104
 1d8:	f0 e0       	ldi	r31, 0x00	; 0
 1da:	80 81       	ld	r24, Z
 1dc:	81 60       	ori	r24, 0x01	; 1
 1de:	80 83       	st	Z, r24
	PCMSK0 |= (1 << PCINT2);
 1e0:	eb e6       	ldi	r30, 0x6B	; 107
 1e2:	f0 e0       	ldi	r31, 0x00	; 0
 1e4:	80 81       	ld	r24, Z
 1e6:	84 60       	ori	r24, 0x04	; 4
 1e8:	80 83       	st	Z, r24
 1ea:	08 95       	ret

000001ec <No_Jugar>:
		}
    }
}

void No_Jugar(void){
	STATE = 0;
 1ec:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <STATE>
	Ganador = 0;
 1f0:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <Ganador>
	Jugador1 = 0;
 1f4:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <Jugador1>
	Jugador2 = 0;
 1f8:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <Jugador2>
 1fc:	08 95       	ret

000001fe <Mascara>:
		Jugador2 = 0;
	}
}

void Mascara(uint8_t number1, uint8_t number2){
	number1 &= 0x0F; // PD0-PD3
 1fe:	8f 70       	andi	r24, 0x0F	; 15
	number2 &= 0x0F; // PD4-PD7
 200:	96 2f       	mov	r25, r22
 202:	9f 70       	andi	r25, 0x0F	; 15
	PORTD &= ~((0x0F) | (0xF0));
 204:	2b b1       	in	r18, 0x0b	; 11
 206:	1b b8       	out	0x0b, r1	; 11
	PORTD |= number1; // ESCRIBIMOS EN PD0-PD3
 208:	2b b1       	in	r18, 0x0b	; 11
 20a:	82 2b       	or	r24, r18
 20c:	8b b9       	out	0x0b, r24	; 11
	PORTD |= (number2 << 4); // ESCRIBIMOS EN PD4-PD7
 20e:	8b b1       	in	r24, 0x0b	; 11
 210:	20 e1       	ldi	r18, 0x10	; 16
 212:	92 9f       	mul	r25, r18
 214:	b0 01       	movw	r22, r0
 216:	11 24       	eor	r1, r1
 218:	68 2b       	or	r22, r24
 21a:	6b b9       	out	0x0b, r22	; 11
 21c:	08 95       	ret

0000021e <Si_Jugar>:
	Jugador1 = 0;
	Jugador2 = 0;
}

void Si_Jugar(void){
	Mascara(numero[Jugador1], numero[Jugador2]);
 21e:	e0 91 0f 01 	lds	r30, 0x010F	; 0x80010f <Jugador2>
 222:	f0 e0       	ldi	r31, 0x00	; 0
 224:	ee 0f       	add	r30, r30
 226:	ff 1f       	adc	r31, r31
 228:	e0 50       	subi	r30, 0x00	; 0
 22a:	ff 4f       	sbci	r31, 0xFF	; 255
 22c:	60 81       	ld	r22, Z
 22e:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <Jugador1>
 232:	f0 e0       	ldi	r31, 0x00	; 0
 234:	ee 0f       	add	r30, r30
 236:	ff 1f       	adc	r31, r31
 238:	e0 50       	subi	r30, 0x00	; 0
 23a:	ff 4f       	sbci	r31, 0xFF	; 255
 23c:	80 81       	ld	r24, Z
 23e:	0e 94 ff 00 	call	0x1fe	; 0x1fe <Mascara>
	if (Ganador == 2){
 242:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <Ganador>
 246:	82 30       	cpi	r24, 0x02	; 2
 248:	21 f4       	brne	.+8      	; 0x252 <Si_Jugar+0x34>
		Display7S(2);
 24a:	0e 94 5d 00 	call	0xba	; 0xba <Display7S>
		Jugador1 = 0;
 24e:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <Jugador1>
	}
	if (Ganador == 1){
 252:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <Ganador>
 256:	81 30       	cpi	r24, 0x01	; 1
 258:	21 f4       	brne	.+8      	; 0x262 <Si_Jugar+0x44>
		Display7S(1);
 25a:	0e 94 5d 00 	call	0xba	; 0xba <Display7S>
		Jugador2 = 0;
 25e:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <Jugador2>
 262:	08 95       	ret

00000264 <main>:
void Si_Jugar(void);
void Mascara(uint8_t number1, uint8_t number2);

int main(void){
	//cli();
	initPinChange0(falling_edge); // INTERRUPCION EXTERNA PB0 FLANCO DE BAJADA
 264:	80 e0       	ldi	r24, 0x00	; 0
 266:	0e 94 a8 00 	call	0x150	; 0x150 <initPinChange0>
	initPinChange1(falling_edge); // INTERRUPCION EXTERNA PB1 FLANCO DE BAJADA
 26a:	80 e0       	ldi	r24, 0x00	; 0
 26c:	0e 94 c2 00 	call	0x184	; 0x184 <initPinChange1>
	initPinChange2(falling_edge); // INTERRUPCION EXTERNA PB2 FLANCO DE BAJADA
 270:	80 e0       	ldi	r24, 0x00	; 0
 272:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <initPinChange2>
	UCSR0B = 0; // DESHABILITA TX Y RX
 276:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	DDRD = 255;
 27a:	8f ef       	ldi	r24, 0xFF	; 255
 27c:	8a b9       	out	0x0a, r24	; 10
	DDRC = 255;
 27e:	87 b9       	out	0x07, r24	; 7
	DDRB = 0;
 280:	14 b8       	out	0x04, r1	; 4
	DDRB |= (1 << PORTB5);
 282:	84 b1       	in	r24, 0x04	; 4
 284:	80 62       	ori	r24, 0x20	; 32
 286:	84 b9       	out	0x04, r24	; 4
	STATE = 0;
 288:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <STATE>
	sei();
 28c:	78 94       	sei
    while (1){
		switch (STATE){
 28e:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <STATE>
 292:	88 23       	and	r24, r24
 294:	19 f0       	breq	.+6      	; 0x29c <main+0x38>
 296:	81 30       	cpi	r24, 0x01	; 1
 298:	39 f0       	breq	.+14     	; 0x2a8 <main+0x44>
 29a:	0b c0       	rjmp	.+22     	; 0x2b2 <main+0x4e>
			case 0: No_Jugar(); NEXT_STATE = 1; break; // JUEGO NO INICIADO
 29c:	0e 94 f6 00 	call	0x1ec	; 0x1ec <No_Jugar>
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <NEXT_STATE>
 2a6:	f3 cf       	rjmp	.-26     	; 0x28e <main+0x2a>
			case 1: Si_Jugar(); NEXT_STATE = 0; break; // JUEGO INICIADO
 2a8:	0e 94 0f 01 	call	0x21e	; 0x21e <Si_Jugar>
 2ac:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <NEXT_STATE>
 2b0:	ee cf       	rjmp	.-36     	; 0x28e <main+0x2a>
			default: STATE = 0; break;
 2b2:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <STATE>
 2b6:	eb cf       	rjmp	.-42     	; 0x28e <main+0x2a>

000002b8 <__vector_3>:
	PORTD &= ~((0x0F) | (0xF0));
	PORTD |= number1; // ESCRIBIMOS EN PD0-PD3
	PORTD |= (number2 << 4); // ESCRIBIMOS EN PD4-PD7
}

ISR (PCINT0_vect){
 2b8:	1f 92       	push	r1
 2ba:	0f 92       	push	r0
 2bc:	0f b6       	in	r0, 0x3f	; 63
 2be:	0f 92       	push	r0
 2c0:	11 24       	eor	r1, r1
 2c2:	2f 93       	push	r18
 2c4:	3f 93       	push	r19
 2c6:	4f 93       	push	r20
 2c8:	5f 93       	push	r21
 2ca:	6f 93       	push	r22
 2cc:	7f 93       	push	r23
 2ce:	8f 93       	push	r24
 2d0:	9f 93       	push	r25
 2d2:	af 93       	push	r26
 2d4:	bf 93       	push	r27
 2d6:	ef 93       	push	r30
 2d8:	ff 93       	push	r31
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2da:	2f ef       	ldi	r18, 0xFF	; 255
 2dc:	81 ee       	ldi	r24, 0xE1	; 225
 2de:	94 e0       	ldi	r25, 0x04	; 4
 2e0:	21 50       	subi	r18, 0x01	; 1
 2e2:	80 40       	sbci	r24, 0x00	; 0
 2e4:	90 40       	sbci	r25, 0x00	; 0
 2e6:	e1 f7       	brne	.-8      	; 0x2e0 <__vector_3+0x28>
 2e8:	00 c0       	rjmp	.+0      	; 0x2ea <__vector_3+0x32>
 2ea:	00 00       	nop
	_delay_ms(100);
	if (!(PINB & (1 << PORTB0))) {
 2ec:	18 99       	sbic	0x03, 0	; 3
 2ee:	5a c0       	rjmp	.+180    	; 0x3a4 <__vector_3+0xec>
		if (STATE == 0){
 2f0:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <STATE>
 2f4:	81 11       	cpse	r24, r1
 2f6:	4c c0       	rjmp	.+152    	; 0x390 <__vector_3+0xd8>
			Display7S(5);
 2f8:	85 e0       	ldi	r24, 0x05	; 5
 2fa:	0e 94 5d 00 	call	0xba	; 0xba <Display7S>
 2fe:	2f ef       	ldi	r18, 0xFF	; 255
 300:	89 e6       	ldi	r24, 0x69	; 105
 302:	98 e1       	ldi	r25, 0x18	; 24
 304:	21 50       	subi	r18, 0x01	; 1
 306:	80 40       	sbci	r24, 0x00	; 0
 308:	90 40       	sbci	r25, 0x00	; 0
 30a:	e1 f7       	brne	.-8      	; 0x304 <__vector_3+0x4c>
 30c:	00 c0       	rjmp	.+0      	; 0x30e <__vector_3+0x56>
 30e:	00 00       	nop
			_delay_ms(500);
			Display7S(4);
 310:	84 e0       	ldi	r24, 0x04	; 4
 312:	0e 94 5d 00 	call	0xba	; 0xba <Display7S>
 316:	2f ef       	ldi	r18, 0xFF	; 255
 318:	89 e6       	ldi	r24, 0x69	; 105
 31a:	98 e1       	ldi	r25, 0x18	; 24
 31c:	21 50       	subi	r18, 0x01	; 1
 31e:	80 40       	sbci	r24, 0x00	; 0
 320:	90 40       	sbci	r25, 0x00	; 0
 322:	e1 f7       	brne	.-8      	; 0x31c <__vector_3+0x64>
 324:	00 c0       	rjmp	.+0      	; 0x326 <__vector_3+0x6e>
 326:	00 00       	nop
			_delay_ms(500);
			Display7S(3);
 328:	83 e0       	ldi	r24, 0x03	; 3
 32a:	0e 94 5d 00 	call	0xba	; 0xba <Display7S>
 32e:	2f ef       	ldi	r18, 0xFF	; 255
 330:	89 e6       	ldi	r24, 0x69	; 105
 332:	98 e1       	ldi	r25, 0x18	; 24
 334:	21 50       	subi	r18, 0x01	; 1
 336:	80 40       	sbci	r24, 0x00	; 0
 338:	90 40       	sbci	r25, 0x00	; 0
 33a:	e1 f7       	brne	.-8      	; 0x334 <__vector_3+0x7c>
 33c:	00 c0       	rjmp	.+0      	; 0x33e <__vector_3+0x86>
 33e:	00 00       	nop
			_delay_ms(500);
			Display7S(2);
 340:	82 e0       	ldi	r24, 0x02	; 2
 342:	0e 94 5d 00 	call	0xba	; 0xba <Display7S>
 346:	2f ef       	ldi	r18, 0xFF	; 255
 348:	89 e6       	ldi	r24, 0x69	; 105
 34a:	98 e1       	ldi	r25, 0x18	; 24
 34c:	21 50       	subi	r18, 0x01	; 1
 34e:	80 40       	sbci	r24, 0x00	; 0
 350:	90 40       	sbci	r25, 0x00	; 0
 352:	e1 f7       	brne	.-8      	; 0x34c <__vector_3+0x94>
 354:	00 c0       	rjmp	.+0      	; 0x356 <__vector_3+0x9e>
 356:	00 00       	nop
			_delay_ms(500);
			Display7S(1);
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	0e 94 5d 00 	call	0xba	; 0xba <Display7S>
 35e:	2f ef       	ldi	r18, 0xFF	; 255
 360:	89 e6       	ldi	r24, 0x69	; 105
 362:	98 e1       	ldi	r25, 0x18	; 24
 364:	21 50       	subi	r18, 0x01	; 1
 366:	80 40       	sbci	r24, 0x00	; 0
 368:	90 40       	sbci	r25, 0x00	; 0
 36a:	e1 f7       	brne	.-8      	; 0x364 <__vector_3+0xac>
 36c:	00 c0       	rjmp	.+0      	; 0x36e <__vector_3+0xb6>
 36e:	00 00       	nop
			_delay_ms(500);
			Display7S(0);
 370:	80 e0       	ldi	r24, 0x00	; 0
 372:	0e 94 5d 00 	call	0xba	; 0xba <Display7S>
 376:	2f ef       	ldi	r18, 0xFF	; 255
 378:	89 e6       	ldi	r24, 0x69	; 105
 37a:	98 e1       	ldi	r25, 0x18	; 24
 37c:	21 50       	subi	r18, 0x01	; 1
 37e:	80 40       	sbci	r24, 0x00	; 0
 380:	90 40       	sbci	r25, 0x00	; 0
 382:	e1 f7       	brne	.-8      	; 0x37c <__vector_3+0xc4>
 384:	00 c0       	rjmp	.+0      	; 0x386 <__vector_3+0xce>
 386:	00 00       	nop
			_delay_ms(500);
			Display7S(10);
 388:	8a e0       	ldi	r24, 0x0A	; 10
 38a:	0e 94 5d 00 	call	0xba	; 0xba <Display7S>
 38e:	06 c0       	rjmp	.+12     	; 0x39c <__vector_3+0xe4>
		}else{
			Jugador1 = 0;
 390:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <Jugador1>
			Jugador2 = 0;
 394:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <Jugador2>
			Ganador = 0;
 398:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <Ganador>
		}
		STATE = NEXT_STATE;
 39c:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <NEXT_STATE>
 3a0:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <STATE>
	}
	
	if (!(PINB & (1 << PORTB1))) {
 3a4:	19 99       	sbic	0x03, 1	; 3
 3a6:	1a c0       	rjmp	.+52     	; 0x3dc <__vector_3+0x124>
		if (STATE != 0 && bloqueoJ1 == 0){
 3a8:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <STATE>
 3ac:	88 23       	and	r24, r24
 3ae:	c1 f0       	breq	.+48     	; 0x3e0 <__vector_3+0x128>
 3b0:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <bloqueoJ1>
 3b4:	81 11       	cpse	r24, r1
 3b6:	14 c0       	rjmp	.+40     	; 0x3e0 <__vector_3+0x128>
			if (Jugador1 < 4){
 3b8:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <Jugador1>
 3bc:	84 30       	cpi	r24, 0x04	; 4
 3be:	18 f4       	brcc	.+6      	; 0x3c6 <__vector_3+0x10e>
				Jugador1++;
 3c0:	8f 5f       	subi	r24, 0xFF	; 255
 3c2:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <Jugador1>
			}
			if (Jugador1 == 4){
 3c6:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <Jugador1>
 3ca:	84 30       	cpi	r24, 0x04	; 4
 3cc:	19 f4       	brne	.+6      	; 0x3d4 <__vector_3+0x11c>
				Ganador = 1;
 3ce:	81 e0       	ldi	r24, 0x01	; 1
 3d0:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <Ganador>
			}
			bloqueoJ1 = 1;		// ACTIVAR BLOQUE0 PARA EVITAR INCREMENTO CONTINUO
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <bloqueoJ1>
 3da:	02 c0       	rjmp	.+4      	; 0x3e0 <__vector_3+0x128>
		}
	} else {
		bloqueoJ1 = 0;			// RESETEAR BLOQUEO CUANDO SE SUELTA EL BOTON
 3dc:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <bloqueoJ1>
	}
	
	if (!(PINB & (1 << PORTB2))) {
 3e0:	1a 99       	sbic	0x03, 2	; 3
 3e2:	18 c0       	rjmp	.+48     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
		if (STATE != 0 && bloqueoJ2 == 0){
 3e4:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <STATE>
 3e8:	88 23       	and	r24, r24
 3ea:	b1 f0       	breq	.+44     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 3ec:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 3f0:	81 11       	cpse	r24, r1
 3f2:	12 c0       	rjmp	.+36     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
			if (Jugador2 < 4){
 3f4:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <Jugador2>
 3f8:	84 30       	cpi	r24, 0x04	; 4
 3fa:	40 f4       	brcc	.+16     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
				Jugador2++;
 3fc:	8f 5f       	subi	r24, 0xFF	; 255
 3fe:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <Jugador2>
				if (Jugador2 == 4){
 402:	84 30       	cpi	r24, 0x04	; 4
 404:	19 f4       	brne	.+6      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
					Ganador = 2;
 406:	82 e0       	ldi	r24, 0x02	; 2
 408:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <Ganador>
				}
			}
			bloqueoJ2 = 1;
 40c:	81 e0       	ldi	r24, 0x01	; 1
 40e:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 412:	02 c0       	rjmp	.+4      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
		}
	} else {
		bloqueoJ2 = 0;
 414:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__data_end>
	}
}
 418:	ff 91       	pop	r31
 41a:	ef 91       	pop	r30
 41c:	bf 91       	pop	r27
 41e:	af 91       	pop	r26
 420:	9f 91       	pop	r25
 422:	8f 91       	pop	r24
 424:	7f 91       	pop	r23
 426:	6f 91       	pop	r22
 428:	5f 91       	pop	r21
 42a:	4f 91       	pop	r20
 42c:	3f 91       	pop	r19
 42e:	2f 91       	pop	r18
 430:	0f 90       	pop	r0
 432:	0f be       	out	0x3f, r0	; 63
 434:	0f 90       	pop	r0
 436:	1f 90       	pop	r1
 438:	18 95       	reti

0000043a <__tablejump2__>:
 43a:	ee 0f       	add	r30, r30
 43c:	ff 1f       	adc	r31, r31
 43e:	05 90       	lpm	r0, Z+
 440:	f4 91       	lpm	r31, Z
 442:	e0 2d       	mov	r30, r0
 444:	09 94       	ijmp

00000446 <_exit>:
 446:	f8 94       	cli

00000448 <__stop_program>:
 448:	ff cf       	rjmp	.-2      	; 0x448 <__stop_program>
