
Laboratorio 6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a50  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  08004c20  08004c20  00005c20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d74  08004d74  0000605c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004d74  08004d74  00005d74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d7c  08004d7c  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d7c  08004d7c  00005d7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004d80  08004d80  00005d80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004d84  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003ac  2000005c  08004de0  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000408  08004de0  00006408  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a64f  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c55  00000000  00000000  000106db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000898  00000000  00000000  00012330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000696  00000000  00000000  00012bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000226a2  00000000  00000000  0001325e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b899  00000000  00000000  00035900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d542a  00000000  00000000  00041199  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001165c3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002768  00000000  00000000  00116608  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000089  00000000  00000000  00118d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004c08 	.word	0x08004c08

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08004c08 	.word	0x08004c08

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b988 	b.w	80005e8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	468e      	mov	lr, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	4688      	mov	r8, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d962      	bls.n	80003cc <__udivmoddi4+0xdc>
 8000306:	fab2 f682 	clz	r6, r2
 800030a:	b14e      	cbz	r6, 8000320 <__udivmoddi4+0x30>
 800030c:	f1c6 0320 	rsb	r3, r6, #32
 8000310:	fa01 f806 	lsl.w	r8, r1, r6
 8000314:	fa20 f303 	lsr.w	r3, r0, r3
 8000318:	40b7      	lsls	r7, r6
 800031a:	ea43 0808 	orr.w	r8, r3, r8
 800031e:	40b4      	lsls	r4, r6
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fbb8 f1fe 	udiv	r1, r8, lr
 800032c:	0c23      	lsrs	r3, r4, #16
 800032e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000332:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000336:	fb01 f20c 	mul.w	r2, r1, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0x62>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f101 30ff 	add.w	r0, r1, #4294967295
 8000344:	f080 80ea 	bcs.w	800051c <__udivmoddi4+0x22c>
 8000348:	429a      	cmp	r2, r3
 800034a:	f240 80e7 	bls.w	800051c <__udivmoddi4+0x22c>
 800034e:	3902      	subs	r1, #2
 8000350:	443b      	add	r3, r7
 8000352:	1a9a      	subs	r2, r3, r2
 8000354:	b2a3      	uxth	r3, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000362:	fb00 fc0c 	mul.w	ip, r0, ip
 8000366:	459c      	cmp	ip, r3
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x8e>
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	f080 80d6 	bcs.w	8000520 <__udivmoddi4+0x230>
 8000374:	459c      	cmp	ip, r3
 8000376:	f240 80d3 	bls.w	8000520 <__udivmoddi4+0x230>
 800037a:	443b      	add	r3, r7
 800037c:	3802      	subs	r0, #2
 800037e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000382:	eba3 030c 	sub.w	r3, r3, ip
 8000386:	2100      	movs	r1, #0
 8000388:	b11d      	cbz	r5, 8000392 <__udivmoddi4+0xa2>
 800038a:	40f3      	lsrs	r3, r6
 800038c:	2200      	movs	r2, #0
 800038e:	e9c5 3200 	strd	r3, r2, [r5]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d905      	bls.n	80003a6 <__udivmoddi4+0xb6>
 800039a:	b10d      	cbz	r5, 80003a0 <__udivmoddi4+0xb0>
 800039c:	e9c5 0100 	strd	r0, r1, [r5]
 80003a0:	2100      	movs	r1, #0
 80003a2:	4608      	mov	r0, r1
 80003a4:	e7f5      	b.n	8000392 <__udivmoddi4+0xa2>
 80003a6:	fab3 f183 	clz	r1, r3
 80003aa:	2900      	cmp	r1, #0
 80003ac:	d146      	bne.n	800043c <__udivmoddi4+0x14c>
 80003ae:	4573      	cmp	r3, lr
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0xc8>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 8105 	bhi.w	80005c2 <__udivmoddi4+0x2d2>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	4690      	mov	r8, r2
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0e5      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003c6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ca:	e7e2      	b.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f000 8090 	beq.w	80004f2 <__udivmoddi4+0x202>
 80003d2:	fab2 f682 	clz	r6, r2
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	f040 80a4 	bne.w	8000524 <__udivmoddi4+0x234>
 80003dc:	1a8a      	subs	r2, r1, r2
 80003de:	0c03      	lsrs	r3, r0, #16
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	b280      	uxth	r0, r0
 80003e6:	b2bc      	uxth	r4, r7
 80003e8:	2101      	movs	r1, #1
 80003ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80003f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f6:	fb04 f20c 	mul.w	r2, r4, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d907      	bls.n	800040e <__udivmoddi4+0x11e>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x11c>
 8000406:	429a      	cmp	r2, r3
 8000408:	f200 80e0 	bhi.w	80005cc <__udivmoddi4+0x2dc>
 800040c:	46c4      	mov	ip, r8
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	fbb3 f2fe 	udiv	r2, r3, lr
 8000414:	fb0e 3312 	mls	r3, lr, r2, r3
 8000418:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800041c:	fb02 f404 	mul.w	r4, r2, r4
 8000420:	429c      	cmp	r4, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x144>
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	f102 30ff 	add.w	r0, r2, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x142>
 800042c:	429c      	cmp	r4, r3
 800042e:	f200 80ca 	bhi.w	80005c6 <__udivmoddi4+0x2d6>
 8000432:	4602      	mov	r2, r0
 8000434:	1b1b      	subs	r3, r3, r4
 8000436:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800043a:	e7a5      	b.n	8000388 <__udivmoddi4+0x98>
 800043c:	f1c1 0620 	rsb	r6, r1, #32
 8000440:	408b      	lsls	r3, r1
 8000442:	fa22 f706 	lsr.w	r7, r2, r6
 8000446:	431f      	orrs	r7, r3
 8000448:	fa0e f401 	lsl.w	r4, lr, r1
 800044c:	fa20 f306 	lsr.w	r3, r0, r6
 8000450:	fa2e fe06 	lsr.w	lr, lr, r6
 8000454:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000458:	4323      	orrs	r3, r4
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	fa1f fc87 	uxth.w	ip, r7
 8000462:	fbbe f0f9 	udiv	r0, lr, r9
 8000466:	0c1c      	lsrs	r4, r3, #16
 8000468:	fb09 ee10 	mls	lr, r9, r0, lr
 800046c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000470:	fb00 fe0c 	mul.w	lr, r0, ip
 8000474:	45a6      	cmp	lr, r4
 8000476:	fa02 f201 	lsl.w	r2, r2, r1
 800047a:	d909      	bls.n	8000490 <__udivmoddi4+0x1a0>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000482:	f080 809c 	bcs.w	80005be <__udivmoddi4+0x2ce>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f240 8099 	bls.w	80005be <__udivmoddi4+0x2ce>
 800048c:	3802      	subs	r0, #2
 800048e:	443c      	add	r4, r7
 8000490:	eba4 040e 	sub.w	r4, r4, lr
 8000494:	fa1f fe83 	uxth.w	lr, r3
 8000498:	fbb4 f3f9 	udiv	r3, r4, r9
 800049c:	fb09 4413 	mls	r4, r9, r3, r4
 80004a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a8:	45a4      	cmp	ip, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x1ce>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80004b2:	f080 8082 	bcs.w	80005ba <__udivmoddi4+0x2ca>
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d97f      	bls.n	80005ba <__udivmoddi4+0x2ca>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	443c      	add	r4, r7
 80004be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ca:	4564      	cmp	r4, ip
 80004cc:	4673      	mov	r3, lr
 80004ce:	46e1      	mov	r9, ip
 80004d0:	d362      	bcc.n	8000598 <__udivmoddi4+0x2a8>
 80004d2:	d05f      	beq.n	8000594 <__udivmoddi4+0x2a4>
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x1fe>
 80004d6:	ebb8 0203 	subs.w	r2, r8, r3
 80004da:	eb64 0409 	sbc.w	r4, r4, r9
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	431e      	orrs	r6, r3
 80004e8:	40cc      	lsrs	r4, r1
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e74f      	b.n	8000392 <__udivmoddi4+0xa2>
 80004f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f6:	0c01      	lsrs	r1, r0, #16
 80004f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004fc:	b280      	uxth	r0, r0
 80004fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000502:	463b      	mov	r3, r7
 8000504:	4638      	mov	r0, r7
 8000506:	463c      	mov	r4, r7
 8000508:	46b8      	mov	r8, r7
 800050a:	46be      	mov	lr, r7
 800050c:	2620      	movs	r6, #32
 800050e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000512:	eba2 0208 	sub.w	r2, r2, r8
 8000516:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800051a:	e766      	b.n	80003ea <__udivmoddi4+0xfa>
 800051c:	4601      	mov	r1, r0
 800051e:	e718      	b.n	8000352 <__udivmoddi4+0x62>
 8000520:	4610      	mov	r0, r2
 8000522:	e72c      	b.n	800037e <__udivmoddi4+0x8e>
 8000524:	f1c6 0220 	rsb	r2, r6, #32
 8000528:	fa2e f302 	lsr.w	r3, lr, r2
 800052c:	40b7      	lsls	r7, r6
 800052e:	40b1      	lsls	r1, r6
 8000530:	fa20 f202 	lsr.w	r2, r0, r2
 8000534:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000538:	430a      	orrs	r2, r1
 800053a:	fbb3 f8fe 	udiv	r8, r3, lr
 800053e:	b2bc      	uxth	r4, r7
 8000540:	fb0e 3318 	mls	r3, lr, r8, r3
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb08 f904 	mul.w	r9, r8, r4
 800054e:	40b0      	lsls	r0, r6
 8000550:	4589      	cmp	r9, r1
 8000552:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000556:	b280      	uxth	r0, r0
 8000558:	d93e      	bls.n	80005d8 <__udivmoddi4+0x2e8>
 800055a:	1879      	adds	r1, r7, r1
 800055c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000560:	d201      	bcs.n	8000566 <__udivmoddi4+0x276>
 8000562:	4589      	cmp	r9, r1
 8000564:	d81f      	bhi.n	80005a6 <__udivmoddi4+0x2b6>
 8000566:	eba1 0109 	sub.w	r1, r1, r9
 800056a:	fbb1 f9fe 	udiv	r9, r1, lr
 800056e:	fb09 f804 	mul.w	r8, r9, r4
 8000572:	fb0e 1119 	mls	r1, lr, r9, r1
 8000576:	b292      	uxth	r2, r2
 8000578:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800057c:	4542      	cmp	r2, r8
 800057e:	d229      	bcs.n	80005d4 <__udivmoddi4+0x2e4>
 8000580:	18ba      	adds	r2, r7, r2
 8000582:	f109 31ff 	add.w	r1, r9, #4294967295
 8000586:	d2c4      	bcs.n	8000512 <__udivmoddi4+0x222>
 8000588:	4542      	cmp	r2, r8
 800058a:	d2c2      	bcs.n	8000512 <__udivmoddi4+0x222>
 800058c:	f1a9 0102 	sub.w	r1, r9, #2
 8000590:	443a      	add	r2, r7
 8000592:	e7be      	b.n	8000512 <__udivmoddi4+0x222>
 8000594:	45f0      	cmp	r8, lr
 8000596:	d29d      	bcs.n	80004d4 <__udivmoddi4+0x1e4>
 8000598:	ebbe 0302 	subs.w	r3, lr, r2
 800059c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005a0:	3801      	subs	r0, #1
 80005a2:	46e1      	mov	r9, ip
 80005a4:	e796      	b.n	80004d4 <__udivmoddi4+0x1e4>
 80005a6:	eba7 0909 	sub.w	r9, r7, r9
 80005aa:	4449      	add	r1, r9
 80005ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80005b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b4:	fb09 f804 	mul.w	r8, r9, r4
 80005b8:	e7db      	b.n	8000572 <__udivmoddi4+0x282>
 80005ba:	4673      	mov	r3, lr
 80005bc:	e77f      	b.n	80004be <__udivmoddi4+0x1ce>
 80005be:	4650      	mov	r0, sl
 80005c0:	e766      	b.n	8000490 <__udivmoddi4+0x1a0>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e6fd      	b.n	80003c2 <__udivmoddi4+0xd2>
 80005c6:	443b      	add	r3, r7
 80005c8:	3a02      	subs	r2, #2
 80005ca:	e733      	b.n	8000434 <__udivmoddi4+0x144>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	443b      	add	r3, r7
 80005d2:	e71c      	b.n	800040e <__udivmoddi4+0x11e>
 80005d4:	4649      	mov	r1, r9
 80005d6:	e79c      	b.n	8000512 <__udivmoddi4+0x222>
 80005d8:	eba1 0109 	sub.w	r1, r1, r9
 80005dc:	46c4      	mov	ip, r8
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fb09 f804 	mul.w	r8, r9, r4
 80005e6:	e7c4      	b.n	8000572 <__udivmoddi4+0x282>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f0:	f000 fd68 	bl	80010c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f4:	f000 f880 	bl	80006f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f8:	f000 f9de 	bl	80009b8 <MX_GPIO_Init>
  MX_DMA_Init();
 80005fc:	f000 f99e 	bl	800093c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000600:	f000 f972 	bl	80008e8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000604:	f000 f8e6 	bl	80007d4 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000608:	f000 f944 	bl	8000894 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &rxData, 1); // Activar interrupción UART
 800060c:	2201      	movs	r2, #1
 800060e:	492c      	ldr	r1, [pc, #176]	@ (80006c0 <main+0xd4>)
 8000610:	482c      	ldr	r0, [pc, #176]	@ (80006c4 <main+0xd8>)
 8000612:	f002 ff35 	bl	8003480 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart1, &rxData1, 1);
 8000616:	2201      	movs	r2, #1
 8000618:	492b      	ldr	r1, [pc, #172]	@ (80006c8 <main+0xdc>)
 800061a:	482c      	ldr	r0, [pc, #176]	@ (80006cc <main+0xe0>)
 800061c:	f002 ff30 	bl	8003480 <HAL_UART_Receive_IT>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcValues, 2); 	// Iniciar ADC con DMA
 8000620:	2202      	movs	r2, #2
 8000622:	492b      	ldr	r1, [pc, #172]	@ (80006d0 <main+0xe4>)
 8000624:	482b      	ldr	r0, [pc, #172]	@ (80006d4 <main+0xe8>)
 8000626:	f000 fe27 	bl	8001278 <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {

	  flag = 0;
 800062a:	4b2b      	ldr	r3, [pc, #172]	@ (80006d8 <main+0xec>)
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
	  if (x > 3000) sprintf(msg, "CONTROL 2: R(Derecha)\r\n"), flag = 1;
 8000630:	4b2a      	ldr	r3, [pc, #168]	@ (80006dc <main+0xf0>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8000638:	4293      	cmp	r3, r2
 800063a:	dd07      	ble.n	800064c <main+0x60>
 800063c:	4928      	ldr	r1, [pc, #160]	@ (80006e0 <main+0xf4>)
 800063e:	4829      	ldr	r0, [pc, #164]	@ (80006e4 <main+0xf8>)
 8000640:	f003 fe42 	bl	80042c8 <siprintf>
 8000644:	4b24      	ldr	r3, [pc, #144]	@ (80006d8 <main+0xec>)
 8000646:	2201      	movs	r2, #1
 8000648:	601a      	str	r2, [r3, #0]
 800064a:	e026      	b.n	800069a <main+0xae>
	  else if (x < 1000) sprintf(msg, "CONTROL 2: L(Izquierda)\r\n"), flag = 1;
 800064c:	4b23      	ldr	r3, [pc, #140]	@ (80006dc <main+0xf0>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000654:	da07      	bge.n	8000666 <main+0x7a>
 8000656:	4924      	ldr	r1, [pc, #144]	@ (80006e8 <main+0xfc>)
 8000658:	4822      	ldr	r0, [pc, #136]	@ (80006e4 <main+0xf8>)
 800065a:	f003 fe35 	bl	80042c8 <siprintf>
 800065e:	4b1e      	ldr	r3, [pc, #120]	@ (80006d8 <main+0xec>)
 8000660:	2201      	movs	r2, #1
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	e019      	b.n	800069a <main+0xae>
	  else if (y > 3000) sprintf(msg, "CONTROL 2: U(Arriba)\r\n"), flag = 1;
 8000666:	4b21      	ldr	r3, [pc, #132]	@ (80006ec <main+0x100>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800066e:	4293      	cmp	r3, r2
 8000670:	dd07      	ble.n	8000682 <main+0x96>
 8000672:	491f      	ldr	r1, [pc, #124]	@ (80006f0 <main+0x104>)
 8000674:	481b      	ldr	r0, [pc, #108]	@ (80006e4 <main+0xf8>)
 8000676:	f003 fe27 	bl	80042c8 <siprintf>
 800067a:	4b17      	ldr	r3, [pc, #92]	@ (80006d8 <main+0xec>)
 800067c:	2201      	movs	r2, #1
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	e00b      	b.n	800069a <main+0xae>
	  else if (y < 1000) sprintf(msg, "CONTROL 2: D(Abajo)\r\n"), flag = 1;
 8000682:	4b1a      	ldr	r3, [pc, #104]	@ (80006ec <main+0x100>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800068a:	da06      	bge.n	800069a <main+0xae>
 800068c:	4919      	ldr	r1, [pc, #100]	@ (80006f4 <main+0x108>)
 800068e:	4815      	ldr	r0, [pc, #84]	@ (80006e4 <main+0xf8>)
 8000690:	f003 fe1a 	bl	80042c8 <siprintf>
 8000694:	4b10      	ldr	r3, [pc, #64]	@ (80006d8 <main+0xec>)
 8000696:	2201      	movs	r2, #1
 8000698:	601a      	str	r2, [r3, #0]

	  if (flag == 1) {
 800069a:	4b0f      	ldr	r3, [pc, #60]	@ (80006d8 <main+0xec>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	2b01      	cmp	r3, #1
 80006a0:	d1c3      	bne.n	800062a <main+0x3e>
		  HAL_UART_Transmit_IT(&huart2, (uint8_t*)msg, strlen(msg));
 80006a2:	4810      	ldr	r0, [pc, #64]	@ (80006e4 <main+0xf8>)
 80006a4:	f7ff fdb4 	bl	8000210 <strlen>
 80006a8:	4603      	mov	r3, r0
 80006aa:	b29b      	uxth	r3, r3
 80006ac:	461a      	mov	r2, r3
 80006ae:	490d      	ldr	r1, [pc, #52]	@ (80006e4 <main+0xf8>)
 80006b0:	4804      	ldr	r0, [pc, #16]	@ (80006c4 <main+0xd8>)
 80006b2:	f002 feaf 	bl	8003414 <HAL_UART_Transmit_IT>
		  HAL_Delay(500); // Espera para evitar spam en la terminal
 80006b6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80006ba:	f000 fd75 	bl	80011a8 <HAL_Delay>
	  flag = 0;
 80006be:	e7b4      	b.n	800062a <main+0x3e>
 80006c0:	20000270 	.word	0x20000270
 80006c4:	20000168 	.word	0x20000168
 80006c8:	20000271 	.word	0x20000271
 80006cc:	20000120 	.word	0x20000120
 80006d0:	200002a8 	.word	0x200002a8
 80006d4:	20000078 	.word	0x20000078
 80006d8:	200002ac 	.word	0x200002ac
 80006dc:	200002b0 	.word	0x200002b0
 80006e0:	08004c20 	.word	0x08004c20
 80006e4:	20000274 	.word	0x20000274
 80006e8:	08004c38 	.word	0x08004c38
 80006ec:	200002b4 	.word	0x200002b4
 80006f0:	08004c54 	.word	0x08004c54
 80006f4:	08004c6c 	.word	0x08004c6c

080006f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b094      	sub	sp, #80	@ 0x50
 80006fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006fe:	f107 031c 	add.w	r3, r7, #28
 8000702:	2234      	movs	r2, #52	@ 0x34
 8000704:	2100      	movs	r1, #0
 8000706:	4618      	mov	r0, r3
 8000708:	f003 fe00 	bl	800430c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800070c:	f107 0308 	add.w	r3, r7, #8
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	605a      	str	r2, [r3, #4]
 8000716:	609a      	str	r2, [r3, #8]
 8000718:	60da      	str	r2, [r3, #12]
 800071a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800071c:	2300      	movs	r3, #0
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	4b2a      	ldr	r3, [pc, #168]	@ (80007cc <SystemClock_Config+0xd4>)
 8000722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000724:	4a29      	ldr	r2, [pc, #164]	@ (80007cc <SystemClock_Config+0xd4>)
 8000726:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800072a:	6413      	str	r3, [r2, #64]	@ 0x40
 800072c:	4b27      	ldr	r3, [pc, #156]	@ (80007cc <SystemClock_Config+0xd4>)
 800072e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000730:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000738:	2300      	movs	r3, #0
 800073a:	603b      	str	r3, [r7, #0]
 800073c:	4b24      	ldr	r3, [pc, #144]	@ (80007d0 <SystemClock_Config+0xd8>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000744:	4a22      	ldr	r2, [pc, #136]	@ (80007d0 <SystemClock_Config+0xd8>)
 8000746:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800074a:	6013      	str	r3, [r2, #0]
 800074c:	4b20      	ldr	r3, [pc, #128]	@ (80007d0 <SystemClock_Config+0xd8>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000754:	603b      	str	r3, [r7, #0]
 8000756:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000758:	2302      	movs	r3, #2
 800075a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800075c:	2301      	movs	r3, #1
 800075e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000760:	2310      	movs	r3, #16
 8000762:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000764:	2302      	movs	r3, #2
 8000766:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000768:	2300      	movs	r3, #0
 800076a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800076c:	2308      	movs	r3, #8
 800076e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000770:	2340      	movs	r3, #64	@ 0x40
 8000772:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000774:	2302      	movs	r3, #2
 8000776:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000778:	2302      	movs	r3, #2
 800077a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800077c:	2302      	movs	r3, #2
 800077e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000780:	f107 031c 	add.w	r3, r7, #28
 8000784:	4618      	mov	r0, r3
 8000786:	f002 fb57 	bl	8002e38 <HAL_RCC_OscConfig>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000790:	f000 fa26 	bl	8000be0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000794:	230f      	movs	r3, #15
 8000796:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000798:	2302      	movs	r3, #2
 800079a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800079c:	2300      	movs	r3, #0
 800079e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007a4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80007a6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80007aa:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007ac:	f107 0308 	add.w	r3, r7, #8
 80007b0:	2102      	movs	r1, #2
 80007b2:	4618      	mov	r0, r3
 80007b4:	f001 fff6 	bl	80027a4 <HAL_RCC_ClockConfig>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80007be:	f000 fa0f 	bl	8000be0 <Error_Handler>
  }
}
 80007c2:	bf00      	nop
 80007c4:	3750      	adds	r7, #80	@ 0x50
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	40023800 	.word	0x40023800
 80007d0:	40007000 	.word	0x40007000

080007d4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b084      	sub	sp, #16
 80007d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007da:	463b      	mov	r3, r7
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]
 80007e0:	605a      	str	r2, [r3, #4]
 80007e2:	609a      	str	r2, [r3, #8]
 80007e4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007e6:	4b28      	ldr	r3, [pc, #160]	@ (8000888 <MX_ADC1_Init+0xb4>)
 80007e8:	4a28      	ldr	r2, [pc, #160]	@ (800088c <MX_ADC1_Init+0xb8>)
 80007ea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007ec:	4b26      	ldr	r3, [pc, #152]	@ (8000888 <MX_ADC1_Init+0xb4>)
 80007ee:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80007f2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007f4:	4b24      	ldr	r3, [pc, #144]	@ (8000888 <MX_ADC1_Init+0xb4>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80007fa:	4b23      	ldr	r3, [pc, #140]	@ (8000888 <MX_ADC1_Init+0xb4>)
 80007fc:	2201      	movs	r2, #1
 80007fe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000800:	4b21      	ldr	r3, [pc, #132]	@ (8000888 <MX_ADC1_Init+0xb4>)
 8000802:	2201      	movs	r2, #1
 8000804:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000806:	4b20      	ldr	r3, [pc, #128]	@ (8000888 <MX_ADC1_Init+0xb4>)
 8000808:	2200      	movs	r2, #0
 800080a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800080e:	4b1e      	ldr	r3, [pc, #120]	@ (8000888 <MX_ADC1_Init+0xb4>)
 8000810:	2200      	movs	r2, #0
 8000812:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000814:	4b1c      	ldr	r3, [pc, #112]	@ (8000888 <MX_ADC1_Init+0xb4>)
 8000816:	4a1e      	ldr	r2, [pc, #120]	@ (8000890 <MX_ADC1_Init+0xbc>)
 8000818:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800081a:	4b1b      	ldr	r3, [pc, #108]	@ (8000888 <MX_ADC1_Init+0xb4>)
 800081c:	2200      	movs	r2, #0
 800081e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000820:	4b19      	ldr	r3, [pc, #100]	@ (8000888 <MX_ADC1_Init+0xb4>)
 8000822:	2202      	movs	r2, #2
 8000824:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000826:	4b18      	ldr	r3, [pc, #96]	@ (8000888 <MX_ADC1_Init+0xb4>)
 8000828:	2201      	movs	r2, #1
 800082a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800082e:	4b16      	ldr	r3, [pc, #88]	@ (8000888 <MX_ADC1_Init+0xb4>)
 8000830:	2200      	movs	r2, #0
 8000832:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000834:	4814      	ldr	r0, [pc, #80]	@ (8000888 <MX_ADC1_Init+0xb4>)
 8000836:	f000 fcdb 	bl	80011f0 <HAL_ADC_Init>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000840:	f000 f9ce 	bl	8000be0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000844:	2301      	movs	r3, #1
 8000846:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000848:	2301      	movs	r3, #1
 800084a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 800084c:	2304      	movs	r3, #4
 800084e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000850:	463b      	mov	r3, r7
 8000852:	4619      	mov	r1, r3
 8000854:	480c      	ldr	r0, [pc, #48]	@ (8000888 <MX_ADC1_Init+0xb4>)
 8000856:	f000 fe33 	bl	80014c0 <HAL_ADC_ConfigChannel>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000860:	f000 f9be 	bl	8000be0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000864:	2300      	movs	r3, #0
 8000866:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000868:	2302      	movs	r3, #2
 800086a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800086c:	463b      	mov	r3, r7
 800086e:	4619      	mov	r1, r3
 8000870:	4805      	ldr	r0, [pc, #20]	@ (8000888 <MX_ADC1_Init+0xb4>)
 8000872:	f000 fe25 	bl	80014c0 <HAL_ADC_ConfigChannel>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800087c:	f000 f9b0 	bl	8000be0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000880:	bf00      	nop
 8000882:	3710      	adds	r7, #16
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	20000078 	.word	0x20000078
 800088c:	40012000 	.word	0x40012000
 8000890:	0f000001 	.word	0x0f000001

08000894 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000898:	4b11      	ldr	r3, [pc, #68]	@ (80008e0 <MX_USART1_UART_Init+0x4c>)
 800089a:	4a12      	ldr	r2, [pc, #72]	@ (80008e4 <MX_USART1_UART_Init+0x50>)
 800089c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800089e:	4b10      	ldr	r3, [pc, #64]	@ (80008e0 <MX_USART1_UART_Init+0x4c>)
 80008a0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80008a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008a6:	4b0e      	ldr	r3, [pc, #56]	@ (80008e0 <MX_USART1_UART_Init+0x4c>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008ac:	4b0c      	ldr	r3, [pc, #48]	@ (80008e0 <MX_USART1_UART_Init+0x4c>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008b2:	4b0b      	ldr	r3, [pc, #44]	@ (80008e0 <MX_USART1_UART_Init+0x4c>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 80008b8:	4b09      	ldr	r3, [pc, #36]	@ (80008e0 <MX_USART1_UART_Init+0x4c>)
 80008ba:	2204      	movs	r2, #4
 80008bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008be:	4b08      	ldr	r3, [pc, #32]	@ (80008e0 <MX_USART1_UART_Init+0x4c>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c4:	4b06      	ldr	r3, [pc, #24]	@ (80008e0 <MX_USART1_UART_Init+0x4c>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008ca:	4805      	ldr	r0, [pc, #20]	@ (80008e0 <MX_USART1_UART_Init+0x4c>)
 80008cc:	f002 fd52 	bl	8003374 <HAL_UART_Init>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80008d6:	f000 f983 	bl	8000be0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	20000120 	.word	0x20000120
 80008e4:	40011000 	.word	0x40011000

080008e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008ec:	4b11      	ldr	r3, [pc, #68]	@ (8000934 <MX_USART2_UART_Init+0x4c>)
 80008ee:	4a12      	ldr	r2, [pc, #72]	@ (8000938 <MX_USART2_UART_Init+0x50>)
 80008f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80008f2:	4b10      	ldr	r3, [pc, #64]	@ (8000934 <MX_USART2_UART_Init+0x4c>)
 80008f4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80008f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000934 <MX_USART2_UART_Init+0x4c>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000900:	4b0c      	ldr	r3, [pc, #48]	@ (8000934 <MX_USART2_UART_Init+0x4c>)
 8000902:	2200      	movs	r2, #0
 8000904:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000906:	4b0b      	ldr	r3, [pc, #44]	@ (8000934 <MX_USART2_UART_Init+0x4c>)
 8000908:	2200      	movs	r2, #0
 800090a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 800090c:	4b09      	ldr	r3, [pc, #36]	@ (8000934 <MX_USART2_UART_Init+0x4c>)
 800090e:	2208      	movs	r2, #8
 8000910:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000912:	4b08      	ldr	r3, [pc, #32]	@ (8000934 <MX_USART2_UART_Init+0x4c>)
 8000914:	2200      	movs	r2, #0
 8000916:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000918:	4b06      	ldr	r3, [pc, #24]	@ (8000934 <MX_USART2_UART_Init+0x4c>)
 800091a:	2200      	movs	r2, #0
 800091c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800091e:	4805      	ldr	r0, [pc, #20]	@ (8000934 <MX_USART2_UART_Init+0x4c>)
 8000920:	f002 fd28 	bl	8003374 <HAL_UART_Init>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800092a:	f000 f959 	bl	8000be0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800092e:	bf00      	nop
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	20000168 	.word	0x20000168
 8000938:	40004400 	.word	0x40004400

0800093c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	607b      	str	r3, [r7, #4]
 8000946:	4b1b      	ldr	r3, [pc, #108]	@ (80009b4 <MX_DMA_Init+0x78>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094a:	4a1a      	ldr	r2, [pc, #104]	@ (80009b4 <MX_DMA_Init+0x78>)
 800094c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000950:	6313      	str	r3, [r2, #48]	@ 0x30
 8000952:	4b18      	ldr	r3, [pc, #96]	@ (80009b4 <MX_DMA_Init+0x78>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000956:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800095a:	607b      	str	r3, [r7, #4]
 800095c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	603b      	str	r3, [r7, #0]
 8000962:	4b14      	ldr	r3, [pc, #80]	@ (80009b4 <MX_DMA_Init+0x78>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000966:	4a13      	ldr	r2, [pc, #76]	@ (80009b4 <MX_DMA_Init+0x78>)
 8000968:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800096c:	6313      	str	r3, [r2, #48]	@ 0x30
 800096e:	4b11      	ldr	r3, [pc, #68]	@ (80009b4 <MX_DMA_Init+0x78>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000972:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000976:	603b      	str	r3, [r7, #0]
 8000978:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800097a:	2200      	movs	r2, #0
 800097c:	2100      	movs	r1, #0
 800097e:	2011      	movs	r0, #17
 8000980:	f001 f929 	bl	8001bd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000984:	2011      	movs	r0, #17
 8000986:	f001 f942 	bl	8001c0e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800098a:	2200      	movs	r2, #0
 800098c:	2100      	movs	r1, #0
 800098e:	2038      	movs	r0, #56	@ 0x38
 8000990:	f001 f921 	bl	8001bd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000994:	2038      	movs	r0, #56	@ 0x38
 8000996:	f001 f93a 	bl	8001c0e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800099a:	2200      	movs	r2, #0
 800099c:	2100      	movs	r1, #0
 800099e:	203a      	movs	r0, #58	@ 0x3a
 80009a0:	f001 f919 	bl	8001bd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80009a4:	203a      	movs	r0, #58	@ 0x3a
 80009a6:	f001 f932 	bl	8001c0e <HAL_NVIC_EnableIRQ>

}
 80009aa:	bf00      	nop
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40023800 	.word	0x40023800

080009b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b08a      	sub	sp, #40	@ 0x28
 80009bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009be:	f107 0314 	add.w	r3, r7, #20
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
 80009c6:	605a      	str	r2, [r3, #4]
 80009c8:	609a      	str	r2, [r3, #8]
 80009ca:	60da      	str	r2, [r3, #12]
 80009cc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	613b      	str	r3, [r7, #16]
 80009d2:	4b2d      	ldr	r3, [pc, #180]	@ (8000a88 <MX_GPIO_Init+0xd0>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d6:	4a2c      	ldr	r2, [pc, #176]	@ (8000a88 <MX_GPIO_Init+0xd0>)
 80009d8:	f043 0304 	orr.w	r3, r3, #4
 80009dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009de:	4b2a      	ldr	r3, [pc, #168]	@ (8000a88 <MX_GPIO_Init+0xd0>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e2:	f003 0304 	and.w	r3, r3, #4
 80009e6:	613b      	str	r3, [r7, #16]
 80009e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	60fb      	str	r3, [r7, #12]
 80009ee:	4b26      	ldr	r3, [pc, #152]	@ (8000a88 <MX_GPIO_Init+0xd0>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f2:	4a25      	ldr	r2, [pc, #148]	@ (8000a88 <MX_GPIO_Init+0xd0>)
 80009f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009fa:	4b23      	ldr	r3, [pc, #140]	@ (8000a88 <MX_GPIO_Init+0xd0>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	60bb      	str	r3, [r7, #8]
 8000a0a:	4b1f      	ldr	r3, [pc, #124]	@ (8000a88 <MX_GPIO_Init+0xd0>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0e:	4a1e      	ldr	r2, [pc, #120]	@ (8000a88 <MX_GPIO_Init+0xd0>)
 8000a10:	f043 0301 	orr.w	r3, r3, #1
 8000a14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a16:	4b1c      	ldr	r3, [pc, #112]	@ (8000a88 <MX_GPIO_Init+0xd0>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1a:	f003 0301 	and.w	r3, r3, #1
 8000a1e:	60bb      	str	r3, [r7, #8]
 8000a20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	607b      	str	r3, [r7, #4]
 8000a26:	4b18      	ldr	r3, [pc, #96]	@ (8000a88 <MX_GPIO_Init+0xd0>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2a:	4a17      	ldr	r2, [pc, #92]	@ (8000a88 <MX_GPIO_Init+0xd0>)
 8000a2c:	f043 0302 	orr.w	r3, r3, #2
 8000a30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a32:	4b15      	ldr	r3, [pc, #84]	@ (8000a88 <MX_GPIO_Init+0xd0>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a36:	f003 0302 	and.w	r3, r3, #2
 8000a3a:	607b      	str	r3, [r7, #4]
 8000a3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a3e:	2200      	movs	r2, #0
 8000a40:	2120      	movs	r1, #32
 8000a42:	4812      	ldr	r0, [pc, #72]	@ (8000a8c <MX_GPIO_Init+0xd4>)
 8000a44:	f001 fe94 	bl	8002770 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a48:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a4e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000a52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a58:	f107 0314 	add.w	r3, r7, #20
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	480c      	ldr	r0, [pc, #48]	@ (8000a90 <MX_GPIO_Init+0xd8>)
 8000a60:	f001 fcf2 	bl	8002448 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a64:	2320      	movs	r3, #32
 8000a66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a70:	2300      	movs	r3, #0
 8000a72:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a74:	f107 0314 	add.w	r3, r7, #20
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4804      	ldr	r0, [pc, #16]	@ (8000a8c <MX_GPIO_Init+0xd4>)
 8000a7c:	f001 fce4 	bl	8002448 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a80:	bf00      	nop
 8000a82:	3728      	adds	r7, #40	@ 0x28
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	40023800 	.word	0x40023800
 8000a8c:	40020000 	.word	0x40020000
 8000a90:	40020800 	.word	0x40020800

08000a94 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a33      	ldr	r2, [pc, #204]	@ (8000b70 <HAL_UART_RxCpltCallback+0xdc>)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d15f      	bne.n	8000b66 <HAL_UART_RxCpltCallback+0xd2>
    	switch(rxData1) {
 8000aa6:	4b33      	ldr	r3, [pc, #204]	@ (8000b74 <HAL_UART_RxCpltCallback+0xe0>)
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	3b41      	subs	r3, #65	@ 0x41
 8000aac:	2b14      	cmp	r3, #20
 8000aae:	d84b      	bhi.n	8000b48 <HAL_UART_RxCpltCallback+0xb4>
 8000ab0:	a201      	add	r2, pc, #4	@ (adr r2, 8000ab8 <HAL_UART_RxCpltCallback+0x24>)
 8000ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ab6:	bf00      	nop
 8000ab8:	08000b0d 	.word	0x08000b0d
 8000abc:	08000b17 	.word	0x08000b17
 8000ac0:	08000b49 	.word	0x08000b49
 8000ac4:	08000b2b 	.word	0x08000b2b
 8000ac8:	08000b49 	.word	0x08000b49
 8000acc:	08000b49 	.word	0x08000b49
 8000ad0:	08000b49 	.word	0x08000b49
 8000ad4:	08000b49 	.word	0x08000b49
 8000ad8:	08000b49 	.word	0x08000b49
 8000adc:	08000b49 	.word	0x08000b49
 8000ae0:	08000b49 	.word	0x08000b49
 8000ae4:	08000b35 	.word	0x08000b35
 8000ae8:	08000b49 	.word	0x08000b49
 8000aec:	08000b49 	.word	0x08000b49
 8000af0:	08000b49 	.word	0x08000b49
 8000af4:	08000b49 	.word	0x08000b49
 8000af8:	08000b49 	.word	0x08000b49
 8000afc:	08000b3f 	.word	0x08000b3f
 8000b00:	08000b49 	.word	0x08000b49
 8000b04:	08000b49 	.word	0x08000b49
 8000b08:	08000b21 	.word	0x08000b21
    	    case 'A': sprintf(msg, "CONTROL 1: A(Accion A)\r\n"); break;
 8000b0c:	491a      	ldr	r1, [pc, #104]	@ (8000b78 <HAL_UART_RxCpltCallback+0xe4>)
 8000b0e:	481b      	ldr	r0, [pc, #108]	@ (8000b7c <HAL_UART_RxCpltCallback+0xe8>)
 8000b10:	f003 fbda 	bl	80042c8 <siprintf>
 8000b14:	e018      	b.n	8000b48 <HAL_UART_RxCpltCallback+0xb4>
    	    case 'B': sprintf(msg, "CONTROL 1: B(Accion B)\r\n"); break;
 8000b16:	491a      	ldr	r1, [pc, #104]	@ (8000b80 <HAL_UART_RxCpltCallback+0xec>)
 8000b18:	4818      	ldr	r0, [pc, #96]	@ (8000b7c <HAL_UART_RxCpltCallback+0xe8>)
 8000b1a:	f003 fbd5 	bl	80042c8 <siprintf>
 8000b1e:	e013      	b.n	8000b48 <HAL_UART_RxCpltCallback+0xb4>
    	    case 'U': sprintf(msg, "CONTROL 1: U(Arriba)\r\n"); break;
 8000b20:	4918      	ldr	r1, [pc, #96]	@ (8000b84 <HAL_UART_RxCpltCallback+0xf0>)
 8000b22:	4816      	ldr	r0, [pc, #88]	@ (8000b7c <HAL_UART_RxCpltCallback+0xe8>)
 8000b24:	f003 fbd0 	bl	80042c8 <siprintf>
 8000b28:	e00e      	b.n	8000b48 <HAL_UART_RxCpltCallback+0xb4>
    	    case 'D': sprintf(msg, "CONTROL 1: D(Abajo)\r\n"); break;
 8000b2a:	4917      	ldr	r1, [pc, #92]	@ (8000b88 <HAL_UART_RxCpltCallback+0xf4>)
 8000b2c:	4813      	ldr	r0, [pc, #76]	@ (8000b7c <HAL_UART_RxCpltCallback+0xe8>)
 8000b2e:	f003 fbcb 	bl	80042c8 <siprintf>
 8000b32:	e009      	b.n	8000b48 <HAL_UART_RxCpltCallback+0xb4>
    	    case 'L': sprintf(msg, "CONTROL 1: L(Izquierda)\r\n"); break;
 8000b34:	4915      	ldr	r1, [pc, #84]	@ (8000b8c <HAL_UART_RxCpltCallback+0xf8>)
 8000b36:	4811      	ldr	r0, [pc, #68]	@ (8000b7c <HAL_UART_RxCpltCallback+0xe8>)
 8000b38:	f003 fbc6 	bl	80042c8 <siprintf>
 8000b3c:	e004      	b.n	8000b48 <HAL_UART_RxCpltCallback+0xb4>
    	    case 'R': sprintf(msg, "CONTROL 1: R(Derecha)\r\n"); break;
 8000b3e:	4914      	ldr	r1, [pc, #80]	@ (8000b90 <HAL_UART_RxCpltCallback+0xfc>)
 8000b40:	480e      	ldr	r0, [pc, #56]	@ (8000b7c <HAL_UART_RxCpltCallback+0xe8>)
 8000b42:	f003 fbc1 	bl	80042c8 <siprintf>
 8000b46:	bf00      	nop
    	}
        HAL_UART_Transmit_IT(&huart2, (uint8_t*)msg, strlen(msg));
 8000b48:	480c      	ldr	r0, [pc, #48]	@ (8000b7c <HAL_UART_RxCpltCallback+0xe8>)
 8000b4a:	f7ff fb61 	bl	8000210 <strlen>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	b29b      	uxth	r3, r3
 8000b52:	461a      	mov	r2, r3
 8000b54:	4909      	ldr	r1, [pc, #36]	@ (8000b7c <HAL_UART_RxCpltCallback+0xe8>)
 8000b56:	480f      	ldr	r0, [pc, #60]	@ (8000b94 <HAL_UART_RxCpltCallback+0x100>)
 8000b58:	f002 fc5c 	bl	8003414 <HAL_UART_Transmit_IT>
        HAL_UART_Receive_IT(&huart1, &rxData1, 1); // Reiniciar recepción para USART1
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	4905      	ldr	r1, [pc, #20]	@ (8000b74 <HAL_UART_RxCpltCallback+0xe0>)
 8000b60:	480d      	ldr	r0, [pc, #52]	@ (8000b98 <HAL_UART_RxCpltCallback+0x104>)
 8000b62:	f002 fc8d 	bl	8003480 <HAL_UART_Receive_IT>
    }
}
 8000b66:	bf00      	nop
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40011000 	.word	0x40011000
 8000b74:	20000271 	.word	0x20000271
 8000b78:	08004c84 	.word	0x08004c84
 8000b7c:	20000274 	.word	0x20000274
 8000b80:	08004ca0 	.word	0x08004ca0
 8000b84:	08004cbc 	.word	0x08004cbc
 8000b88:	08004cd4 	.word	0x08004cd4
 8000b8c:	08004cec 	.word	0x08004cec
 8000b90:	08004d08 	.word	0x08004d08
 8000b94:	20000168 	.word	0x20000168
 8000b98:	20000120 	.word	0x20000120

08000b9c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1) {
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a09      	ldr	r2, [pc, #36]	@ (8000bd0 <HAL_ADC_ConvCpltCallback+0x34>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d109      	bne.n	8000bc2 <HAL_ADC_ConvCpltCallback+0x26>
        // Asignar los valores de ADC a las variables globales
        x = adcValues[0];
 8000bae:	4b09      	ldr	r3, [pc, #36]	@ (8000bd4 <HAL_ADC_ConvCpltCallback+0x38>)
 8000bb0:	881b      	ldrh	r3, [r3, #0]
 8000bb2:	461a      	mov	r2, r3
 8000bb4:	4b08      	ldr	r3, [pc, #32]	@ (8000bd8 <HAL_ADC_ConvCpltCallback+0x3c>)
 8000bb6:	601a      	str	r2, [r3, #0]
        y = adcValues[1];
 8000bb8:	4b06      	ldr	r3, [pc, #24]	@ (8000bd4 <HAL_ADC_ConvCpltCallback+0x38>)
 8000bba:	885b      	ldrh	r3, [r3, #2]
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	4b07      	ldr	r3, [pc, #28]	@ (8000bdc <HAL_ADC_ConvCpltCallback+0x40>)
 8000bc0:	601a      	str	r2, [r3, #0]
    }
}
 8000bc2:	bf00      	nop
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	40012000 	.word	0x40012000
 8000bd4:	200002a8 	.word	0x200002a8
 8000bd8:	200002b0 	.word	0x200002b0
 8000bdc:	200002b4 	.word	0x200002b4

08000be0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000be4:	b672      	cpsid	i
}
 8000be6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000be8:	bf00      	nop
 8000bea:	e7fd      	b.n	8000be8 <Error_Handler+0x8>

08000bec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	607b      	str	r3, [r7, #4]
 8000bf6:	4b10      	ldr	r3, [pc, #64]	@ (8000c38 <HAL_MspInit+0x4c>)
 8000bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bfa:	4a0f      	ldr	r2, [pc, #60]	@ (8000c38 <HAL_MspInit+0x4c>)
 8000bfc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c00:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c02:	4b0d      	ldr	r3, [pc, #52]	@ (8000c38 <HAL_MspInit+0x4c>)
 8000c04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c0a:	607b      	str	r3, [r7, #4]
 8000c0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	603b      	str	r3, [r7, #0]
 8000c12:	4b09      	ldr	r3, [pc, #36]	@ (8000c38 <HAL_MspInit+0x4c>)
 8000c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c16:	4a08      	ldr	r2, [pc, #32]	@ (8000c38 <HAL_MspInit+0x4c>)
 8000c18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c1e:	4b06      	ldr	r3, [pc, #24]	@ (8000c38 <HAL_MspInit+0x4c>)
 8000c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c26:	603b      	str	r3, [r7, #0]
 8000c28:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c2a:	2007      	movs	r0, #7
 8000c2c:	f000 ffc8 	bl	8001bc0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c30:	bf00      	nop
 8000c32:	3708      	adds	r7, #8
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	40023800 	.word	0x40023800

08000c3c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b08a      	sub	sp, #40	@ 0x28
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c44:	f107 0314 	add.w	r3, r7, #20
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	605a      	str	r2, [r3, #4]
 8000c4e:	609a      	str	r2, [r3, #8]
 8000c50:	60da      	str	r2, [r3, #12]
 8000c52:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a33      	ldr	r2, [pc, #204]	@ (8000d28 <HAL_ADC_MspInit+0xec>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d160      	bne.n	8000d20 <HAL_ADC_MspInit+0xe4>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	613b      	str	r3, [r7, #16]
 8000c62:	4b32      	ldr	r3, [pc, #200]	@ (8000d2c <HAL_ADC_MspInit+0xf0>)
 8000c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c66:	4a31      	ldr	r2, [pc, #196]	@ (8000d2c <HAL_ADC_MspInit+0xf0>)
 8000c68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c6e:	4b2f      	ldr	r3, [pc, #188]	@ (8000d2c <HAL_ADC_MspInit+0xf0>)
 8000c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000c76:	613b      	str	r3, [r7, #16]
 8000c78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	60fb      	str	r3, [r7, #12]
 8000c7e:	4b2b      	ldr	r3, [pc, #172]	@ (8000d2c <HAL_ADC_MspInit+0xf0>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c82:	4a2a      	ldr	r2, [pc, #168]	@ (8000d2c <HAL_ADC_MspInit+0xf0>)
 8000c84:	f043 0301 	orr.w	r3, r3, #1
 8000c88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c8a:	4b28      	ldr	r3, [pc, #160]	@ (8000d2c <HAL_ADC_MspInit+0xf0>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8e:	f003 0301 	and.w	r3, r3, #1
 8000c92:	60fb      	str	r3, [r7, #12]
 8000c94:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c96:	2303      	movs	r3, #3
 8000c98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c9a:	2303      	movs	r3, #3
 8000c9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca2:	f107 0314 	add.w	r3, r7, #20
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	4821      	ldr	r0, [pc, #132]	@ (8000d30 <HAL_ADC_MspInit+0xf4>)
 8000caa:	f001 fbcd 	bl	8002448 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000cae:	4b21      	ldr	r3, [pc, #132]	@ (8000d34 <HAL_ADC_MspInit+0xf8>)
 8000cb0:	4a21      	ldr	r2, [pc, #132]	@ (8000d38 <HAL_ADC_MspInit+0xfc>)
 8000cb2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000cb4:	4b1f      	ldr	r3, [pc, #124]	@ (8000d34 <HAL_ADC_MspInit+0xf8>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cba:	4b1e      	ldr	r3, [pc, #120]	@ (8000d34 <HAL_ADC_MspInit+0xf8>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cc0:	4b1c      	ldr	r3, [pc, #112]	@ (8000d34 <HAL_ADC_MspInit+0xf8>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000cc6:	4b1b      	ldr	r3, [pc, #108]	@ (8000d34 <HAL_ADC_MspInit+0xf8>)
 8000cc8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ccc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000cce:	4b19      	ldr	r3, [pc, #100]	@ (8000d34 <HAL_ADC_MspInit+0xf8>)
 8000cd0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000cd4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000cd6:	4b17      	ldr	r3, [pc, #92]	@ (8000d34 <HAL_ADC_MspInit+0xf8>)
 8000cd8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000cdc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000cde:	4b15      	ldr	r3, [pc, #84]	@ (8000d34 <HAL_ADC_MspInit+0xf8>)
 8000ce0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ce4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000ce6:	4b13      	ldr	r3, [pc, #76]	@ (8000d34 <HAL_ADC_MspInit+0xf8>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000cec:	4b11      	ldr	r3, [pc, #68]	@ (8000d34 <HAL_ADC_MspInit+0xf8>)
 8000cee:	2204      	movs	r2, #4
 8000cf0:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000cf2:	4b10      	ldr	r3, [pc, #64]	@ (8000d34 <HAL_ADC_MspInit+0xf8>)
 8000cf4:	2203      	movs	r2, #3
 8000cf6:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 8000cf8:	4b0e      	ldr	r3, [pc, #56]	@ (8000d34 <HAL_ADC_MspInit+0xf8>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000cfe:	4b0d      	ldr	r3, [pc, #52]	@ (8000d34 <HAL_ADC_MspInit+0xf8>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000d04:	480b      	ldr	r0, [pc, #44]	@ (8000d34 <HAL_ADC_MspInit+0xf8>)
 8000d06:	f000 ff9d 	bl	8001c44 <HAL_DMA_Init>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <HAL_ADC_MspInit+0xd8>
    {
      Error_Handler();
 8000d10:	f7ff ff66 	bl	8000be0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	4a07      	ldr	r2, [pc, #28]	@ (8000d34 <HAL_ADC_MspInit+0xf8>)
 8000d18:	639a      	str	r2, [r3, #56]	@ 0x38
 8000d1a:	4a06      	ldr	r2, [pc, #24]	@ (8000d34 <HAL_ADC_MspInit+0xf8>)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000d20:	bf00      	nop
 8000d22:	3728      	adds	r7, #40	@ 0x28
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	40012000 	.word	0x40012000
 8000d2c:	40023800 	.word	0x40023800
 8000d30:	40020000 	.word	0x40020000
 8000d34:	200000c0 	.word	0x200000c0
 8000d38:	40026410 	.word	0x40026410

08000d3c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b08c      	sub	sp, #48	@ 0x30
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d44:	f107 031c 	add.w	r3, r7, #28
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
 8000d4e:	609a      	str	r2, [r3, #8]
 8000d50:	60da      	str	r2, [r3, #12]
 8000d52:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a68      	ldr	r2, [pc, #416]	@ (8000efc <HAL_UART_MspInit+0x1c0>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d163      	bne.n	8000e26 <HAL_UART_MspInit+0xea>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	61bb      	str	r3, [r7, #24]
 8000d62:	4b67      	ldr	r3, [pc, #412]	@ (8000f00 <HAL_UART_MspInit+0x1c4>)
 8000d64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d66:	4a66      	ldr	r2, [pc, #408]	@ (8000f00 <HAL_UART_MspInit+0x1c4>)
 8000d68:	f043 0310 	orr.w	r3, r3, #16
 8000d6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d6e:	4b64      	ldr	r3, [pc, #400]	@ (8000f00 <HAL_UART_MspInit+0x1c4>)
 8000d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d72:	f003 0310 	and.w	r3, r3, #16
 8000d76:	61bb      	str	r3, [r7, #24]
 8000d78:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	617b      	str	r3, [r7, #20]
 8000d7e:	4b60      	ldr	r3, [pc, #384]	@ (8000f00 <HAL_UART_MspInit+0x1c4>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d82:	4a5f      	ldr	r2, [pc, #380]	@ (8000f00 <HAL_UART_MspInit+0x1c4>)
 8000d84:	f043 0301 	orr.w	r3, r3, #1
 8000d88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d8a:	4b5d      	ldr	r3, [pc, #372]	@ (8000f00 <HAL_UART_MspInit+0x1c4>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8e:	f003 0301 	and.w	r3, r3, #1
 8000d92:	617b      	str	r3, [r7, #20]
 8000d94:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d96:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000d9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da0:	2300      	movs	r3, #0
 8000da2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da4:	2303      	movs	r3, #3
 8000da6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000da8:	2307      	movs	r3, #7
 8000daa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dac:	f107 031c 	add.w	r3, r7, #28
 8000db0:	4619      	mov	r1, r3
 8000db2:	4854      	ldr	r0, [pc, #336]	@ (8000f04 <HAL_UART_MspInit+0x1c8>)
 8000db4:	f001 fb48 	bl	8002448 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8000db8:	4b53      	ldr	r3, [pc, #332]	@ (8000f08 <HAL_UART_MspInit+0x1cc>)
 8000dba:	4a54      	ldr	r2, [pc, #336]	@ (8000f0c <HAL_UART_MspInit+0x1d0>)
 8000dbc:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8000dbe:	4b52      	ldr	r3, [pc, #328]	@ (8000f08 <HAL_UART_MspInit+0x1cc>)
 8000dc0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000dc4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dc6:	4b50      	ldr	r3, [pc, #320]	@ (8000f08 <HAL_UART_MspInit+0x1cc>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dcc:	4b4e      	ldr	r3, [pc, #312]	@ (8000f08 <HAL_UART_MspInit+0x1cc>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000dd2:	4b4d      	ldr	r3, [pc, #308]	@ (8000f08 <HAL_UART_MspInit+0x1cc>)
 8000dd4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000dd8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000dda:	4b4b      	ldr	r3, [pc, #300]	@ (8000f08 <HAL_UART_MspInit+0x1cc>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000de0:	4b49      	ldr	r3, [pc, #292]	@ (8000f08 <HAL_UART_MspInit+0x1cc>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000de6:	4b48      	ldr	r3, [pc, #288]	@ (8000f08 <HAL_UART_MspInit+0x1cc>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000dec:	4b46      	ldr	r3, [pc, #280]	@ (8000f08 <HAL_UART_MspInit+0x1cc>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000df2:	4b45      	ldr	r3, [pc, #276]	@ (8000f08 <HAL_UART_MspInit+0x1cc>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000df8:	4843      	ldr	r0, [pc, #268]	@ (8000f08 <HAL_UART_MspInit+0x1cc>)
 8000dfa:	f000 ff23 	bl	8001c44 <HAL_DMA_Init>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000e04:	f7ff feec 	bl	8000be0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	4a3f      	ldr	r2, [pc, #252]	@ (8000f08 <HAL_UART_MspInit+0x1cc>)
 8000e0c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000e0e:	4a3e      	ldr	r2, [pc, #248]	@ (8000f08 <HAL_UART_MspInit+0x1cc>)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000e14:	2200      	movs	r2, #0
 8000e16:	2100      	movs	r1, #0
 8000e18:	2025      	movs	r0, #37	@ 0x25
 8000e1a:	f000 fedc 	bl	8001bd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e1e:	2025      	movs	r0, #37	@ 0x25
 8000e20:	f000 fef5 	bl	8001c0e <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e24:	e066      	b.n	8000ef4 <HAL_UART_MspInit+0x1b8>
  else if(huart->Instance==USART2)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4a39      	ldr	r2, [pc, #228]	@ (8000f10 <HAL_UART_MspInit+0x1d4>)
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	d161      	bne.n	8000ef4 <HAL_UART_MspInit+0x1b8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e30:	2300      	movs	r3, #0
 8000e32:	613b      	str	r3, [r7, #16]
 8000e34:	4b32      	ldr	r3, [pc, #200]	@ (8000f00 <HAL_UART_MspInit+0x1c4>)
 8000e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e38:	4a31      	ldr	r2, [pc, #196]	@ (8000f00 <HAL_UART_MspInit+0x1c4>)
 8000e3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e3e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e40:	4b2f      	ldr	r3, [pc, #188]	@ (8000f00 <HAL_UART_MspInit+0x1c4>)
 8000e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e48:	613b      	str	r3, [r7, #16]
 8000e4a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	60fb      	str	r3, [r7, #12]
 8000e50:	4b2b      	ldr	r3, [pc, #172]	@ (8000f00 <HAL_UART_MspInit+0x1c4>)
 8000e52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e54:	4a2a      	ldr	r2, [pc, #168]	@ (8000f00 <HAL_UART_MspInit+0x1c4>)
 8000e56:	f043 0301 	orr.w	r3, r3, #1
 8000e5a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e5c:	4b28      	ldr	r3, [pc, #160]	@ (8000f00 <HAL_UART_MspInit+0x1c4>)
 8000e5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e60:	f003 0301 	and.w	r3, r3, #1
 8000e64:	60fb      	str	r3, [r7, #12]
 8000e66:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e68:	230c      	movs	r3, #12
 8000e6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e70:	2300      	movs	r3, #0
 8000e72:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e74:	2303      	movs	r3, #3
 8000e76:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e78:	2307      	movs	r3, #7
 8000e7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e7c:	f107 031c 	add.w	r3, r7, #28
 8000e80:	4619      	mov	r1, r3
 8000e82:	4820      	ldr	r0, [pc, #128]	@ (8000f04 <HAL_UART_MspInit+0x1c8>)
 8000e84:	f001 fae0 	bl	8002448 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8000e88:	4b22      	ldr	r3, [pc, #136]	@ (8000f14 <HAL_UART_MspInit+0x1d8>)
 8000e8a:	4a23      	ldr	r2, [pc, #140]	@ (8000f18 <HAL_UART_MspInit+0x1dc>)
 8000e8c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8000e8e:	4b21      	ldr	r3, [pc, #132]	@ (8000f14 <HAL_UART_MspInit+0x1d8>)
 8000e90:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000e94:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e96:	4b1f      	ldr	r3, [pc, #124]	@ (8000f14 <HAL_UART_MspInit+0x1d8>)
 8000e98:	2240      	movs	r2, #64	@ 0x40
 8000e9a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e9c:	4b1d      	ldr	r3, [pc, #116]	@ (8000f14 <HAL_UART_MspInit+0x1d8>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ea2:	4b1c      	ldr	r3, [pc, #112]	@ (8000f14 <HAL_UART_MspInit+0x1d8>)
 8000ea4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ea8:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000eaa:	4b1a      	ldr	r3, [pc, #104]	@ (8000f14 <HAL_UART_MspInit+0x1d8>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000eb0:	4b18      	ldr	r3, [pc, #96]	@ (8000f14 <HAL_UART_MspInit+0x1d8>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000eb6:	4b17      	ldr	r3, [pc, #92]	@ (8000f14 <HAL_UART_MspInit+0x1d8>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000ebc:	4b15      	ldr	r3, [pc, #84]	@ (8000f14 <HAL_UART_MspInit+0x1d8>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ec2:	4b14      	ldr	r3, [pc, #80]	@ (8000f14 <HAL_UART_MspInit+0x1d8>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000ec8:	4812      	ldr	r0, [pc, #72]	@ (8000f14 <HAL_UART_MspInit+0x1d8>)
 8000eca:	f000 febb 	bl	8001c44 <HAL_DMA_Init>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <HAL_UART_MspInit+0x19c>
      Error_Handler();
 8000ed4:	f7ff fe84 	bl	8000be0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	4a0e      	ldr	r2, [pc, #56]	@ (8000f14 <HAL_UART_MspInit+0x1d8>)
 8000edc:	639a      	str	r2, [r3, #56]	@ 0x38
 8000ede:	4a0d      	ldr	r2, [pc, #52]	@ (8000f14 <HAL_UART_MspInit+0x1d8>)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	2026      	movs	r0, #38	@ 0x26
 8000eea:	f000 fe74 	bl	8001bd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000eee:	2026      	movs	r0, #38	@ 0x26
 8000ef0:	f000 fe8d 	bl	8001c0e <HAL_NVIC_EnableIRQ>
}
 8000ef4:	bf00      	nop
 8000ef6:	3730      	adds	r7, #48	@ 0x30
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	40011000 	.word	0x40011000
 8000f00:	40023800 	.word	0x40023800
 8000f04:	40020000 	.word	0x40020000
 8000f08:	200001b0 	.word	0x200001b0
 8000f0c:	40026440 	.word	0x40026440
 8000f10:	40004400 	.word	0x40004400
 8000f14:	20000210 	.word	0x20000210
 8000f18:	400260a0 	.word	0x400260a0

08000f1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f20:	bf00      	nop
 8000f22:	e7fd      	b.n	8000f20 <NMI_Handler+0x4>

08000f24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f28:	bf00      	nop
 8000f2a:	e7fd      	b.n	8000f28 <HardFault_Handler+0x4>

08000f2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f30:	bf00      	nop
 8000f32:	e7fd      	b.n	8000f30 <MemManage_Handler+0x4>

08000f34 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f38:	bf00      	nop
 8000f3a:	e7fd      	b.n	8000f38 <BusFault_Handler+0x4>

08000f3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f40:	bf00      	nop
 8000f42:	e7fd      	b.n	8000f40 <UsageFault_Handler+0x4>

08000f44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f48:	bf00      	nop
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr

08000f52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f52:	b480      	push	{r7}
 8000f54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f56:	bf00      	nop
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr

08000f60 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f64:	bf00      	nop
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr

08000f6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f72:	f000 f8f9 	bl	8001168 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
	...

08000f7c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000f80:	4802      	ldr	r0, [pc, #8]	@ (8000f8c <DMA1_Stream6_IRQHandler+0x10>)
 8000f82:	f000 fff7 	bl	8001f74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20000210 	.word	0x20000210

08000f90 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000f94:	4802      	ldr	r0, [pc, #8]	@ (8000fa0 <USART1_IRQHandler+0x10>)
 8000f96:	f002 fa99 	bl	80034cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	20000120 	.word	0x20000120

08000fa4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000fa8:	4802      	ldr	r0, [pc, #8]	@ (8000fb4 <USART2_IRQHandler+0x10>)
 8000faa:	f002 fa8f 	bl	80034cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	20000168 	.word	0x20000168

08000fb8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000fbc:	4802      	ldr	r0, [pc, #8]	@ (8000fc8 <DMA2_Stream0_IRQHandler+0x10>)
 8000fbe:	f000 ffd9 	bl	8001f74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	200000c0 	.word	0x200000c0

08000fcc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000fd0:	4802      	ldr	r0, [pc, #8]	@ (8000fdc <DMA2_Stream2_IRQHandler+0x10>)
 8000fd2:	f000 ffcf 	bl	8001f74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	200001b0 	.word	0x200001b0

08000fe0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b086      	sub	sp, #24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fe8:	4a14      	ldr	r2, [pc, #80]	@ (800103c <_sbrk+0x5c>)
 8000fea:	4b15      	ldr	r3, [pc, #84]	@ (8001040 <_sbrk+0x60>)
 8000fec:	1ad3      	subs	r3, r2, r3
 8000fee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ff4:	4b13      	ldr	r3, [pc, #76]	@ (8001044 <_sbrk+0x64>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d102      	bne.n	8001002 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ffc:	4b11      	ldr	r3, [pc, #68]	@ (8001044 <_sbrk+0x64>)
 8000ffe:	4a12      	ldr	r2, [pc, #72]	@ (8001048 <_sbrk+0x68>)
 8001000:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001002:	4b10      	ldr	r3, [pc, #64]	@ (8001044 <_sbrk+0x64>)
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4413      	add	r3, r2
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	429a      	cmp	r2, r3
 800100e:	d207      	bcs.n	8001020 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001010:	f003 f984 	bl	800431c <__errno>
 8001014:	4603      	mov	r3, r0
 8001016:	220c      	movs	r2, #12
 8001018:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800101a:	f04f 33ff 	mov.w	r3, #4294967295
 800101e:	e009      	b.n	8001034 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001020:	4b08      	ldr	r3, [pc, #32]	@ (8001044 <_sbrk+0x64>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001026:	4b07      	ldr	r3, [pc, #28]	@ (8001044 <_sbrk+0x64>)
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4413      	add	r3, r2
 800102e:	4a05      	ldr	r2, [pc, #20]	@ (8001044 <_sbrk+0x64>)
 8001030:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001032:	68fb      	ldr	r3, [r7, #12]
}
 8001034:	4618      	mov	r0, r3
 8001036:	3718      	adds	r7, #24
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	20020000 	.word	0x20020000
 8001040:	00000400 	.word	0x00000400
 8001044:	200002b8 	.word	0x200002b8
 8001048:	20000408 	.word	0x20000408

0800104c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001050:	4b06      	ldr	r3, [pc, #24]	@ (800106c <SystemInit+0x20>)
 8001052:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001056:	4a05      	ldr	r2, [pc, #20]	@ (800106c <SystemInit+0x20>)
 8001058:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800105c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001060:	bf00      	nop
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	e000ed00 	.word	0xe000ed00

08001070 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001070:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010a8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001074:	f7ff ffea 	bl	800104c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001078:	480c      	ldr	r0, [pc, #48]	@ (80010ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800107a:	490d      	ldr	r1, [pc, #52]	@ (80010b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800107c:	4a0d      	ldr	r2, [pc, #52]	@ (80010b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800107e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001080:	e002      	b.n	8001088 <LoopCopyDataInit>

08001082 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001082:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001084:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001086:	3304      	adds	r3, #4

08001088 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001088:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800108a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800108c:	d3f9      	bcc.n	8001082 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800108e:	4a0a      	ldr	r2, [pc, #40]	@ (80010b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001090:	4c0a      	ldr	r4, [pc, #40]	@ (80010bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001092:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001094:	e001      	b.n	800109a <LoopFillZerobss>

08001096 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001096:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001098:	3204      	adds	r2, #4

0800109a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800109a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800109c:	d3fb      	bcc.n	8001096 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800109e:	f003 f943 	bl	8004328 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010a2:	f7ff faa3 	bl	80005ec <main>
  bx  lr    
 80010a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010b0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80010b4:	08004d84 	.word	0x08004d84
  ldr r2, =_sbss
 80010b8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80010bc:	20000408 	.word	0x20000408

080010c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010c0:	e7fe      	b.n	80010c0 <ADC_IRQHandler>
	...

080010c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001104 <HAL_Init+0x40>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001104 <HAL_Init+0x40>)
 80010ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001104 <HAL_Init+0x40>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a0a      	ldr	r2, [pc, #40]	@ (8001104 <HAL_Init+0x40>)
 80010da:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80010de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010e0:	4b08      	ldr	r3, [pc, #32]	@ (8001104 <HAL_Init+0x40>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a07      	ldr	r2, [pc, #28]	@ (8001104 <HAL_Init+0x40>)
 80010e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010ec:	2003      	movs	r0, #3
 80010ee:	f000 fd67 	bl	8001bc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010f2:	2000      	movs	r0, #0
 80010f4:	f000 f808 	bl	8001108 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010f8:	f7ff fd78 	bl	8000bec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010fc:	2300      	movs	r3, #0
}
 80010fe:	4618      	mov	r0, r3
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40023c00 	.word	0x40023c00

08001108 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001110:	4b12      	ldr	r3, [pc, #72]	@ (800115c <HAL_InitTick+0x54>)
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	4b12      	ldr	r3, [pc, #72]	@ (8001160 <HAL_InitTick+0x58>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	4619      	mov	r1, r3
 800111a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800111e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001122:	fbb2 f3f3 	udiv	r3, r2, r3
 8001126:	4618      	mov	r0, r3
 8001128:	f000 fd7f 	bl	8001c2a <HAL_SYSTICK_Config>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e00e      	b.n	8001154 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2b0f      	cmp	r3, #15
 800113a:	d80a      	bhi.n	8001152 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800113c:	2200      	movs	r2, #0
 800113e:	6879      	ldr	r1, [r7, #4]
 8001140:	f04f 30ff 	mov.w	r0, #4294967295
 8001144:	f000 fd47 	bl	8001bd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001148:	4a06      	ldr	r2, [pc, #24]	@ (8001164 <HAL_InitTick+0x5c>)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800114e:	2300      	movs	r3, #0
 8001150:	e000      	b.n	8001154 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001152:	2301      	movs	r3, #1
}
 8001154:	4618      	mov	r0, r3
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	20000000 	.word	0x20000000
 8001160:	20000008 	.word	0x20000008
 8001164:	20000004 	.word	0x20000004

08001168 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800116c:	4b06      	ldr	r3, [pc, #24]	@ (8001188 <HAL_IncTick+0x20>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	461a      	mov	r2, r3
 8001172:	4b06      	ldr	r3, [pc, #24]	@ (800118c <HAL_IncTick+0x24>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4413      	add	r3, r2
 8001178:	4a04      	ldr	r2, [pc, #16]	@ (800118c <HAL_IncTick+0x24>)
 800117a:	6013      	str	r3, [r2, #0]
}
 800117c:	bf00      	nop
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	20000008 	.word	0x20000008
 800118c:	200002bc 	.word	0x200002bc

08001190 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  return uwTick;
 8001194:	4b03      	ldr	r3, [pc, #12]	@ (80011a4 <HAL_GetTick+0x14>)
 8001196:	681b      	ldr	r3, [r3, #0]
}
 8001198:	4618      	mov	r0, r3
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	200002bc 	.word	0x200002bc

080011a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011b0:	f7ff ffee 	bl	8001190 <HAL_GetTick>
 80011b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011c0:	d005      	beq.n	80011ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011c2:	4b0a      	ldr	r3, [pc, #40]	@ (80011ec <HAL_Delay+0x44>)
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	461a      	mov	r2, r3
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	4413      	add	r3, r2
 80011cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011ce:	bf00      	nop
 80011d0:	f7ff ffde 	bl	8001190 <HAL_GetTick>
 80011d4:	4602      	mov	r2, r0
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	68fa      	ldr	r2, [r7, #12]
 80011dc:	429a      	cmp	r2, r3
 80011de:	d8f7      	bhi.n	80011d0 <HAL_Delay+0x28>
  {
  }
}
 80011e0:	bf00      	nop
 80011e2:	bf00      	nop
 80011e4:	3710      	adds	r7, #16
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	20000008 	.word	0x20000008

080011f0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011f8:	2300      	movs	r3, #0
 80011fa:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d101      	bne.n	8001206 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	e033      	b.n	800126e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800120a:	2b00      	cmp	r3, #0
 800120c:	d109      	bne.n	8001222 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f7ff fd14 	bl	8000c3c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2200      	movs	r2, #0
 8001218:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2200      	movs	r2, #0
 800121e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001226:	f003 0310 	and.w	r3, r3, #16
 800122a:	2b00      	cmp	r3, #0
 800122c:	d118      	bne.n	8001260 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001232:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001236:	f023 0302 	bic.w	r3, r3, #2
 800123a:	f043 0202 	orr.w	r2, r3, #2
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	f000 fa6e 	bl	8001724 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2200      	movs	r2, #0
 800124c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001252:	f023 0303 	bic.w	r3, r3, #3
 8001256:	f043 0201 	orr.w	r2, r3, #1
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	641a      	str	r2, [r3, #64]	@ 0x40
 800125e:	e001      	b.n	8001264 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001260:	2301      	movs	r3, #1
 8001262:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2200      	movs	r2, #0
 8001268:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800126c:	7bfb      	ldrb	r3, [r7, #15]
}
 800126e:	4618      	mov	r0, r3
 8001270:	3710      	adds	r7, #16
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
	...

08001278 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b086      	sub	sp, #24
 800127c:	af00      	add	r7, sp, #0
 800127e:	60f8      	str	r0, [r7, #12]
 8001280:	60b9      	str	r1, [r7, #8]
 8001282:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001284:	2300      	movs	r3, #0
 8001286:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800128e:	2b01      	cmp	r3, #1
 8001290:	d101      	bne.n	8001296 <HAL_ADC_Start_DMA+0x1e>
 8001292:	2302      	movs	r3, #2
 8001294:	e0e9      	b.n	800146a <HAL_ADC_Start_DMA+0x1f2>
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	2201      	movs	r2, #1
 800129a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	f003 0301 	and.w	r3, r3, #1
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	d018      	beq.n	80012de <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	689a      	ldr	r2, [r3, #8]
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f042 0201 	orr.w	r2, r2, #1
 80012ba:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80012bc:	4b6d      	ldr	r3, [pc, #436]	@ (8001474 <HAL_ADC_Start_DMA+0x1fc>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a6d      	ldr	r2, [pc, #436]	@ (8001478 <HAL_ADC_Start_DMA+0x200>)
 80012c2:	fba2 2303 	umull	r2, r3, r2, r3
 80012c6:	0c9a      	lsrs	r2, r3, #18
 80012c8:	4613      	mov	r3, r2
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	4413      	add	r3, r2
 80012ce:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80012d0:	e002      	b.n	80012d8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	3b01      	subs	r3, #1
 80012d6:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d1f9      	bne.n	80012d2 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80012ec:	d107      	bne.n	80012fe <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	689a      	ldr	r2, [r3, #8]
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80012fc:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	f003 0301 	and.w	r3, r3, #1
 8001308:	2b01      	cmp	r3, #1
 800130a:	f040 80a1 	bne.w	8001450 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001312:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001316:	f023 0301 	bic.w	r3, r3, #1
 800131a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800132c:	2b00      	cmp	r3, #0
 800132e:	d007      	beq.n	8001340 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001334:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001338:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001344:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001348:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800134c:	d106      	bne.n	800135c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001352:	f023 0206 	bic.w	r2, r3, #6
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	645a      	str	r2, [r3, #68]	@ 0x44
 800135a:	e002      	b.n	8001362 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	2200      	movs	r2, #0
 8001360:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	2200      	movs	r2, #0
 8001366:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800136a:	4b44      	ldr	r3, [pc, #272]	@ (800147c <HAL_ADC_Start_DMA+0x204>)
 800136c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001372:	4a43      	ldr	r2, [pc, #268]	@ (8001480 <HAL_ADC_Start_DMA+0x208>)
 8001374:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800137a:	4a42      	ldr	r2, [pc, #264]	@ (8001484 <HAL_ADC_Start_DMA+0x20c>)
 800137c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001382:	4a41      	ldr	r2, [pc, #260]	@ (8001488 <HAL_ADC_Start_DMA+0x210>)
 8001384:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800138e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	685a      	ldr	r2, [r3, #4]
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800139e:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	689a      	ldr	r2, [r3, #8]
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80013ae:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	334c      	adds	r3, #76	@ 0x4c
 80013ba:	4619      	mov	r1, r3
 80013bc:	68ba      	ldr	r2, [r7, #8]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	f000 fcee 	bl	8001da0 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f003 031f 	and.w	r3, r3, #31
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d12a      	bne.n	8001426 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a2d      	ldr	r2, [pc, #180]	@ (800148c <HAL_ADC_Start_DMA+0x214>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d015      	beq.n	8001406 <HAL_ADC_Start_DMA+0x18e>
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a2c      	ldr	r2, [pc, #176]	@ (8001490 <HAL_ADC_Start_DMA+0x218>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d105      	bne.n	80013f0 <HAL_ADC_Start_DMA+0x178>
 80013e4:	4b25      	ldr	r3, [pc, #148]	@ (800147c <HAL_ADC_Start_DMA+0x204>)
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f003 031f 	and.w	r3, r3, #31
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d00a      	beq.n	8001406 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a27      	ldr	r2, [pc, #156]	@ (8001494 <HAL_ADC_Start_DMA+0x21c>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d136      	bne.n	8001468 <HAL_ADC_Start_DMA+0x1f0>
 80013fa:	4b20      	ldr	r3, [pc, #128]	@ (800147c <HAL_ADC_Start_DMA+0x204>)
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	f003 0310 	and.w	r3, r3, #16
 8001402:	2b00      	cmp	r3, #0
 8001404:	d130      	bne.n	8001468 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001410:	2b00      	cmp	r3, #0
 8001412:	d129      	bne.n	8001468 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	689a      	ldr	r2, [r3, #8]
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001422:	609a      	str	r2, [r3, #8]
 8001424:	e020      	b.n	8001468 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a18      	ldr	r2, [pc, #96]	@ (800148c <HAL_ADC_Start_DMA+0x214>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d11b      	bne.n	8001468 <HAL_ADC_Start_DMA+0x1f0>
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d114      	bne.n	8001468 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	689a      	ldr	r2, [r3, #8]
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800144c:	609a      	str	r2, [r3, #8]
 800144e:	e00b      	b.n	8001468 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001454:	f043 0210 	orr.w	r2, r3, #16
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001460:	f043 0201 	orr.w	r2, r3, #1
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001468:	2300      	movs	r3, #0
}
 800146a:	4618      	mov	r0, r3
 800146c:	3718      	adds	r7, #24
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	20000000 	.word	0x20000000
 8001478:	431bde83 	.word	0x431bde83
 800147c:	40012300 	.word	0x40012300
 8001480:	0800191d 	.word	0x0800191d
 8001484:	080019d7 	.word	0x080019d7
 8001488:	080019f3 	.word	0x080019f3
 800148c:	40012000 	.word	0x40012000
 8001490:	40012100 	.word	0x40012100
 8001494:	40012200 	.word	0x40012200

08001498 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80014a0:	bf00      	nop
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80014b4:	bf00      	nop
 80014b6:	370c      	adds	r7, #12
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr

080014c0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b085      	sub	sp, #20
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80014ca:	2300      	movs	r3, #0
 80014cc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d101      	bne.n	80014dc <HAL_ADC_ConfigChannel+0x1c>
 80014d8:	2302      	movs	r3, #2
 80014da:	e113      	b.n	8001704 <HAL_ADC_ConfigChannel+0x244>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2201      	movs	r2, #1
 80014e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2b09      	cmp	r3, #9
 80014ea:	d925      	bls.n	8001538 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	68d9      	ldr	r1, [r3, #12]
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	b29b      	uxth	r3, r3
 80014f8:	461a      	mov	r2, r3
 80014fa:	4613      	mov	r3, r2
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	4413      	add	r3, r2
 8001500:	3b1e      	subs	r3, #30
 8001502:	2207      	movs	r2, #7
 8001504:	fa02 f303 	lsl.w	r3, r2, r3
 8001508:	43da      	mvns	r2, r3
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	400a      	ands	r2, r1
 8001510:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	68d9      	ldr	r1, [r3, #12]
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	689a      	ldr	r2, [r3, #8]
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	b29b      	uxth	r3, r3
 8001522:	4618      	mov	r0, r3
 8001524:	4603      	mov	r3, r0
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	4403      	add	r3, r0
 800152a:	3b1e      	subs	r3, #30
 800152c:	409a      	lsls	r2, r3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	430a      	orrs	r2, r1
 8001534:	60da      	str	r2, [r3, #12]
 8001536:	e022      	b.n	800157e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	6919      	ldr	r1, [r3, #16]
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	b29b      	uxth	r3, r3
 8001544:	461a      	mov	r2, r3
 8001546:	4613      	mov	r3, r2
 8001548:	005b      	lsls	r3, r3, #1
 800154a:	4413      	add	r3, r2
 800154c:	2207      	movs	r2, #7
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	43da      	mvns	r2, r3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	400a      	ands	r2, r1
 800155a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	6919      	ldr	r1, [r3, #16]
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	689a      	ldr	r2, [r3, #8]
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	b29b      	uxth	r3, r3
 800156c:	4618      	mov	r0, r3
 800156e:	4603      	mov	r3, r0
 8001570:	005b      	lsls	r3, r3, #1
 8001572:	4403      	add	r3, r0
 8001574:	409a      	lsls	r2, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	430a      	orrs	r2, r1
 800157c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	2b06      	cmp	r3, #6
 8001584:	d824      	bhi.n	80015d0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	685a      	ldr	r2, [r3, #4]
 8001590:	4613      	mov	r3, r2
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	4413      	add	r3, r2
 8001596:	3b05      	subs	r3, #5
 8001598:	221f      	movs	r2, #31
 800159a:	fa02 f303 	lsl.w	r3, r2, r3
 800159e:	43da      	mvns	r2, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	400a      	ands	r2, r1
 80015a6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	4618      	mov	r0, r3
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	685a      	ldr	r2, [r3, #4]
 80015ba:	4613      	mov	r3, r2
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	4413      	add	r3, r2
 80015c0:	3b05      	subs	r3, #5
 80015c2:	fa00 f203 	lsl.w	r2, r0, r3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	430a      	orrs	r2, r1
 80015cc:	635a      	str	r2, [r3, #52]	@ 0x34
 80015ce:	e04c      	b.n	800166a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	2b0c      	cmp	r3, #12
 80015d6:	d824      	bhi.n	8001622 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	685a      	ldr	r2, [r3, #4]
 80015e2:	4613      	mov	r3, r2
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	4413      	add	r3, r2
 80015e8:	3b23      	subs	r3, #35	@ 0x23
 80015ea:	221f      	movs	r2, #31
 80015ec:	fa02 f303 	lsl.w	r3, r2, r3
 80015f0:	43da      	mvns	r2, r3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	400a      	ands	r2, r1
 80015f8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	b29b      	uxth	r3, r3
 8001606:	4618      	mov	r0, r3
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	685a      	ldr	r2, [r3, #4]
 800160c:	4613      	mov	r3, r2
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	4413      	add	r3, r2
 8001612:	3b23      	subs	r3, #35	@ 0x23
 8001614:	fa00 f203 	lsl.w	r2, r0, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	430a      	orrs	r2, r1
 800161e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001620:	e023      	b.n	800166a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	685a      	ldr	r2, [r3, #4]
 800162c:	4613      	mov	r3, r2
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	4413      	add	r3, r2
 8001632:	3b41      	subs	r3, #65	@ 0x41
 8001634:	221f      	movs	r2, #31
 8001636:	fa02 f303 	lsl.w	r3, r2, r3
 800163a:	43da      	mvns	r2, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	400a      	ands	r2, r1
 8001642:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	b29b      	uxth	r3, r3
 8001650:	4618      	mov	r0, r3
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	685a      	ldr	r2, [r3, #4]
 8001656:	4613      	mov	r3, r2
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	4413      	add	r3, r2
 800165c:	3b41      	subs	r3, #65	@ 0x41
 800165e:	fa00 f203 	lsl.w	r2, r0, r3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	430a      	orrs	r2, r1
 8001668:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800166a:	4b29      	ldr	r3, [pc, #164]	@ (8001710 <HAL_ADC_ConfigChannel+0x250>)
 800166c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a28      	ldr	r2, [pc, #160]	@ (8001714 <HAL_ADC_ConfigChannel+0x254>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d10f      	bne.n	8001698 <HAL_ADC_ConfigChannel+0x1d8>
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2b12      	cmp	r3, #18
 800167e:	d10b      	bne.n	8001698 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a1d      	ldr	r2, [pc, #116]	@ (8001714 <HAL_ADC_ConfigChannel+0x254>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d12b      	bne.n	80016fa <HAL_ADC_ConfigChannel+0x23a>
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a1c      	ldr	r2, [pc, #112]	@ (8001718 <HAL_ADC_ConfigChannel+0x258>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d003      	beq.n	80016b4 <HAL_ADC_ConfigChannel+0x1f4>
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2b11      	cmp	r3, #17
 80016b2:	d122      	bne.n	80016fa <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a11      	ldr	r2, [pc, #68]	@ (8001718 <HAL_ADC_ConfigChannel+0x258>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d111      	bne.n	80016fa <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80016d6:	4b11      	ldr	r3, [pc, #68]	@ (800171c <HAL_ADC_ConfigChannel+0x25c>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a11      	ldr	r2, [pc, #68]	@ (8001720 <HAL_ADC_ConfigChannel+0x260>)
 80016dc:	fba2 2303 	umull	r2, r3, r2, r3
 80016e0:	0c9a      	lsrs	r2, r3, #18
 80016e2:	4613      	mov	r3, r2
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	4413      	add	r3, r2
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80016ec:	e002      	b.n	80016f4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	3b01      	subs	r3, #1
 80016f2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d1f9      	bne.n	80016ee <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2200      	movs	r2, #0
 80016fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001702:	2300      	movs	r3, #0
}
 8001704:	4618      	mov	r0, r3
 8001706:	3714      	adds	r7, #20
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr
 8001710:	40012300 	.word	0x40012300
 8001714:	40012000 	.word	0x40012000
 8001718:	10000012 	.word	0x10000012
 800171c:	20000000 	.word	0x20000000
 8001720:	431bde83 	.word	0x431bde83

08001724 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001724:	b480      	push	{r7}
 8001726:	b085      	sub	sp, #20
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800172c:	4b79      	ldr	r3, [pc, #484]	@ (8001914 <ADC_Init+0x1f0>)
 800172e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	685a      	ldr	r2, [r3, #4]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	431a      	orrs	r2, r3
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	685a      	ldr	r2, [r3, #4]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001758:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	6859      	ldr	r1, [r3, #4]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	691b      	ldr	r3, [r3, #16]
 8001764:	021a      	lsls	r2, r3, #8
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	430a      	orrs	r2, r1
 800176c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	685a      	ldr	r2, [r3, #4]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800177c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	6859      	ldr	r1, [r3, #4]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	689a      	ldr	r2, [r3, #8]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	430a      	orrs	r2, r1
 800178e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	689a      	ldr	r2, [r3, #8]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800179e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	6899      	ldr	r1, [r3, #8]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	68da      	ldr	r2, [r3, #12]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	430a      	orrs	r2, r1
 80017b0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017b6:	4a58      	ldr	r2, [pc, #352]	@ (8001918 <ADC_Init+0x1f4>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d022      	beq.n	8001802 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	689a      	ldr	r2, [r3, #8]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80017ca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	6899      	ldr	r1, [r3, #8]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	430a      	orrs	r2, r1
 80017dc:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	689a      	ldr	r2, [r3, #8]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80017ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	6899      	ldr	r1, [r3, #8]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	430a      	orrs	r2, r1
 80017fe:	609a      	str	r2, [r3, #8]
 8001800:	e00f      	b.n	8001822 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	689a      	ldr	r2, [r3, #8]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001810:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	689a      	ldr	r2, [r3, #8]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001820:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	689a      	ldr	r2, [r3, #8]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f022 0202 	bic.w	r2, r2, #2
 8001830:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	6899      	ldr	r1, [r3, #8]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	7e1b      	ldrb	r3, [r3, #24]
 800183c:	005a      	lsls	r2, r3, #1
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	430a      	orrs	r2, r1
 8001844:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	f893 3020 	ldrb.w	r3, [r3, #32]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d01b      	beq.n	8001888 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	685a      	ldr	r2, [r3, #4]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800185e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	685a      	ldr	r2, [r3, #4]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800186e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	6859      	ldr	r1, [r3, #4]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800187a:	3b01      	subs	r3, #1
 800187c:	035a      	lsls	r2, r3, #13
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	430a      	orrs	r2, r1
 8001884:	605a      	str	r2, [r3, #4]
 8001886:	e007      	b.n	8001898 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	685a      	ldr	r2, [r3, #4]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001896:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80018a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	69db      	ldr	r3, [r3, #28]
 80018b2:	3b01      	subs	r3, #1
 80018b4:	051a      	lsls	r2, r3, #20
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	430a      	orrs	r2, r1
 80018bc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	689a      	ldr	r2, [r3, #8]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80018cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	6899      	ldr	r1, [r3, #8]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80018da:	025a      	lsls	r2, r3, #9
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	430a      	orrs	r2, r1
 80018e2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	689a      	ldr	r2, [r3, #8]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80018f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	6899      	ldr	r1, [r3, #8]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	695b      	ldr	r3, [r3, #20]
 80018fe:	029a      	lsls	r2, r3, #10
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	430a      	orrs	r2, r1
 8001906:	609a      	str	r2, [r3, #8]
}
 8001908:	bf00      	nop
 800190a:	3714      	adds	r7, #20
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr
 8001914:	40012300 	.word	0x40012300
 8001918:	0f000001 	.word	0x0f000001

0800191c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001928:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800192e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001932:	2b00      	cmp	r3, #0
 8001934:	d13c      	bne.n	80019b0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800193a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800194c:	2b00      	cmp	r3, #0
 800194e:	d12b      	bne.n	80019a8 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001954:	2b00      	cmp	r3, #0
 8001956:	d127      	bne.n	80019a8 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800195e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001962:	2b00      	cmp	r3, #0
 8001964:	d006      	beq.n	8001974 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001970:	2b00      	cmp	r3, #0
 8001972:	d119      	bne.n	80019a8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	685a      	ldr	r2, [r3, #4]
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f022 0220 	bic.w	r2, r2, #32
 8001982:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001988:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001994:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d105      	bne.n	80019a8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a0:	f043 0201 	orr.w	r2, r3, #1
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80019a8:	68f8      	ldr	r0, [r7, #12]
 80019aa:	f7ff f8f7 	bl	8000b9c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80019ae:	e00e      	b.n	80019ce <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b4:	f003 0310 	and.w	r3, r3, #16
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d003      	beq.n	80019c4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80019bc:	68f8      	ldr	r0, [r7, #12]
 80019be:	f7ff fd75 	bl	80014ac <HAL_ADC_ErrorCallback>
}
 80019c2:	e004      	b.n	80019ce <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	4798      	blx	r3
}
 80019ce:	bf00      	nop
 80019d0:	3710      	adds	r7, #16
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80019d6:	b580      	push	{r7, lr}
 80019d8:	b084      	sub	sp, #16
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019e2:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80019e4:	68f8      	ldr	r0, [r7, #12]
 80019e6:	f7ff fd57 	bl	8001498 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80019ea:	bf00      	nop
 80019ec:	3710      	adds	r7, #16
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}

080019f2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80019f2:	b580      	push	{r7, lr}
 80019f4:	b084      	sub	sp, #16
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019fe:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	2240      	movs	r2, #64	@ 0x40
 8001a04:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a0a:	f043 0204 	orr.w	r2, r3, #4
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001a12:	68f8      	ldr	r0, [r7, #12]
 8001a14:	f7ff fd4a 	bl	80014ac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001a18:	bf00      	nop
 8001a1a:	3710      	adds	r7, #16
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}

08001a20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b085      	sub	sp, #20
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	f003 0307 	and.w	r3, r3, #7
 8001a2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a30:	4b0c      	ldr	r3, [pc, #48]	@ (8001a64 <__NVIC_SetPriorityGrouping+0x44>)
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a36:	68ba      	ldr	r2, [r7, #8]
 8001a38:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a48:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a52:	4a04      	ldr	r2, [pc, #16]	@ (8001a64 <__NVIC_SetPriorityGrouping+0x44>)
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	60d3      	str	r3, [r2, #12]
}
 8001a58:	bf00      	nop
 8001a5a:	3714      	adds	r7, #20
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr
 8001a64:	e000ed00 	.word	0xe000ed00

08001a68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a6c:	4b04      	ldr	r3, [pc, #16]	@ (8001a80 <__NVIC_GetPriorityGrouping+0x18>)
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	0a1b      	lsrs	r3, r3, #8
 8001a72:	f003 0307 	and.w	r3, r3, #7
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr
 8001a80:	e000ed00 	.word	0xe000ed00

08001a84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	db0b      	blt.n	8001aae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a96:	79fb      	ldrb	r3, [r7, #7]
 8001a98:	f003 021f 	and.w	r2, r3, #31
 8001a9c:	4907      	ldr	r1, [pc, #28]	@ (8001abc <__NVIC_EnableIRQ+0x38>)
 8001a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa2:	095b      	lsrs	r3, r3, #5
 8001aa4:	2001      	movs	r0, #1
 8001aa6:	fa00 f202 	lsl.w	r2, r0, r2
 8001aaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001aae:	bf00      	nop
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	e000e100 	.word	0xe000e100

08001ac0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	6039      	str	r1, [r7, #0]
 8001aca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001acc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	db0a      	blt.n	8001aea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	b2da      	uxtb	r2, r3
 8001ad8:	490c      	ldr	r1, [pc, #48]	@ (8001b0c <__NVIC_SetPriority+0x4c>)
 8001ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ade:	0112      	lsls	r2, r2, #4
 8001ae0:	b2d2      	uxtb	r2, r2
 8001ae2:	440b      	add	r3, r1
 8001ae4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ae8:	e00a      	b.n	8001b00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	b2da      	uxtb	r2, r3
 8001aee:	4908      	ldr	r1, [pc, #32]	@ (8001b10 <__NVIC_SetPriority+0x50>)
 8001af0:	79fb      	ldrb	r3, [r7, #7]
 8001af2:	f003 030f 	and.w	r3, r3, #15
 8001af6:	3b04      	subs	r3, #4
 8001af8:	0112      	lsls	r2, r2, #4
 8001afa:	b2d2      	uxtb	r2, r2
 8001afc:	440b      	add	r3, r1
 8001afe:	761a      	strb	r2, [r3, #24]
}
 8001b00:	bf00      	nop
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr
 8001b0c:	e000e100 	.word	0xe000e100
 8001b10:	e000ed00 	.word	0xe000ed00

08001b14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b089      	sub	sp, #36	@ 0x24
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	60f8      	str	r0, [r7, #12]
 8001b1c:	60b9      	str	r1, [r7, #8]
 8001b1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	f003 0307 	and.w	r3, r3, #7
 8001b26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	f1c3 0307 	rsb	r3, r3, #7
 8001b2e:	2b04      	cmp	r3, #4
 8001b30:	bf28      	it	cs
 8001b32:	2304      	movcs	r3, #4
 8001b34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	3304      	adds	r3, #4
 8001b3a:	2b06      	cmp	r3, #6
 8001b3c:	d902      	bls.n	8001b44 <NVIC_EncodePriority+0x30>
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	3b03      	subs	r3, #3
 8001b42:	e000      	b.n	8001b46 <NVIC_EncodePriority+0x32>
 8001b44:	2300      	movs	r3, #0
 8001b46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b48:	f04f 32ff 	mov.w	r2, #4294967295
 8001b4c:	69bb      	ldr	r3, [r7, #24]
 8001b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b52:	43da      	mvns	r2, r3
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	401a      	ands	r2, r3
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b5c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	fa01 f303 	lsl.w	r3, r1, r3
 8001b66:	43d9      	mvns	r1, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b6c:	4313      	orrs	r3, r2
         );
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3724      	adds	r7, #36	@ 0x24
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
	...

08001b7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	3b01      	subs	r3, #1
 8001b88:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b8c:	d301      	bcc.n	8001b92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e00f      	b.n	8001bb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b92:	4a0a      	ldr	r2, [pc, #40]	@ (8001bbc <SysTick_Config+0x40>)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	3b01      	subs	r3, #1
 8001b98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b9a:	210f      	movs	r1, #15
 8001b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001ba0:	f7ff ff8e 	bl	8001ac0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ba4:	4b05      	ldr	r3, [pc, #20]	@ (8001bbc <SysTick_Config+0x40>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001baa:	4b04      	ldr	r3, [pc, #16]	@ (8001bbc <SysTick_Config+0x40>)
 8001bac:	2207      	movs	r2, #7
 8001bae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bb0:	2300      	movs	r3, #0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	e000e010 	.word	0xe000e010

08001bc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f7ff ff29 	bl	8001a20 <__NVIC_SetPriorityGrouping>
}
 8001bce:	bf00      	nop
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b086      	sub	sp, #24
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	4603      	mov	r3, r0
 8001bde:	60b9      	str	r1, [r7, #8]
 8001be0:	607a      	str	r2, [r7, #4]
 8001be2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001be4:	2300      	movs	r3, #0
 8001be6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001be8:	f7ff ff3e 	bl	8001a68 <__NVIC_GetPriorityGrouping>
 8001bec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	68b9      	ldr	r1, [r7, #8]
 8001bf2:	6978      	ldr	r0, [r7, #20]
 8001bf4:	f7ff ff8e 	bl	8001b14 <NVIC_EncodePriority>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bfe:	4611      	mov	r1, r2
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff ff5d 	bl	8001ac0 <__NVIC_SetPriority>
}
 8001c06:	bf00      	nop
 8001c08:	3718      	adds	r7, #24
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b082      	sub	sp, #8
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	4603      	mov	r3, r0
 8001c16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7ff ff31 	bl	8001a84 <__NVIC_EnableIRQ>
}
 8001c22:	bf00      	nop
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}

08001c2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c2a:	b580      	push	{r7, lr}
 8001c2c:	b082      	sub	sp, #8
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f7ff ffa2 	bl	8001b7c <SysTick_Config>
 8001c38:	4603      	mov	r3, r0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
	...

08001c44 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b086      	sub	sp, #24
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001c50:	f7ff fa9e 	bl	8001190 <HAL_GetTick>
 8001c54:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d101      	bne.n	8001c60 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e099      	b.n	8001d94 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2202      	movs	r2, #2
 8001c64:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f022 0201 	bic.w	r2, r2, #1
 8001c7e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c80:	e00f      	b.n	8001ca2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c82:	f7ff fa85 	bl	8001190 <HAL_GetTick>
 8001c86:	4602      	mov	r2, r0
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	2b05      	cmp	r3, #5
 8001c8e:	d908      	bls.n	8001ca2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2220      	movs	r2, #32
 8001c94:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2203      	movs	r2, #3
 8001c9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e078      	b.n	8001d94 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0301 	and.w	r3, r3, #1
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d1e8      	bne.n	8001c82 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001cb8:	697a      	ldr	r2, [r7, #20]
 8001cba:	4b38      	ldr	r3, [pc, #224]	@ (8001d9c <HAL_DMA_Init+0x158>)
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	685a      	ldr	r2, [r3, #4]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	691b      	ldr	r3, [r3, #16]
 8001cd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cda:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	699b      	ldr	r3, [r3, #24]
 8001ce0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ce6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6a1b      	ldr	r3, [r3, #32]
 8001cec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cee:	697a      	ldr	r2, [r7, #20]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cf8:	2b04      	cmp	r3, #4
 8001cfa:	d107      	bne.n	8001d0c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d04:	4313      	orrs	r3, r2
 8001d06:	697a      	ldr	r2, [r7, #20]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	697a      	ldr	r2, [r7, #20]
 8001d12:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	695b      	ldr	r3, [r3, #20]
 8001d1a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	f023 0307 	bic.w	r3, r3, #7
 8001d22:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d28:	697a      	ldr	r2, [r7, #20]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d32:	2b04      	cmp	r3, #4
 8001d34:	d117      	bne.n	8001d66 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d3a:	697a      	ldr	r2, [r7, #20]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d00e      	beq.n	8001d66 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f000 fb01 	bl	8002350 <DMA_CheckFifoParam>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d008      	beq.n	8001d66 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2240      	movs	r2, #64	@ 0x40
 8001d58:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001d62:	2301      	movs	r3, #1
 8001d64:	e016      	b.n	8001d94 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	697a      	ldr	r2, [r7, #20]
 8001d6c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f000 fab8 	bl	80022e4 <DMA_CalcBaseAndBitshift>
 8001d74:	4603      	mov	r3, r0
 8001d76:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d7c:	223f      	movs	r2, #63	@ 0x3f
 8001d7e:	409a      	lsls	r2, r3
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001d92:	2300      	movs	r3, #0
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3718      	adds	r7, #24
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	f010803f 	.word	0xf010803f

08001da0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b086      	sub	sp, #24
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	60b9      	str	r1, [r7, #8]
 8001daa:	607a      	str	r2, [r7, #4]
 8001dac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001dae:	2300      	movs	r3, #0
 8001db0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001db6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d101      	bne.n	8001dc6 <HAL_DMA_Start_IT+0x26>
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	e040      	b.n	8001e48 <HAL_DMA_Start_IT+0xa8>
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2201      	movs	r2, #1
 8001dca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d12f      	bne.n	8001e3a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2202      	movs	r2, #2
 8001dde:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2200      	movs	r2, #0
 8001de6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	68b9      	ldr	r1, [r7, #8]
 8001dee:	68f8      	ldr	r0, [r7, #12]
 8001df0:	f000 fa4a 	bl	8002288 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001df8:	223f      	movs	r2, #63	@ 0x3f
 8001dfa:	409a      	lsls	r2, r3
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f042 0216 	orr.w	r2, r2, #22
 8001e0e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d007      	beq.n	8001e28 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f042 0208 	orr.w	r2, r2, #8
 8001e26:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f042 0201 	orr.w	r2, r2, #1
 8001e36:	601a      	str	r2, [r3, #0]
 8001e38:	e005      	b.n	8001e46 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001e42:	2302      	movs	r3, #2
 8001e44:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001e46:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3718      	adds	r7, #24
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e5c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001e5e:	f7ff f997 	bl	8001190 <HAL_GetTick>
 8001e62:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d008      	beq.n	8001e82 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2280      	movs	r2, #128	@ 0x80
 8001e74:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e052      	b.n	8001f28 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f022 0216 	bic.w	r2, r2, #22
 8001e90:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	695a      	ldr	r2, [r3, #20]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001ea0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d103      	bne.n	8001eb2 <HAL_DMA_Abort+0x62>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d007      	beq.n	8001ec2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f022 0208 	bic.w	r2, r2, #8
 8001ec0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f022 0201 	bic.w	r2, r2, #1
 8001ed0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ed2:	e013      	b.n	8001efc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ed4:	f7ff f95c 	bl	8001190 <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	2b05      	cmp	r3, #5
 8001ee0:	d90c      	bls.n	8001efc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2220      	movs	r2, #32
 8001ee6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2203      	movs	r2, #3
 8001eec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	e015      	b.n	8001f28 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d1e4      	bne.n	8001ed4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f0e:	223f      	movs	r2, #63	@ 0x3f
 8001f10:	409a      	lsls	r2, r3
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2201      	movs	r2, #1
 8001f1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001f26:	2300      	movs	r3, #0
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3710      	adds	r7, #16
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d004      	beq.n	8001f4e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2280      	movs	r2, #128	@ 0x80
 8001f48:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e00c      	b.n	8001f68 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2205      	movs	r2, #5
 8001f52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f022 0201 	bic.w	r2, r2, #1
 8001f64:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001f66:	2300      	movs	r3, #0
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b086      	sub	sp, #24
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f80:	4b8e      	ldr	r3, [pc, #568]	@ (80021bc <HAL_DMA_IRQHandler+0x248>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a8e      	ldr	r2, [pc, #568]	@ (80021c0 <HAL_DMA_IRQHandler+0x24c>)
 8001f86:	fba2 2303 	umull	r2, r3, r2, r3
 8001f8a:	0a9b      	lsrs	r3, r3, #10
 8001f8c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f92:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f9e:	2208      	movs	r2, #8
 8001fa0:	409a      	lsls	r2, r3
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d01a      	beq.n	8001fe0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0304 	and.w	r3, r3, #4
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d013      	beq.n	8001fe0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f022 0204 	bic.w	r2, r2, #4
 8001fc6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fcc:	2208      	movs	r2, #8
 8001fce:	409a      	lsls	r2, r3
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fd8:	f043 0201 	orr.w	r2, r3, #1
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	409a      	lsls	r2, r3
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	4013      	ands	r3, r2
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d012      	beq.n	8002016 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	695b      	ldr	r3, [r3, #20]
 8001ff6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d00b      	beq.n	8002016 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002002:	2201      	movs	r2, #1
 8002004:	409a      	lsls	r2, r3
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800200e:	f043 0202 	orr.w	r2, r3, #2
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800201a:	2204      	movs	r2, #4
 800201c:	409a      	lsls	r2, r3
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	4013      	ands	r3, r2
 8002022:	2b00      	cmp	r3, #0
 8002024:	d012      	beq.n	800204c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0302 	and.w	r3, r3, #2
 8002030:	2b00      	cmp	r3, #0
 8002032:	d00b      	beq.n	800204c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002038:	2204      	movs	r2, #4
 800203a:	409a      	lsls	r2, r3
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002044:	f043 0204 	orr.w	r2, r3, #4
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002050:	2210      	movs	r2, #16
 8002052:	409a      	lsls	r2, r3
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	4013      	ands	r3, r2
 8002058:	2b00      	cmp	r3, #0
 800205a:	d043      	beq.n	80020e4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0308 	and.w	r3, r3, #8
 8002066:	2b00      	cmp	r3, #0
 8002068:	d03c      	beq.n	80020e4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800206e:	2210      	movs	r2, #16
 8002070:	409a      	lsls	r2, r3
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002080:	2b00      	cmp	r3, #0
 8002082:	d018      	beq.n	80020b6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d108      	bne.n	80020a4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002096:	2b00      	cmp	r3, #0
 8002098:	d024      	beq.n	80020e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	4798      	blx	r3
 80020a2:	e01f      	b.n	80020e4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d01b      	beq.n	80020e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	4798      	blx	r3
 80020b4:	e016      	b.n	80020e4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d107      	bne.n	80020d4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f022 0208 	bic.w	r2, r2, #8
 80020d2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d003      	beq.n	80020e4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020e8:	2220      	movs	r2, #32
 80020ea:	409a      	lsls	r2, r3
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	4013      	ands	r3, r2
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	f000 808f 	beq.w	8002214 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0310 	and.w	r3, r3, #16
 8002100:	2b00      	cmp	r3, #0
 8002102:	f000 8087 	beq.w	8002214 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800210a:	2220      	movs	r2, #32
 800210c:	409a      	lsls	r2, r3
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002118:	b2db      	uxtb	r3, r3
 800211a:	2b05      	cmp	r3, #5
 800211c:	d136      	bne.n	800218c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f022 0216 	bic.w	r2, r2, #22
 800212c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	695a      	ldr	r2, [r3, #20]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800213c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002142:	2b00      	cmp	r3, #0
 8002144:	d103      	bne.n	800214e <HAL_DMA_IRQHandler+0x1da>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800214a:	2b00      	cmp	r3, #0
 800214c:	d007      	beq.n	800215e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f022 0208 	bic.w	r2, r2, #8
 800215c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002162:	223f      	movs	r2, #63	@ 0x3f
 8002164:	409a      	lsls	r2, r3
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2201      	movs	r2, #1
 800216e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800217e:	2b00      	cmp	r3, #0
 8002180:	d07e      	beq.n	8002280 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	4798      	blx	r3
        }
        return;
 800218a:	e079      	b.n	8002280 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d01d      	beq.n	80021d6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d10d      	bne.n	80021c4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d031      	beq.n	8002214 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	4798      	blx	r3
 80021b8:	e02c      	b.n	8002214 <HAL_DMA_IRQHandler+0x2a0>
 80021ba:	bf00      	nop
 80021bc:	20000000 	.word	0x20000000
 80021c0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d023      	beq.n	8002214 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	4798      	blx	r3
 80021d4:	e01e      	b.n	8002214 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d10f      	bne.n	8002204 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f022 0210 	bic.w	r2, r2, #16
 80021f2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2201      	movs	r2, #1
 80021f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2200      	movs	r2, #0
 8002200:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002208:	2b00      	cmp	r3, #0
 800220a:	d003      	beq.n	8002214 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002218:	2b00      	cmp	r3, #0
 800221a:	d032      	beq.n	8002282 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002220:	f003 0301 	and.w	r3, r3, #1
 8002224:	2b00      	cmp	r3, #0
 8002226:	d022      	beq.n	800226e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2205      	movs	r2, #5
 800222c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f022 0201 	bic.w	r2, r2, #1
 800223e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	3301      	adds	r3, #1
 8002244:	60bb      	str	r3, [r7, #8]
 8002246:	697a      	ldr	r2, [r7, #20]
 8002248:	429a      	cmp	r2, r3
 800224a:	d307      	bcc.n	800225c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0301 	and.w	r3, r3, #1
 8002256:	2b00      	cmp	r3, #0
 8002258:	d1f2      	bne.n	8002240 <HAL_DMA_IRQHandler+0x2cc>
 800225a:	e000      	b.n	800225e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800225c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2201      	movs	r2, #1
 8002262:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002272:	2b00      	cmp	r3, #0
 8002274:	d005      	beq.n	8002282 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	4798      	blx	r3
 800227e:	e000      	b.n	8002282 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002280:	bf00      	nop
    }
  }
}
 8002282:	3718      	adds	r7, #24
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}

08002288 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002288:	b480      	push	{r7}
 800228a:	b085      	sub	sp, #20
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	607a      	str	r2, [r7, #4]
 8002294:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80022a4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	683a      	ldr	r2, [r7, #0]
 80022ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	2b40      	cmp	r3, #64	@ 0x40
 80022b4:	d108      	bne.n	80022c8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	68ba      	ldr	r2, [r7, #8]
 80022c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80022c6:	e007      	b.n	80022d8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	68ba      	ldr	r2, [r7, #8]
 80022ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	60da      	str	r2, [r3, #12]
}
 80022d8:	bf00      	nop
 80022da:	3714      	adds	r7, #20
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b085      	sub	sp, #20
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	3b10      	subs	r3, #16
 80022f4:	4a14      	ldr	r2, [pc, #80]	@ (8002348 <DMA_CalcBaseAndBitshift+0x64>)
 80022f6:	fba2 2303 	umull	r2, r3, r2, r3
 80022fa:	091b      	lsrs	r3, r3, #4
 80022fc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80022fe:	4a13      	ldr	r2, [pc, #76]	@ (800234c <DMA_CalcBaseAndBitshift+0x68>)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	4413      	add	r3, r2
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	461a      	mov	r2, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2b03      	cmp	r3, #3
 8002310:	d909      	bls.n	8002326 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800231a:	f023 0303 	bic.w	r3, r3, #3
 800231e:	1d1a      	adds	r2, r3, #4
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	659a      	str	r2, [r3, #88]	@ 0x58
 8002324:	e007      	b.n	8002336 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800232e:	f023 0303 	bic.w	r3, r3, #3
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800233a:	4618      	mov	r0, r3
 800233c:	3714      	adds	r7, #20
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	aaaaaaab 	.word	0xaaaaaaab
 800234c:	08004d38 	.word	0x08004d38

08002350 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002350:	b480      	push	{r7}
 8002352:	b085      	sub	sp, #20
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002358:	2300      	movs	r3, #0
 800235a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002360:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	699b      	ldr	r3, [r3, #24]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d11f      	bne.n	80023aa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	2b03      	cmp	r3, #3
 800236e:	d856      	bhi.n	800241e <DMA_CheckFifoParam+0xce>
 8002370:	a201      	add	r2, pc, #4	@ (adr r2, 8002378 <DMA_CheckFifoParam+0x28>)
 8002372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002376:	bf00      	nop
 8002378:	08002389 	.word	0x08002389
 800237c:	0800239b 	.word	0x0800239b
 8002380:	08002389 	.word	0x08002389
 8002384:	0800241f 	.word	0x0800241f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800238c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d046      	beq.n	8002422 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002398:	e043      	b.n	8002422 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800239e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80023a2:	d140      	bne.n	8002426 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023a8:	e03d      	b.n	8002426 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	699b      	ldr	r3, [r3, #24]
 80023ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80023b2:	d121      	bne.n	80023f8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	2b03      	cmp	r3, #3
 80023b8:	d837      	bhi.n	800242a <DMA_CheckFifoParam+0xda>
 80023ba:	a201      	add	r2, pc, #4	@ (adr r2, 80023c0 <DMA_CheckFifoParam+0x70>)
 80023bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023c0:	080023d1 	.word	0x080023d1
 80023c4:	080023d7 	.word	0x080023d7
 80023c8:	080023d1 	.word	0x080023d1
 80023cc:	080023e9 	.word	0x080023e9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	73fb      	strb	r3, [r7, #15]
      break;
 80023d4:	e030      	b.n	8002438 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023da:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d025      	beq.n	800242e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023e6:	e022      	b.n	800242e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023ec:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80023f0:	d11f      	bne.n	8002432 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80023f6:	e01c      	b.n	8002432 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d903      	bls.n	8002406 <DMA_CheckFifoParam+0xb6>
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	2b03      	cmp	r3, #3
 8002402:	d003      	beq.n	800240c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002404:	e018      	b.n	8002438 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	73fb      	strb	r3, [r7, #15]
      break;
 800240a:	e015      	b.n	8002438 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002410:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d00e      	beq.n	8002436 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	73fb      	strb	r3, [r7, #15]
      break;
 800241c:	e00b      	b.n	8002436 <DMA_CheckFifoParam+0xe6>
      break;
 800241e:	bf00      	nop
 8002420:	e00a      	b.n	8002438 <DMA_CheckFifoParam+0xe8>
      break;
 8002422:	bf00      	nop
 8002424:	e008      	b.n	8002438 <DMA_CheckFifoParam+0xe8>
      break;
 8002426:	bf00      	nop
 8002428:	e006      	b.n	8002438 <DMA_CheckFifoParam+0xe8>
      break;
 800242a:	bf00      	nop
 800242c:	e004      	b.n	8002438 <DMA_CheckFifoParam+0xe8>
      break;
 800242e:	bf00      	nop
 8002430:	e002      	b.n	8002438 <DMA_CheckFifoParam+0xe8>
      break;   
 8002432:	bf00      	nop
 8002434:	e000      	b.n	8002438 <DMA_CheckFifoParam+0xe8>
      break;
 8002436:	bf00      	nop
    }
  } 
  
  return status; 
 8002438:	7bfb      	ldrb	r3, [r7, #15]
}
 800243a:	4618      	mov	r0, r3
 800243c:	3714      	adds	r7, #20
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop

08002448 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002448:	b480      	push	{r7}
 800244a:	b089      	sub	sp, #36	@ 0x24
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002452:	2300      	movs	r3, #0
 8002454:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002456:	2300      	movs	r3, #0
 8002458:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800245a:	2300      	movs	r3, #0
 800245c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800245e:	2300      	movs	r3, #0
 8002460:	61fb      	str	r3, [r7, #28]
 8002462:	e165      	b.n	8002730 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002464:	2201      	movs	r2, #1
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	fa02 f303 	lsl.w	r3, r2, r3
 800246c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	697a      	ldr	r2, [r7, #20]
 8002474:	4013      	ands	r3, r2
 8002476:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002478:	693a      	ldr	r2, [r7, #16]
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	429a      	cmp	r2, r3
 800247e:	f040 8154 	bne.w	800272a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f003 0303 	and.w	r3, r3, #3
 800248a:	2b01      	cmp	r3, #1
 800248c:	d005      	beq.n	800249a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002496:	2b02      	cmp	r3, #2
 8002498:	d130      	bne.n	80024fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	005b      	lsls	r3, r3, #1
 80024a4:	2203      	movs	r2, #3
 80024a6:	fa02 f303 	lsl.w	r3, r2, r3
 80024aa:	43db      	mvns	r3, r3
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	4013      	ands	r3, r2
 80024b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	68da      	ldr	r2, [r3, #12]
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	005b      	lsls	r3, r3, #1
 80024ba:	fa02 f303 	lsl.w	r3, r2, r3
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	69ba      	ldr	r2, [r7, #24]
 80024c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024d0:	2201      	movs	r2, #1
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	fa02 f303 	lsl.w	r3, r2, r3
 80024d8:	43db      	mvns	r3, r3
 80024da:	69ba      	ldr	r2, [r7, #24]
 80024dc:	4013      	ands	r3, r2
 80024de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	091b      	lsrs	r3, r3, #4
 80024e6:	f003 0201 	and.w	r2, r3, #1
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	fa02 f303 	lsl.w	r3, r2, r3
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	69ba      	ldr	r2, [r7, #24]
 80024fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f003 0303 	and.w	r3, r3, #3
 8002504:	2b03      	cmp	r3, #3
 8002506:	d017      	beq.n	8002538 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	005b      	lsls	r3, r3, #1
 8002512:	2203      	movs	r2, #3
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	43db      	mvns	r3, r3
 800251a:	69ba      	ldr	r2, [r7, #24]
 800251c:	4013      	ands	r3, r2
 800251e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	689a      	ldr	r2, [r3, #8]
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	005b      	lsls	r3, r3, #1
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	4313      	orrs	r3, r2
 8002530:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f003 0303 	and.w	r3, r3, #3
 8002540:	2b02      	cmp	r3, #2
 8002542:	d123      	bne.n	800258c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	08da      	lsrs	r2, r3, #3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	3208      	adds	r2, #8
 800254c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002550:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	f003 0307 	and.w	r3, r3, #7
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	220f      	movs	r2, #15
 800255c:	fa02 f303 	lsl.w	r3, r2, r3
 8002560:	43db      	mvns	r3, r3
 8002562:	69ba      	ldr	r2, [r7, #24]
 8002564:	4013      	ands	r3, r2
 8002566:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	691a      	ldr	r2, [r3, #16]
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	f003 0307 	and.w	r3, r3, #7
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	fa02 f303 	lsl.w	r3, r2, r3
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	4313      	orrs	r3, r2
 800257c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	08da      	lsrs	r2, r3, #3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	3208      	adds	r2, #8
 8002586:	69b9      	ldr	r1, [r7, #24]
 8002588:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	005b      	lsls	r3, r3, #1
 8002596:	2203      	movs	r2, #3
 8002598:	fa02 f303 	lsl.w	r3, r2, r3
 800259c:	43db      	mvns	r3, r3
 800259e:	69ba      	ldr	r2, [r7, #24]
 80025a0:	4013      	ands	r3, r2
 80025a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f003 0203 	and.w	r2, r3, #3
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	005b      	lsls	r3, r3, #1
 80025b0:	fa02 f303 	lsl.w	r3, r2, r3
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	69ba      	ldr	r2, [r7, #24]
 80025be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	f000 80ae 	beq.w	800272a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ce:	2300      	movs	r3, #0
 80025d0:	60fb      	str	r3, [r7, #12]
 80025d2:	4b5d      	ldr	r3, [pc, #372]	@ (8002748 <HAL_GPIO_Init+0x300>)
 80025d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025d6:	4a5c      	ldr	r2, [pc, #368]	@ (8002748 <HAL_GPIO_Init+0x300>)
 80025d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80025de:	4b5a      	ldr	r3, [pc, #360]	@ (8002748 <HAL_GPIO_Init+0x300>)
 80025e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025e6:	60fb      	str	r3, [r7, #12]
 80025e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025ea:	4a58      	ldr	r2, [pc, #352]	@ (800274c <HAL_GPIO_Init+0x304>)
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	089b      	lsrs	r3, r3, #2
 80025f0:	3302      	adds	r3, #2
 80025f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	f003 0303 	and.w	r3, r3, #3
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	220f      	movs	r2, #15
 8002602:	fa02 f303 	lsl.w	r3, r2, r3
 8002606:	43db      	mvns	r3, r3
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	4013      	ands	r3, r2
 800260c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a4f      	ldr	r2, [pc, #316]	@ (8002750 <HAL_GPIO_Init+0x308>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d025      	beq.n	8002662 <HAL_GPIO_Init+0x21a>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a4e      	ldr	r2, [pc, #312]	@ (8002754 <HAL_GPIO_Init+0x30c>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d01f      	beq.n	800265e <HAL_GPIO_Init+0x216>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a4d      	ldr	r2, [pc, #308]	@ (8002758 <HAL_GPIO_Init+0x310>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d019      	beq.n	800265a <HAL_GPIO_Init+0x212>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a4c      	ldr	r2, [pc, #304]	@ (800275c <HAL_GPIO_Init+0x314>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d013      	beq.n	8002656 <HAL_GPIO_Init+0x20e>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a4b      	ldr	r2, [pc, #300]	@ (8002760 <HAL_GPIO_Init+0x318>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d00d      	beq.n	8002652 <HAL_GPIO_Init+0x20a>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a4a      	ldr	r2, [pc, #296]	@ (8002764 <HAL_GPIO_Init+0x31c>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d007      	beq.n	800264e <HAL_GPIO_Init+0x206>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a49      	ldr	r2, [pc, #292]	@ (8002768 <HAL_GPIO_Init+0x320>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d101      	bne.n	800264a <HAL_GPIO_Init+0x202>
 8002646:	2306      	movs	r3, #6
 8002648:	e00c      	b.n	8002664 <HAL_GPIO_Init+0x21c>
 800264a:	2307      	movs	r3, #7
 800264c:	e00a      	b.n	8002664 <HAL_GPIO_Init+0x21c>
 800264e:	2305      	movs	r3, #5
 8002650:	e008      	b.n	8002664 <HAL_GPIO_Init+0x21c>
 8002652:	2304      	movs	r3, #4
 8002654:	e006      	b.n	8002664 <HAL_GPIO_Init+0x21c>
 8002656:	2303      	movs	r3, #3
 8002658:	e004      	b.n	8002664 <HAL_GPIO_Init+0x21c>
 800265a:	2302      	movs	r3, #2
 800265c:	e002      	b.n	8002664 <HAL_GPIO_Init+0x21c>
 800265e:	2301      	movs	r3, #1
 8002660:	e000      	b.n	8002664 <HAL_GPIO_Init+0x21c>
 8002662:	2300      	movs	r3, #0
 8002664:	69fa      	ldr	r2, [r7, #28]
 8002666:	f002 0203 	and.w	r2, r2, #3
 800266a:	0092      	lsls	r2, r2, #2
 800266c:	4093      	lsls	r3, r2
 800266e:	69ba      	ldr	r2, [r7, #24]
 8002670:	4313      	orrs	r3, r2
 8002672:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002674:	4935      	ldr	r1, [pc, #212]	@ (800274c <HAL_GPIO_Init+0x304>)
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	089b      	lsrs	r3, r3, #2
 800267a:	3302      	adds	r3, #2
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002682:	4b3a      	ldr	r3, [pc, #232]	@ (800276c <HAL_GPIO_Init+0x324>)
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	43db      	mvns	r3, r3
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	4013      	ands	r3, r2
 8002690:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d003      	beq.n	80026a6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800269e:	69ba      	ldr	r2, [r7, #24]
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026a6:	4a31      	ldr	r2, [pc, #196]	@ (800276c <HAL_GPIO_Init+0x324>)
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026ac:	4b2f      	ldr	r3, [pc, #188]	@ (800276c <HAL_GPIO_Init+0x324>)
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	43db      	mvns	r3, r3
 80026b6:	69ba      	ldr	r2, [r7, #24]
 80026b8:	4013      	ands	r3, r2
 80026ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d003      	beq.n	80026d0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026d0:	4a26      	ldr	r2, [pc, #152]	@ (800276c <HAL_GPIO_Init+0x324>)
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026d6:	4b25      	ldr	r3, [pc, #148]	@ (800276c <HAL_GPIO_Init+0x324>)
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	43db      	mvns	r3, r3
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	4013      	ands	r3, r2
 80026e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d003      	beq.n	80026fa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80026f2:	69ba      	ldr	r2, [r7, #24]
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026fa:	4a1c      	ldr	r2, [pc, #112]	@ (800276c <HAL_GPIO_Init+0x324>)
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002700:	4b1a      	ldr	r3, [pc, #104]	@ (800276c <HAL_GPIO_Init+0x324>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	43db      	mvns	r3, r3
 800270a:	69ba      	ldr	r2, [r7, #24]
 800270c:	4013      	ands	r3, r2
 800270e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d003      	beq.n	8002724 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	4313      	orrs	r3, r2
 8002722:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002724:	4a11      	ldr	r2, [pc, #68]	@ (800276c <HAL_GPIO_Init+0x324>)
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	3301      	adds	r3, #1
 800272e:	61fb      	str	r3, [r7, #28]
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	2b0f      	cmp	r3, #15
 8002734:	f67f ae96 	bls.w	8002464 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002738:	bf00      	nop
 800273a:	bf00      	nop
 800273c:	3724      	adds	r7, #36	@ 0x24
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
 8002746:	bf00      	nop
 8002748:	40023800 	.word	0x40023800
 800274c:	40013800 	.word	0x40013800
 8002750:	40020000 	.word	0x40020000
 8002754:	40020400 	.word	0x40020400
 8002758:	40020800 	.word	0x40020800
 800275c:	40020c00 	.word	0x40020c00
 8002760:	40021000 	.word	0x40021000
 8002764:	40021400 	.word	0x40021400
 8002768:	40021800 	.word	0x40021800
 800276c:	40013c00 	.word	0x40013c00

08002770 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	460b      	mov	r3, r1
 800277a:	807b      	strh	r3, [r7, #2]
 800277c:	4613      	mov	r3, r2
 800277e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002780:	787b      	ldrb	r3, [r7, #1]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d003      	beq.n	800278e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002786:	887a      	ldrh	r2, [r7, #2]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800278c:	e003      	b.n	8002796 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800278e:	887b      	ldrh	r3, [r7, #2]
 8002790:	041a      	lsls	r2, r3, #16
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	619a      	str	r2, [r3, #24]
}
 8002796:	bf00      	nop
 8002798:	370c      	adds	r7, #12
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr
	...

080027a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d101      	bne.n	80027b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e0cc      	b.n	8002952 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027b8:	4b68      	ldr	r3, [pc, #416]	@ (800295c <HAL_RCC_ClockConfig+0x1b8>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 030f 	and.w	r3, r3, #15
 80027c0:	683a      	ldr	r2, [r7, #0]
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d90c      	bls.n	80027e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027c6:	4b65      	ldr	r3, [pc, #404]	@ (800295c <HAL_RCC_ClockConfig+0x1b8>)
 80027c8:	683a      	ldr	r2, [r7, #0]
 80027ca:	b2d2      	uxtb	r2, r2
 80027cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ce:	4b63      	ldr	r3, [pc, #396]	@ (800295c <HAL_RCC_ClockConfig+0x1b8>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 030f 	and.w	r3, r3, #15
 80027d6:	683a      	ldr	r2, [r7, #0]
 80027d8:	429a      	cmp	r2, r3
 80027da:	d001      	beq.n	80027e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e0b8      	b.n	8002952 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0302 	and.w	r3, r3, #2
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d020      	beq.n	800282e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0304 	and.w	r3, r3, #4
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d005      	beq.n	8002804 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027f8:	4b59      	ldr	r3, [pc, #356]	@ (8002960 <HAL_RCC_ClockConfig+0x1bc>)
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	4a58      	ldr	r2, [pc, #352]	@ (8002960 <HAL_RCC_ClockConfig+0x1bc>)
 80027fe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002802:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0308 	and.w	r3, r3, #8
 800280c:	2b00      	cmp	r3, #0
 800280e:	d005      	beq.n	800281c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002810:	4b53      	ldr	r3, [pc, #332]	@ (8002960 <HAL_RCC_ClockConfig+0x1bc>)
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	4a52      	ldr	r2, [pc, #328]	@ (8002960 <HAL_RCC_ClockConfig+0x1bc>)
 8002816:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800281a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800281c:	4b50      	ldr	r3, [pc, #320]	@ (8002960 <HAL_RCC_ClockConfig+0x1bc>)
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	494d      	ldr	r1, [pc, #308]	@ (8002960 <HAL_RCC_ClockConfig+0x1bc>)
 800282a:	4313      	orrs	r3, r2
 800282c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0301 	and.w	r3, r3, #1
 8002836:	2b00      	cmp	r3, #0
 8002838:	d044      	beq.n	80028c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	2b01      	cmp	r3, #1
 8002840:	d107      	bne.n	8002852 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002842:	4b47      	ldr	r3, [pc, #284]	@ (8002960 <HAL_RCC_ClockConfig+0x1bc>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d119      	bne.n	8002882 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e07f      	b.n	8002952 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	2b02      	cmp	r3, #2
 8002858:	d003      	beq.n	8002862 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800285e:	2b03      	cmp	r3, #3
 8002860:	d107      	bne.n	8002872 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002862:	4b3f      	ldr	r3, [pc, #252]	@ (8002960 <HAL_RCC_ClockConfig+0x1bc>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d109      	bne.n	8002882 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e06f      	b.n	8002952 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002872:	4b3b      	ldr	r3, [pc, #236]	@ (8002960 <HAL_RCC_ClockConfig+0x1bc>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0302 	and.w	r3, r3, #2
 800287a:	2b00      	cmp	r3, #0
 800287c:	d101      	bne.n	8002882 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e067      	b.n	8002952 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002882:	4b37      	ldr	r3, [pc, #220]	@ (8002960 <HAL_RCC_ClockConfig+0x1bc>)
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	f023 0203 	bic.w	r2, r3, #3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	4934      	ldr	r1, [pc, #208]	@ (8002960 <HAL_RCC_ClockConfig+0x1bc>)
 8002890:	4313      	orrs	r3, r2
 8002892:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002894:	f7fe fc7c 	bl	8001190 <HAL_GetTick>
 8002898:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800289a:	e00a      	b.n	80028b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800289c:	f7fe fc78 	bl	8001190 <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e04f      	b.n	8002952 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028b2:	4b2b      	ldr	r3, [pc, #172]	@ (8002960 <HAL_RCC_ClockConfig+0x1bc>)
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	f003 020c 	and.w	r2, r3, #12
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d1eb      	bne.n	800289c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028c4:	4b25      	ldr	r3, [pc, #148]	@ (800295c <HAL_RCC_ClockConfig+0x1b8>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 030f 	and.w	r3, r3, #15
 80028cc:	683a      	ldr	r2, [r7, #0]
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d20c      	bcs.n	80028ec <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028d2:	4b22      	ldr	r3, [pc, #136]	@ (800295c <HAL_RCC_ClockConfig+0x1b8>)
 80028d4:	683a      	ldr	r2, [r7, #0]
 80028d6:	b2d2      	uxtb	r2, r2
 80028d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028da:	4b20      	ldr	r3, [pc, #128]	@ (800295c <HAL_RCC_ClockConfig+0x1b8>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 030f 	and.w	r3, r3, #15
 80028e2:	683a      	ldr	r2, [r7, #0]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d001      	beq.n	80028ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e032      	b.n	8002952 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0304 	and.w	r3, r3, #4
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d008      	beq.n	800290a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028f8:	4b19      	ldr	r3, [pc, #100]	@ (8002960 <HAL_RCC_ClockConfig+0x1bc>)
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	4916      	ldr	r1, [pc, #88]	@ (8002960 <HAL_RCC_ClockConfig+0x1bc>)
 8002906:	4313      	orrs	r3, r2
 8002908:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0308 	and.w	r3, r3, #8
 8002912:	2b00      	cmp	r3, #0
 8002914:	d009      	beq.n	800292a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002916:	4b12      	ldr	r3, [pc, #72]	@ (8002960 <HAL_RCC_ClockConfig+0x1bc>)
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	691b      	ldr	r3, [r3, #16]
 8002922:	00db      	lsls	r3, r3, #3
 8002924:	490e      	ldr	r1, [pc, #56]	@ (8002960 <HAL_RCC_ClockConfig+0x1bc>)
 8002926:	4313      	orrs	r3, r2
 8002928:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800292a:	f000 f855 	bl	80029d8 <HAL_RCC_GetSysClockFreq>
 800292e:	4602      	mov	r2, r0
 8002930:	4b0b      	ldr	r3, [pc, #44]	@ (8002960 <HAL_RCC_ClockConfig+0x1bc>)
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	091b      	lsrs	r3, r3, #4
 8002936:	f003 030f 	and.w	r3, r3, #15
 800293a:	490a      	ldr	r1, [pc, #40]	@ (8002964 <HAL_RCC_ClockConfig+0x1c0>)
 800293c:	5ccb      	ldrb	r3, [r1, r3]
 800293e:	fa22 f303 	lsr.w	r3, r2, r3
 8002942:	4a09      	ldr	r2, [pc, #36]	@ (8002968 <HAL_RCC_ClockConfig+0x1c4>)
 8002944:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002946:	4b09      	ldr	r3, [pc, #36]	@ (800296c <HAL_RCC_ClockConfig+0x1c8>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4618      	mov	r0, r3
 800294c:	f7fe fbdc 	bl	8001108 <HAL_InitTick>

  return HAL_OK;
 8002950:	2300      	movs	r3, #0
}
 8002952:	4618      	mov	r0, r3
 8002954:	3710      	adds	r7, #16
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	40023c00 	.word	0x40023c00
 8002960:	40023800 	.word	0x40023800
 8002964:	08004d20 	.word	0x08004d20
 8002968:	20000000 	.word	0x20000000
 800296c:	20000004 	.word	0x20000004

08002970 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002970:	b480      	push	{r7}
 8002972:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002974:	4b03      	ldr	r3, [pc, #12]	@ (8002984 <HAL_RCC_GetHCLKFreq+0x14>)
 8002976:	681b      	ldr	r3, [r3, #0]
}
 8002978:	4618      	mov	r0, r3
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr
 8002982:	bf00      	nop
 8002984:	20000000 	.word	0x20000000

08002988 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800298c:	f7ff fff0 	bl	8002970 <HAL_RCC_GetHCLKFreq>
 8002990:	4602      	mov	r2, r0
 8002992:	4b05      	ldr	r3, [pc, #20]	@ (80029a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	0a9b      	lsrs	r3, r3, #10
 8002998:	f003 0307 	and.w	r3, r3, #7
 800299c:	4903      	ldr	r1, [pc, #12]	@ (80029ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800299e:	5ccb      	ldrb	r3, [r1, r3]
 80029a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	40023800 	.word	0x40023800
 80029ac:	08004d30 	.word	0x08004d30

080029b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80029b4:	f7ff ffdc 	bl	8002970 <HAL_RCC_GetHCLKFreq>
 80029b8:	4602      	mov	r2, r0
 80029ba:	4b05      	ldr	r3, [pc, #20]	@ (80029d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	0b5b      	lsrs	r3, r3, #13
 80029c0:	f003 0307 	and.w	r3, r3, #7
 80029c4:	4903      	ldr	r1, [pc, #12]	@ (80029d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029c6:	5ccb      	ldrb	r3, [r1, r3]
 80029c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	40023800 	.word	0x40023800
 80029d4:	08004d30 	.word	0x08004d30

080029d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029dc:	b0ae      	sub	sp, #184	@ 0xb8
 80029de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80029e0:	2300      	movs	r3, #0
 80029e2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80029e6:	2300      	movs	r3, #0
 80029e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80029ec:	2300      	movs	r3, #0
 80029ee:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80029f2:	2300      	movs	r3, #0
 80029f4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80029f8:	2300      	movs	r3, #0
 80029fa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029fe:	4bcb      	ldr	r3, [pc, #812]	@ (8002d2c <HAL_RCC_GetSysClockFreq+0x354>)
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	f003 030c 	and.w	r3, r3, #12
 8002a06:	2b0c      	cmp	r3, #12
 8002a08:	f200 8206 	bhi.w	8002e18 <HAL_RCC_GetSysClockFreq+0x440>
 8002a0c:	a201      	add	r2, pc, #4	@ (adr r2, 8002a14 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a12:	bf00      	nop
 8002a14:	08002a49 	.word	0x08002a49
 8002a18:	08002e19 	.word	0x08002e19
 8002a1c:	08002e19 	.word	0x08002e19
 8002a20:	08002e19 	.word	0x08002e19
 8002a24:	08002a51 	.word	0x08002a51
 8002a28:	08002e19 	.word	0x08002e19
 8002a2c:	08002e19 	.word	0x08002e19
 8002a30:	08002e19 	.word	0x08002e19
 8002a34:	08002a59 	.word	0x08002a59
 8002a38:	08002e19 	.word	0x08002e19
 8002a3c:	08002e19 	.word	0x08002e19
 8002a40:	08002e19 	.word	0x08002e19
 8002a44:	08002c49 	.word	0x08002c49
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a48:	4bb9      	ldr	r3, [pc, #740]	@ (8002d30 <HAL_RCC_GetSysClockFreq+0x358>)
 8002a4a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002a4e:	e1e7      	b.n	8002e20 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a50:	4bb8      	ldr	r3, [pc, #736]	@ (8002d34 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002a52:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002a56:	e1e3      	b.n	8002e20 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a58:	4bb4      	ldr	r3, [pc, #720]	@ (8002d2c <HAL_RCC_GetSysClockFreq+0x354>)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002a60:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a64:	4bb1      	ldr	r3, [pc, #708]	@ (8002d2c <HAL_RCC_GetSysClockFreq+0x354>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d071      	beq.n	8002b54 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a70:	4bae      	ldr	r3, [pc, #696]	@ (8002d2c <HAL_RCC_GetSysClockFreq+0x354>)
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	099b      	lsrs	r3, r3, #6
 8002a76:	2200      	movs	r2, #0
 8002a78:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002a7c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002a80:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002a84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a88:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002a92:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002a96:	4622      	mov	r2, r4
 8002a98:	462b      	mov	r3, r5
 8002a9a:	f04f 0000 	mov.w	r0, #0
 8002a9e:	f04f 0100 	mov.w	r1, #0
 8002aa2:	0159      	lsls	r1, r3, #5
 8002aa4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002aa8:	0150      	lsls	r0, r2, #5
 8002aaa:	4602      	mov	r2, r0
 8002aac:	460b      	mov	r3, r1
 8002aae:	4621      	mov	r1, r4
 8002ab0:	1a51      	subs	r1, r2, r1
 8002ab2:	6439      	str	r1, [r7, #64]	@ 0x40
 8002ab4:	4629      	mov	r1, r5
 8002ab6:	eb63 0301 	sbc.w	r3, r3, r1
 8002aba:	647b      	str	r3, [r7, #68]	@ 0x44
 8002abc:	f04f 0200 	mov.w	r2, #0
 8002ac0:	f04f 0300 	mov.w	r3, #0
 8002ac4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002ac8:	4649      	mov	r1, r9
 8002aca:	018b      	lsls	r3, r1, #6
 8002acc:	4641      	mov	r1, r8
 8002ace:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ad2:	4641      	mov	r1, r8
 8002ad4:	018a      	lsls	r2, r1, #6
 8002ad6:	4641      	mov	r1, r8
 8002ad8:	1a51      	subs	r1, r2, r1
 8002ada:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002adc:	4649      	mov	r1, r9
 8002ade:	eb63 0301 	sbc.w	r3, r3, r1
 8002ae2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ae4:	f04f 0200 	mov.w	r2, #0
 8002ae8:	f04f 0300 	mov.w	r3, #0
 8002aec:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002af0:	4649      	mov	r1, r9
 8002af2:	00cb      	lsls	r3, r1, #3
 8002af4:	4641      	mov	r1, r8
 8002af6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002afa:	4641      	mov	r1, r8
 8002afc:	00ca      	lsls	r2, r1, #3
 8002afe:	4610      	mov	r0, r2
 8002b00:	4619      	mov	r1, r3
 8002b02:	4603      	mov	r3, r0
 8002b04:	4622      	mov	r2, r4
 8002b06:	189b      	adds	r3, r3, r2
 8002b08:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b0a:	462b      	mov	r3, r5
 8002b0c:	460a      	mov	r2, r1
 8002b0e:	eb42 0303 	adc.w	r3, r2, r3
 8002b12:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b14:	f04f 0200 	mov.w	r2, #0
 8002b18:	f04f 0300 	mov.w	r3, #0
 8002b1c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002b20:	4629      	mov	r1, r5
 8002b22:	024b      	lsls	r3, r1, #9
 8002b24:	4621      	mov	r1, r4
 8002b26:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002b2a:	4621      	mov	r1, r4
 8002b2c:	024a      	lsls	r2, r1, #9
 8002b2e:	4610      	mov	r0, r2
 8002b30:	4619      	mov	r1, r3
 8002b32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b36:	2200      	movs	r2, #0
 8002b38:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002b3c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002b40:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002b44:	f7fd fbbc 	bl	80002c0 <__aeabi_uldivmod>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	460b      	mov	r3, r1
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002b52:	e067      	b.n	8002c24 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b54:	4b75      	ldr	r3, [pc, #468]	@ (8002d2c <HAL_RCC_GetSysClockFreq+0x354>)
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	099b      	lsrs	r3, r3, #6
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002b60:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002b64:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002b68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b6c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002b6e:	2300      	movs	r3, #0
 8002b70:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002b72:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002b76:	4622      	mov	r2, r4
 8002b78:	462b      	mov	r3, r5
 8002b7a:	f04f 0000 	mov.w	r0, #0
 8002b7e:	f04f 0100 	mov.w	r1, #0
 8002b82:	0159      	lsls	r1, r3, #5
 8002b84:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b88:	0150      	lsls	r0, r2, #5
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	460b      	mov	r3, r1
 8002b8e:	4621      	mov	r1, r4
 8002b90:	1a51      	subs	r1, r2, r1
 8002b92:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002b94:	4629      	mov	r1, r5
 8002b96:	eb63 0301 	sbc.w	r3, r3, r1
 8002b9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b9c:	f04f 0200 	mov.w	r2, #0
 8002ba0:	f04f 0300 	mov.w	r3, #0
 8002ba4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002ba8:	4649      	mov	r1, r9
 8002baa:	018b      	lsls	r3, r1, #6
 8002bac:	4641      	mov	r1, r8
 8002bae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002bb2:	4641      	mov	r1, r8
 8002bb4:	018a      	lsls	r2, r1, #6
 8002bb6:	4641      	mov	r1, r8
 8002bb8:	ebb2 0a01 	subs.w	sl, r2, r1
 8002bbc:	4649      	mov	r1, r9
 8002bbe:	eb63 0b01 	sbc.w	fp, r3, r1
 8002bc2:	f04f 0200 	mov.w	r2, #0
 8002bc6:	f04f 0300 	mov.w	r3, #0
 8002bca:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002bce:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002bd2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002bd6:	4692      	mov	sl, r2
 8002bd8:	469b      	mov	fp, r3
 8002bda:	4623      	mov	r3, r4
 8002bdc:	eb1a 0303 	adds.w	r3, sl, r3
 8002be0:	623b      	str	r3, [r7, #32]
 8002be2:	462b      	mov	r3, r5
 8002be4:	eb4b 0303 	adc.w	r3, fp, r3
 8002be8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bea:	f04f 0200 	mov.w	r2, #0
 8002bee:	f04f 0300 	mov.w	r3, #0
 8002bf2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002bf6:	4629      	mov	r1, r5
 8002bf8:	028b      	lsls	r3, r1, #10
 8002bfa:	4621      	mov	r1, r4
 8002bfc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c00:	4621      	mov	r1, r4
 8002c02:	028a      	lsls	r2, r1, #10
 8002c04:	4610      	mov	r0, r2
 8002c06:	4619      	mov	r1, r3
 8002c08:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	673b      	str	r3, [r7, #112]	@ 0x70
 8002c10:	677a      	str	r2, [r7, #116]	@ 0x74
 8002c12:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002c16:	f7fd fb53 	bl	80002c0 <__aeabi_uldivmod>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	460b      	mov	r3, r1
 8002c1e:	4613      	mov	r3, r2
 8002c20:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002c24:	4b41      	ldr	r3, [pc, #260]	@ (8002d2c <HAL_RCC_GetSysClockFreq+0x354>)
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	0c1b      	lsrs	r3, r3, #16
 8002c2a:	f003 0303 	and.w	r3, r3, #3
 8002c2e:	3301      	adds	r3, #1
 8002c30:	005b      	lsls	r3, r3, #1
 8002c32:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8002c36:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002c3a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c42:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002c46:	e0eb      	b.n	8002e20 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c48:	4b38      	ldr	r3, [pc, #224]	@ (8002d2c <HAL_RCC_GetSysClockFreq+0x354>)
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c50:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c54:	4b35      	ldr	r3, [pc, #212]	@ (8002d2c <HAL_RCC_GetSysClockFreq+0x354>)
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d06b      	beq.n	8002d38 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c60:	4b32      	ldr	r3, [pc, #200]	@ (8002d2c <HAL_RCC_GetSysClockFreq+0x354>)
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	099b      	lsrs	r3, r3, #6
 8002c66:	2200      	movs	r2, #0
 8002c68:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002c6a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002c6c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002c6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c72:	663b      	str	r3, [r7, #96]	@ 0x60
 8002c74:	2300      	movs	r3, #0
 8002c76:	667b      	str	r3, [r7, #100]	@ 0x64
 8002c78:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002c7c:	4622      	mov	r2, r4
 8002c7e:	462b      	mov	r3, r5
 8002c80:	f04f 0000 	mov.w	r0, #0
 8002c84:	f04f 0100 	mov.w	r1, #0
 8002c88:	0159      	lsls	r1, r3, #5
 8002c8a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c8e:	0150      	lsls	r0, r2, #5
 8002c90:	4602      	mov	r2, r0
 8002c92:	460b      	mov	r3, r1
 8002c94:	4621      	mov	r1, r4
 8002c96:	1a51      	subs	r1, r2, r1
 8002c98:	61b9      	str	r1, [r7, #24]
 8002c9a:	4629      	mov	r1, r5
 8002c9c:	eb63 0301 	sbc.w	r3, r3, r1
 8002ca0:	61fb      	str	r3, [r7, #28]
 8002ca2:	f04f 0200 	mov.w	r2, #0
 8002ca6:	f04f 0300 	mov.w	r3, #0
 8002caa:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002cae:	4659      	mov	r1, fp
 8002cb0:	018b      	lsls	r3, r1, #6
 8002cb2:	4651      	mov	r1, sl
 8002cb4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002cb8:	4651      	mov	r1, sl
 8002cba:	018a      	lsls	r2, r1, #6
 8002cbc:	4651      	mov	r1, sl
 8002cbe:	ebb2 0801 	subs.w	r8, r2, r1
 8002cc2:	4659      	mov	r1, fp
 8002cc4:	eb63 0901 	sbc.w	r9, r3, r1
 8002cc8:	f04f 0200 	mov.w	r2, #0
 8002ccc:	f04f 0300 	mov.w	r3, #0
 8002cd0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002cd4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002cd8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002cdc:	4690      	mov	r8, r2
 8002cde:	4699      	mov	r9, r3
 8002ce0:	4623      	mov	r3, r4
 8002ce2:	eb18 0303 	adds.w	r3, r8, r3
 8002ce6:	613b      	str	r3, [r7, #16]
 8002ce8:	462b      	mov	r3, r5
 8002cea:	eb49 0303 	adc.w	r3, r9, r3
 8002cee:	617b      	str	r3, [r7, #20]
 8002cf0:	f04f 0200 	mov.w	r2, #0
 8002cf4:	f04f 0300 	mov.w	r3, #0
 8002cf8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002cfc:	4629      	mov	r1, r5
 8002cfe:	024b      	lsls	r3, r1, #9
 8002d00:	4621      	mov	r1, r4
 8002d02:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d06:	4621      	mov	r1, r4
 8002d08:	024a      	lsls	r2, r1, #9
 8002d0a:	4610      	mov	r0, r2
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002d12:	2200      	movs	r2, #0
 8002d14:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002d16:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002d18:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002d1c:	f7fd fad0 	bl	80002c0 <__aeabi_uldivmod>
 8002d20:	4602      	mov	r2, r0
 8002d22:	460b      	mov	r3, r1
 8002d24:	4613      	mov	r3, r2
 8002d26:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002d2a:	e065      	b.n	8002df8 <HAL_RCC_GetSysClockFreq+0x420>
 8002d2c:	40023800 	.word	0x40023800
 8002d30:	00f42400 	.word	0x00f42400
 8002d34:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d38:	4b3d      	ldr	r3, [pc, #244]	@ (8002e30 <HAL_RCC_GetSysClockFreq+0x458>)
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	099b      	lsrs	r3, r3, #6
 8002d3e:	2200      	movs	r2, #0
 8002d40:	4618      	mov	r0, r3
 8002d42:	4611      	mov	r1, r2
 8002d44:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002d48:	653b      	str	r3, [r7, #80]	@ 0x50
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	657b      	str	r3, [r7, #84]	@ 0x54
 8002d4e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002d52:	4642      	mov	r2, r8
 8002d54:	464b      	mov	r3, r9
 8002d56:	f04f 0000 	mov.w	r0, #0
 8002d5a:	f04f 0100 	mov.w	r1, #0
 8002d5e:	0159      	lsls	r1, r3, #5
 8002d60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d64:	0150      	lsls	r0, r2, #5
 8002d66:	4602      	mov	r2, r0
 8002d68:	460b      	mov	r3, r1
 8002d6a:	4641      	mov	r1, r8
 8002d6c:	1a51      	subs	r1, r2, r1
 8002d6e:	60b9      	str	r1, [r7, #8]
 8002d70:	4649      	mov	r1, r9
 8002d72:	eb63 0301 	sbc.w	r3, r3, r1
 8002d76:	60fb      	str	r3, [r7, #12]
 8002d78:	f04f 0200 	mov.w	r2, #0
 8002d7c:	f04f 0300 	mov.w	r3, #0
 8002d80:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002d84:	4659      	mov	r1, fp
 8002d86:	018b      	lsls	r3, r1, #6
 8002d88:	4651      	mov	r1, sl
 8002d8a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d8e:	4651      	mov	r1, sl
 8002d90:	018a      	lsls	r2, r1, #6
 8002d92:	4651      	mov	r1, sl
 8002d94:	1a54      	subs	r4, r2, r1
 8002d96:	4659      	mov	r1, fp
 8002d98:	eb63 0501 	sbc.w	r5, r3, r1
 8002d9c:	f04f 0200 	mov.w	r2, #0
 8002da0:	f04f 0300 	mov.w	r3, #0
 8002da4:	00eb      	lsls	r3, r5, #3
 8002da6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002daa:	00e2      	lsls	r2, r4, #3
 8002dac:	4614      	mov	r4, r2
 8002dae:	461d      	mov	r5, r3
 8002db0:	4643      	mov	r3, r8
 8002db2:	18e3      	adds	r3, r4, r3
 8002db4:	603b      	str	r3, [r7, #0]
 8002db6:	464b      	mov	r3, r9
 8002db8:	eb45 0303 	adc.w	r3, r5, r3
 8002dbc:	607b      	str	r3, [r7, #4]
 8002dbe:	f04f 0200 	mov.w	r2, #0
 8002dc2:	f04f 0300 	mov.w	r3, #0
 8002dc6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002dca:	4629      	mov	r1, r5
 8002dcc:	028b      	lsls	r3, r1, #10
 8002dce:	4621      	mov	r1, r4
 8002dd0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002dd4:	4621      	mov	r1, r4
 8002dd6:	028a      	lsls	r2, r1, #10
 8002dd8:	4610      	mov	r0, r2
 8002dda:	4619      	mov	r1, r3
 8002ddc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002de0:	2200      	movs	r2, #0
 8002de2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002de4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002de6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002dea:	f7fd fa69 	bl	80002c0 <__aeabi_uldivmod>
 8002dee:	4602      	mov	r2, r0
 8002df0:	460b      	mov	r3, r1
 8002df2:	4613      	mov	r3, r2
 8002df4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002df8:	4b0d      	ldr	r3, [pc, #52]	@ (8002e30 <HAL_RCC_GetSysClockFreq+0x458>)
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	0f1b      	lsrs	r3, r3, #28
 8002dfe:	f003 0307 	and.w	r3, r3, #7
 8002e02:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002e06:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002e0a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002e0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e12:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002e16:	e003      	b.n	8002e20 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e18:	4b06      	ldr	r3, [pc, #24]	@ (8002e34 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002e1a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002e1e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e20:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	37b8      	adds	r7, #184	@ 0xb8
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e2e:	bf00      	nop
 8002e30:	40023800 	.word	0x40023800
 8002e34:	00f42400 	.word	0x00f42400

08002e38 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b086      	sub	sp, #24
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d101      	bne.n	8002e4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e28d      	b.n	8003366 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0301 	and.w	r3, r3, #1
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	f000 8083 	beq.w	8002f5e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002e58:	4b94      	ldr	r3, [pc, #592]	@ (80030ac <HAL_RCC_OscConfig+0x274>)
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	f003 030c 	and.w	r3, r3, #12
 8002e60:	2b04      	cmp	r3, #4
 8002e62:	d019      	beq.n	8002e98 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002e64:	4b91      	ldr	r3, [pc, #580]	@ (80030ac <HAL_RCC_OscConfig+0x274>)
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	f003 030c 	and.w	r3, r3, #12
        || \
 8002e6c:	2b08      	cmp	r3, #8
 8002e6e:	d106      	bne.n	8002e7e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002e70:	4b8e      	ldr	r3, [pc, #568]	@ (80030ac <HAL_RCC_OscConfig+0x274>)
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e78:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e7c:	d00c      	beq.n	8002e98 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e7e:	4b8b      	ldr	r3, [pc, #556]	@ (80030ac <HAL_RCC_OscConfig+0x274>)
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002e86:	2b0c      	cmp	r3, #12
 8002e88:	d112      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e8a:	4b88      	ldr	r3, [pc, #544]	@ (80030ac <HAL_RCC_OscConfig+0x274>)
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e92:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e96:	d10b      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e98:	4b84      	ldr	r3, [pc, #528]	@ (80030ac <HAL_RCC_OscConfig+0x274>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d05b      	beq.n	8002f5c <HAL_RCC_OscConfig+0x124>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d157      	bne.n	8002f5c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e25a      	b.n	8003366 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002eb8:	d106      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x90>
 8002eba:	4b7c      	ldr	r3, [pc, #496]	@ (80030ac <HAL_RCC_OscConfig+0x274>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a7b      	ldr	r2, [pc, #492]	@ (80030ac <HAL_RCC_OscConfig+0x274>)
 8002ec0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ec4:	6013      	str	r3, [r2, #0]
 8002ec6:	e01d      	b.n	8002f04 <HAL_RCC_OscConfig+0xcc>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ed0:	d10c      	bne.n	8002eec <HAL_RCC_OscConfig+0xb4>
 8002ed2:	4b76      	ldr	r3, [pc, #472]	@ (80030ac <HAL_RCC_OscConfig+0x274>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a75      	ldr	r2, [pc, #468]	@ (80030ac <HAL_RCC_OscConfig+0x274>)
 8002ed8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002edc:	6013      	str	r3, [r2, #0]
 8002ede:	4b73      	ldr	r3, [pc, #460]	@ (80030ac <HAL_RCC_OscConfig+0x274>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a72      	ldr	r2, [pc, #456]	@ (80030ac <HAL_RCC_OscConfig+0x274>)
 8002ee4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ee8:	6013      	str	r3, [r2, #0]
 8002eea:	e00b      	b.n	8002f04 <HAL_RCC_OscConfig+0xcc>
 8002eec:	4b6f      	ldr	r3, [pc, #444]	@ (80030ac <HAL_RCC_OscConfig+0x274>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a6e      	ldr	r2, [pc, #440]	@ (80030ac <HAL_RCC_OscConfig+0x274>)
 8002ef2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ef6:	6013      	str	r3, [r2, #0]
 8002ef8:	4b6c      	ldr	r3, [pc, #432]	@ (80030ac <HAL_RCC_OscConfig+0x274>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a6b      	ldr	r2, [pc, #428]	@ (80030ac <HAL_RCC_OscConfig+0x274>)
 8002efe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d013      	beq.n	8002f34 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f0c:	f7fe f940 	bl	8001190 <HAL_GetTick>
 8002f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f12:	e008      	b.n	8002f26 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f14:	f7fe f93c 	bl	8001190 <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	2b64      	cmp	r3, #100	@ 0x64
 8002f20:	d901      	bls.n	8002f26 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e21f      	b.n	8003366 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f26:	4b61      	ldr	r3, [pc, #388]	@ (80030ac <HAL_RCC_OscConfig+0x274>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d0f0      	beq.n	8002f14 <HAL_RCC_OscConfig+0xdc>
 8002f32:	e014      	b.n	8002f5e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f34:	f7fe f92c 	bl	8001190 <HAL_GetTick>
 8002f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f3a:	e008      	b.n	8002f4e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f3c:	f7fe f928 	bl	8001190 <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	2b64      	cmp	r3, #100	@ 0x64
 8002f48:	d901      	bls.n	8002f4e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e20b      	b.n	8003366 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f4e:	4b57      	ldr	r3, [pc, #348]	@ (80030ac <HAL_RCC_OscConfig+0x274>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d1f0      	bne.n	8002f3c <HAL_RCC_OscConfig+0x104>
 8002f5a:	e000      	b.n	8002f5e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0302 	and.w	r3, r3, #2
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d06f      	beq.n	800304a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002f6a:	4b50      	ldr	r3, [pc, #320]	@ (80030ac <HAL_RCC_OscConfig+0x274>)
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	f003 030c 	and.w	r3, r3, #12
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d017      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002f76:	4b4d      	ldr	r3, [pc, #308]	@ (80030ac <HAL_RCC_OscConfig+0x274>)
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f003 030c 	and.w	r3, r3, #12
        || \
 8002f7e:	2b08      	cmp	r3, #8
 8002f80:	d105      	bne.n	8002f8e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002f82:	4b4a      	ldr	r3, [pc, #296]	@ (80030ac <HAL_RCC_OscConfig+0x274>)
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d00b      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f8e:	4b47      	ldr	r3, [pc, #284]	@ (80030ac <HAL_RCC_OscConfig+0x274>)
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002f96:	2b0c      	cmp	r3, #12
 8002f98:	d11c      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f9a:	4b44      	ldr	r3, [pc, #272]	@ (80030ac <HAL_RCC_OscConfig+0x274>)
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d116      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fa6:	4b41      	ldr	r3, [pc, #260]	@ (80030ac <HAL_RCC_OscConfig+0x274>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0302 	and.w	r3, r3, #2
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d005      	beq.n	8002fbe <HAL_RCC_OscConfig+0x186>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d001      	beq.n	8002fbe <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e1d3      	b.n	8003366 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fbe:	4b3b      	ldr	r3, [pc, #236]	@ (80030ac <HAL_RCC_OscConfig+0x274>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	691b      	ldr	r3, [r3, #16]
 8002fca:	00db      	lsls	r3, r3, #3
 8002fcc:	4937      	ldr	r1, [pc, #220]	@ (80030ac <HAL_RCC_OscConfig+0x274>)
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fd2:	e03a      	b.n	800304a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d020      	beq.n	800301e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fdc:	4b34      	ldr	r3, [pc, #208]	@ (80030b0 <HAL_RCC_OscConfig+0x278>)
 8002fde:	2201      	movs	r2, #1
 8002fe0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe2:	f7fe f8d5 	bl	8001190 <HAL_GetTick>
 8002fe6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fe8:	e008      	b.n	8002ffc <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fea:	f7fe f8d1 	bl	8001190 <HAL_GetTick>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d901      	bls.n	8002ffc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	e1b4      	b.n	8003366 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ffc:	4b2b      	ldr	r3, [pc, #172]	@ (80030ac <HAL_RCC_OscConfig+0x274>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0302 	and.w	r3, r3, #2
 8003004:	2b00      	cmp	r3, #0
 8003006:	d0f0      	beq.n	8002fea <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003008:	4b28      	ldr	r3, [pc, #160]	@ (80030ac <HAL_RCC_OscConfig+0x274>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	691b      	ldr	r3, [r3, #16]
 8003014:	00db      	lsls	r3, r3, #3
 8003016:	4925      	ldr	r1, [pc, #148]	@ (80030ac <HAL_RCC_OscConfig+0x274>)
 8003018:	4313      	orrs	r3, r2
 800301a:	600b      	str	r3, [r1, #0]
 800301c:	e015      	b.n	800304a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800301e:	4b24      	ldr	r3, [pc, #144]	@ (80030b0 <HAL_RCC_OscConfig+0x278>)
 8003020:	2200      	movs	r2, #0
 8003022:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003024:	f7fe f8b4 	bl	8001190 <HAL_GetTick>
 8003028:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800302a:	e008      	b.n	800303e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800302c:	f7fe f8b0 	bl	8001190 <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	2b02      	cmp	r3, #2
 8003038:	d901      	bls.n	800303e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e193      	b.n	8003366 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800303e:	4b1b      	ldr	r3, [pc, #108]	@ (80030ac <HAL_RCC_OscConfig+0x274>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0302 	and.w	r3, r3, #2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d1f0      	bne.n	800302c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0308 	and.w	r3, r3, #8
 8003052:	2b00      	cmp	r3, #0
 8003054:	d036      	beq.n	80030c4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	695b      	ldr	r3, [r3, #20]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d016      	beq.n	800308c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800305e:	4b15      	ldr	r3, [pc, #84]	@ (80030b4 <HAL_RCC_OscConfig+0x27c>)
 8003060:	2201      	movs	r2, #1
 8003062:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003064:	f7fe f894 	bl	8001190 <HAL_GetTick>
 8003068:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800306a:	e008      	b.n	800307e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800306c:	f7fe f890 	bl	8001190 <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	2b02      	cmp	r3, #2
 8003078:	d901      	bls.n	800307e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e173      	b.n	8003366 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800307e:	4b0b      	ldr	r3, [pc, #44]	@ (80030ac <HAL_RCC_OscConfig+0x274>)
 8003080:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003082:	f003 0302 	and.w	r3, r3, #2
 8003086:	2b00      	cmp	r3, #0
 8003088:	d0f0      	beq.n	800306c <HAL_RCC_OscConfig+0x234>
 800308a:	e01b      	b.n	80030c4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800308c:	4b09      	ldr	r3, [pc, #36]	@ (80030b4 <HAL_RCC_OscConfig+0x27c>)
 800308e:	2200      	movs	r2, #0
 8003090:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003092:	f7fe f87d 	bl	8001190 <HAL_GetTick>
 8003096:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003098:	e00e      	b.n	80030b8 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800309a:	f7fe f879 	bl	8001190 <HAL_GetTick>
 800309e:	4602      	mov	r2, r0
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	2b02      	cmp	r3, #2
 80030a6:	d907      	bls.n	80030b8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80030a8:	2303      	movs	r3, #3
 80030aa:	e15c      	b.n	8003366 <HAL_RCC_OscConfig+0x52e>
 80030ac:	40023800 	.word	0x40023800
 80030b0:	42470000 	.word	0x42470000
 80030b4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030b8:	4b8a      	ldr	r3, [pc, #552]	@ (80032e4 <HAL_RCC_OscConfig+0x4ac>)
 80030ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030bc:	f003 0302 	and.w	r3, r3, #2
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d1ea      	bne.n	800309a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0304 	and.w	r3, r3, #4
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	f000 8097 	beq.w	8003200 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030d2:	2300      	movs	r3, #0
 80030d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030d6:	4b83      	ldr	r3, [pc, #524]	@ (80032e4 <HAL_RCC_OscConfig+0x4ac>)
 80030d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d10f      	bne.n	8003102 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030e2:	2300      	movs	r3, #0
 80030e4:	60bb      	str	r3, [r7, #8]
 80030e6:	4b7f      	ldr	r3, [pc, #508]	@ (80032e4 <HAL_RCC_OscConfig+0x4ac>)
 80030e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ea:	4a7e      	ldr	r2, [pc, #504]	@ (80032e4 <HAL_RCC_OscConfig+0x4ac>)
 80030ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80030f2:	4b7c      	ldr	r3, [pc, #496]	@ (80032e4 <HAL_RCC_OscConfig+0x4ac>)
 80030f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030fa:	60bb      	str	r3, [r7, #8]
 80030fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030fe:	2301      	movs	r3, #1
 8003100:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003102:	4b79      	ldr	r3, [pc, #484]	@ (80032e8 <HAL_RCC_OscConfig+0x4b0>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800310a:	2b00      	cmp	r3, #0
 800310c:	d118      	bne.n	8003140 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800310e:	4b76      	ldr	r3, [pc, #472]	@ (80032e8 <HAL_RCC_OscConfig+0x4b0>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a75      	ldr	r2, [pc, #468]	@ (80032e8 <HAL_RCC_OscConfig+0x4b0>)
 8003114:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003118:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800311a:	f7fe f839 	bl	8001190 <HAL_GetTick>
 800311e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003120:	e008      	b.n	8003134 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003122:	f7fe f835 	bl	8001190 <HAL_GetTick>
 8003126:	4602      	mov	r2, r0
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	2b02      	cmp	r3, #2
 800312e:	d901      	bls.n	8003134 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003130:	2303      	movs	r3, #3
 8003132:	e118      	b.n	8003366 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003134:	4b6c      	ldr	r3, [pc, #432]	@ (80032e8 <HAL_RCC_OscConfig+0x4b0>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800313c:	2b00      	cmp	r3, #0
 800313e:	d0f0      	beq.n	8003122 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	2b01      	cmp	r3, #1
 8003146:	d106      	bne.n	8003156 <HAL_RCC_OscConfig+0x31e>
 8003148:	4b66      	ldr	r3, [pc, #408]	@ (80032e4 <HAL_RCC_OscConfig+0x4ac>)
 800314a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800314c:	4a65      	ldr	r2, [pc, #404]	@ (80032e4 <HAL_RCC_OscConfig+0x4ac>)
 800314e:	f043 0301 	orr.w	r3, r3, #1
 8003152:	6713      	str	r3, [r2, #112]	@ 0x70
 8003154:	e01c      	b.n	8003190 <HAL_RCC_OscConfig+0x358>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	2b05      	cmp	r3, #5
 800315c:	d10c      	bne.n	8003178 <HAL_RCC_OscConfig+0x340>
 800315e:	4b61      	ldr	r3, [pc, #388]	@ (80032e4 <HAL_RCC_OscConfig+0x4ac>)
 8003160:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003162:	4a60      	ldr	r2, [pc, #384]	@ (80032e4 <HAL_RCC_OscConfig+0x4ac>)
 8003164:	f043 0304 	orr.w	r3, r3, #4
 8003168:	6713      	str	r3, [r2, #112]	@ 0x70
 800316a:	4b5e      	ldr	r3, [pc, #376]	@ (80032e4 <HAL_RCC_OscConfig+0x4ac>)
 800316c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800316e:	4a5d      	ldr	r2, [pc, #372]	@ (80032e4 <HAL_RCC_OscConfig+0x4ac>)
 8003170:	f043 0301 	orr.w	r3, r3, #1
 8003174:	6713      	str	r3, [r2, #112]	@ 0x70
 8003176:	e00b      	b.n	8003190 <HAL_RCC_OscConfig+0x358>
 8003178:	4b5a      	ldr	r3, [pc, #360]	@ (80032e4 <HAL_RCC_OscConfig+0x4ac>)
 800317a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800317c:	4a59      	ldr	r2, [pc, #356]	@ (80032e4 <HAL_RCC_OscConfig+0x4ac>)
 800317e:	f023 0301 	bic.w	r3, r3, #1
 8003182:	6713      	str	r3, [r2, #112]	@ 0x70
 8003184:	4b57      	ldr	r3, [pc, #348]	@ (80032e4 <HAL_RCC_OscConfig+0x4ac>)
 8003186:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003188:	4a56      	ldr	r2, [pc, #344]	@ (80032e4 <HAL_RCC_OscConfig+0x4ac>)
 800318a:	f023 0304 	bic.w	r3, r3, #4
 800318e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d015      	beq.n	80031c4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003198:	f7fd fffa 	bl	8001190 <HAL_GetTick>
 800319c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800319e:	e00a      	b.n	80031b6 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031a0:	f7fd fff6 	bl	8001190 <HAL_GetTick>
 80031a4:	4602      	mov	r2, r0
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d901      	bls.n	80031b6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e0d7      	b.n	8003366 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031b6:	4b4b      	ldr	r3, [pc, #300]	@ (80032e4 <HAL_RCC_OscConfig+0x4ac>)
 80031b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031ba:	f003 0302 	and.w	r3, r3, #2
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d0ee      	beq.n	80031a0 <HAL_RCC_OscConfig+0x368>
 80031c2:	e014      	b.n	80031ee <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031c4:	f7fd ffe4 	bl	8001190 <HAL_GetTick>
 80031c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031ca:	e00a      	b.n	80031e2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031cc:	f7fd ffe0 	bl	8001190 <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031da:	4293      	cmp	r3, r2
 80031dc:	d901      	bls.n	80031e2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e0c1      	b.n	8003366 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031e2:	4b40      	ldr	r3, [pc, #256]	@ (80032e4 <HAL_RCC_OscConfig+0x4ac>)
 80031e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031e6:	f003 0302 	and.w	r3, r3, #2
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d1ee      	bne.n	80031cc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80031ee:	7dfb      	ldrb	r3, [r7, #23]
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d105      	bne.n	8003200 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031f4:	4b3b      	ldr	r3, [pc, #236]	@ (80032e4 <HAL_RCC_OscConfig+0x4ac>)
 80031f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f8:	4a3a      	ldr	r2, [pc, #232]	@ (80032e4 <HAL_RCC_OscConfig+0x4ac>)
 80031fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031fe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	699b      	ldr	r3, [r3, #24]
 8003204:	2b00      	cmp	r3, #0
 8003206:	f000 80ad 	beq.w	8003364 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800320a:	4b36      	ldr	r3, [pc, #216]	@ (80032e4 <HAL_RCC_OscConfig+0x4ac>)
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	f003 030c 	and.w	r3, r3, #12
 8003212:	2b08      	cmp	r3, #8
 8003214:	d060      	beq.n	80032d8 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	699b      	ldr	r3, [r3, #24]
 800321a:	2b02      	cmp	r3, #2
 800321c:	d145      	bne.n	80032aa <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800321e:	4b33      	ldr	r3, [pc, #204]	@ (80032ec <HAL_RCC_OscConfig+0x4b4>)
 8003220:	2200      	movs	r2, #0
 8003222:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003224:	f7fd ffb4 	bl	8001190 <HAL_GetTick>
 8003228:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800322a:	e008      	b.n	800323e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800322c:	f7fd ffb0 	bl	8001190 <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	2b02      	cmp	r3, #2
 8003238:	d901      	bls.n	800323e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e093      	b.n	8003366 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800323e:	4b29      	ldr	r3, [pc, #164]	@ (80032e4 <HAL_RCC_OscConfig+0x4ac>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d1f0      	bne.n	800322c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	69da      	ldr	r2, [r3, #28]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a1b      	ldr	r3, [r3, #32]
 8003252:	431a      	orrs	r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003258:	019b      	lsls	r3, r3, #6
 800325a:	431a      	orrs	r2, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003260:	085b      	lsrs	r3, r3, #1
 8003262:	3b01      	subs	r3, #1
 8003264:	041b      	lsls	r3, r3, #16
 8003266:	431a      	orrs	r2, r3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800326c:	061b      	lsls	r3, r3, #24
 800326e:	431a      	orrs	r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003274:	071b      	lsls	r3, r3, #28
 8003276:	491b      	ldr	r1, [pc, #108]	@ (80032e4 <HAL_RCC_OscConfig+0x4ac>)
 8003278:	4313      	orrs	r3, r2
 800327a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800327c:	4b1b      	ldr	r3, [pc, #108]	@ (80032ec <HAL_RCC_OscConfig+0x4b4>)
 800327e:	2201      	movs	r2, #1
 8003280:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003282:	f7fd ff85 	bl	8001190 <HAL_GetTick>
 8003286:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003288:	e008      	b.n	800329c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800328a:	f7fd ff81 	bl	8001190 <HAL_GetTick>
 800328e:	4602      	mov	r2, r0
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	2b02      	cmp	r3, #2
 8003296:	d901      	bls.n	800329c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003298:	2303      	movs	r3, #3
 800329a:	e064      	b.n	8003366 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800329c:	4b11      	ldr	r3, [pc, #68]	@ (80032e4 <HAL_RCC_OscConfig+0x4ac>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d0f0      	beq.n	800328a <HAL_RCC_OscConfig+0x452>
 80032a8:	e05c      	b.n	8003364 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032aa:	4b10      	ldr	r3, [pc, #64]	@ (80032ec <HAL_RCC_OscConfig+0x4b4>)
 80032ac:	2200      	movs	r2, #0
 80032ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032b0:	f7fd ff6e 	bl	8001190 <HAL_GetTick>
 80032b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032b6:	e008      	b.n	80032ca <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032b8:	f7fd ff6a 	bl	8001190 <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	d901      	bls.n	80032ca <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	e04d      	b.n	8003366 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032ca:	4b06      	ldr	r3, [pc, #24]	@ (80032e4 <HAL_RCC_OscConfig+0x4ac>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d1f0      	bne.n	80032b8 <HAL_RCC_OscConfig+0x480>
 80032d6:	e045      	b.n	8003364 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	699b      	ldr	r3, [r3, #24]
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d107      	bne.n	80032f0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e040      	b.n	8003366 <HAL_RCC_OscConfig+0x52e>
 80032e4:	40023800 	.word	0x40023800
 80032e8:	40007000 	.word	0x40007000
 80032ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032f0:	4b1f      	ldr	r3, [pc, #124]	@ (8003370 <HAL_RCC_OscConfig+0x538>)
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	699b      	ldr	r3, [r3, #24]
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d030      	beq.n	8003360 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003308:	429a      	cmp	r2, r3
 800330a:	d129      	bne.n	8003360 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003316:	429a      	cmp	r2, r3
 8003318:	d122      	bne.n	8003360 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800331a:	68fa      	ldr	r2, [r7, #12]
 800331c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003320:	4013      	ands	r3, r2
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003326:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003328:	4293      	cmp	r3, r2
 800332a:	d119      	bne.n	8003360 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003336:	085b      	lsrs	r3, r3, #1
 8003338:	3b01      	subs	r3, #1
 800333a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800333c:	429a      	cmp	r2, r3
 800333e:	d10f      	bne.n	8003360 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800334a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800334c:	429a      	cmp	r2, r3
 800334e:	d107      	bne.n	8003360 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800335a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800335c:	429a      	cmp	r2, r3
 800335e:	d001      	beq.n	8003364 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e000      	b.n	8003366 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3718      	adds	r7, #24
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	40023800 	.word	0x40023800

08003374 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b082      	sub	sp, #8
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d101      	bne.n	8003386 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e042      	b.n	800340c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800338c:	b2db      	uxtb	r3, r3
 800338e:	2b00      	cmp	r3, #0
 8003390:	d106      	bne.n	80033a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f7fd fcce 	bl	8000d3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2224      	movs	r2, #36	@ 0x24
 80033a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	68da      	ldr	r2, [r3, #12]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80033b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f000 fd11 	bl	8003de0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	691a      	ldr	r2, [r3, #16]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80033cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	695a      	ldr	r2, [r3, #20]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80033dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	68da      	ldr	r2, [r3, #12]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80033ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2220      	movs	r2, #32
 80033f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2220      	movs	r2, #32
 8003400:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800340a:	2300      	movs	r3, #0
}
 800340c:	4618      	mov	r0, r3
 800340e:	3708      	adds	r7, #8
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}

08003414 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003414:	b480      	push	{r7}
 8003416:	b085      	sub	sp, #20
 8003418:	af00      	add	r7, sp, #0
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	60b9      	str	r1, [r7, #8]
 800341e:	4613      	mov	r3, r2
 8003420:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003428:	b2db      	uxtb	r3, r3
 800342a:	2b20      	cmp	r3, #32
 800342c:	d121      	bne.n	8003472 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d002      	beq.n	800343a <HAL_UART_Transmit_IT+0x26>
 8003434:	88fb      	ldrh	r3, [r7, #6]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d101      	bne.n	800343e <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e01a      	b.n	8003474 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	68ba      	ldr	r2, [r7, #8]
 8003442:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	88fa      	ldrh	r2, [r7, #6]
 8003448:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	88fa      	ldrh	r2, [r7, #6]
 800344e:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2200      	movs	r2, #0
 8003454:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2221      	movs	r2, #33	@ 0x21
 800345a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	68da      	ldr	r2, [r3, #12]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800346c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800346e:	2300      	movs	r3, #0
 8003470:	e000      	b.n	8003474 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8003472:	2302      	movs	r3, #2
  }
}
 8003474:	4618      	mov	r0, r3
 8003476:	3714      	adds	r7, #20
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr

08003480 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b084      	sub	sp, #16
 8003484:	af00      	add	r7, sp, #0
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	60b9      	str	r1, [r7, #8]
 800348a:	4613      	mov	r3, r2
 800348c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003494:	b2db      	uxtb	r3, r3
 8003496:	2b20      	cmp	r3, #32
 8003498:	d112      	bne.n	80034c0 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d002      	beq.n	80034a6 <HAL_UART_Receive_IT+0x26>
 80034a0:	88fb      	ldrh	r3, [r7, #6]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d101      	bne.n	80034aa <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e00b      	b.n	80034c2 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2200      	movs	r2, #0
 80034ae:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80034b0:	88fb      	ldrh	r3, [r7, #6]
 80034b2:	461a      	mov	r2, r3
 80034b4:	68b9      	ldr	r1, [r7, #8]
 80034b6:	68f8      	ldr	r0, [r7, #12]
 80034b8:	f000 faba 	bl	8003a30 <UART_Start_Receive_IT>
 80034bc:	4603      	mov	r3, r0
 80034be:	e000      	b.n	80034c2 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80034c0:	2302      	movs	r3, #2
  }
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3710      	adds	r7, #16
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
	...

080034cc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b0ba      	sub	sp, #232	@ 0xe8
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	695b      	ldr	r3, [r3, #20]
 80034ee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80034f2:	2300      	movs	r3, #0
 80034f4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80034f8:	2300      	movs	r3, #0
 80034fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80034fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003502:	f003 030f 	and.w	r3, r3, #15
 8003506:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800350a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800350e:	2b00      	cmp	r3, #0
 8003510:	d10f      	bne.n	8003532 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003512:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003516:	f003 0320 	and.w	r3, r3, #32
 800351a:	2b00      	cmp	r3, #0
 800351c:	d009      	beq.n	8003532 <HAL_UART_IRQHandler+0x66>
 800351e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003522:	f003 0320 	and.w	r3, r3, #32
 8003526:	2b00      	cmp	r3, #0
 8003528:	d003      	beq.n	8003532 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f000 fb99 	bl	8003c62 <UART_Receive_IT>
      return;
 8003530:	e25b      	b.n	80039ea <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003532:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003536:	2b00      	cmp	r3, #0
 8003538:	f000 80de 	beq.w	80036f8 <HAL_UART_IRQHandler+0x22c>
 800353c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003540:	f003 0301 	and.w	r3, r3, #1
 8003544:	2b00      	cmp	r3, #0
 8003546:	d106      	bne.n	8003556 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003548:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800354c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003550:	2b00      	cmp	r3, #0
 8003552:	f000 80d1 	beq.w	80036f8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003556:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800355a:	f003 0301 	and.w	r3, r3, #1
 800355e:	2b00      	cmp	r3, #0
 8003560:	d00b      	beq.n	800357a <HAL_UART_IRQHandler+0xae>
 8003562:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003566:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800356a:	2b00      	cmp	r3, #0
 800356c:	d005      	beq.n	800357a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003572:	f043 0201 	orr.w	r2, r3, #1
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800357a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800357e:	f003 0304 	and.w	r3, r3, #4
 8003582:	2b00      	cmp	r3, #0
 8003584:	d00b      	beq.n	800359e <HAL_UART_IRQHandler+0xd2>
 8003586:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800358a:	f003 0301 	and.w	r3, r3, #1
 800358e:	2b00      	cmp	r3, #0
 8003590:	d005      	beq.n	800359e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003596:	f043 0202 	orr.w	r2, r3, #2
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800359e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035a2:	f003 0302 	and.w	r3, r3, #2
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d00b      	beq.n	80035c2 <HAL_UART_IRQHandler+0xf6>
 80035aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80035ae:	f003 0301 	and.w	r3, r3, #1
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d005      	beq.n	80035c2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ba:	f043 0204 	orr.w	r2, r3, #4
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80035c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035c6:	f003 0308 	and.w	r3, r3, #8
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d011      	beq.n	80035f2 <HAL_UART_IRQHandler+0x126>
 80035ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035d2:	f003 0320 	and.w	r3, r3, #32
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d105      	bne.n	80035e6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80035da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80035de:	f003 0301 	and.w	r3, r3, #1
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d005      	beq.n	80035f2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ea:	f043 0208 	orr.w	r2, r3, #8
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	f000 81f2 	beq.w	80039e0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80035fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003600:	f003 0320 	and.w	r3, r3, #32
 8003604:	2b00      	cmp	r3, #0
 8003606:	d008      	beq.n	800361a <HAL_UART_IRQHandler+0x14e>
 8003608:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800360c:	f003 0320 	and.w	r3, r3, #32
 8003610:	2b00      	cmp	r3, #0
 8003612:	d002      	beq.n	800361a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f000 fb24 	bl	8003c62 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	695b      	ldr	r3, [r3, #20]
 8003620:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003624:	2b40      	cmp	r3, #64	@ 0x40
 8003626:	bf0c      	ite	eq
 8003628:	2301      	moveq	r3, #1
 800362a:	2300      	movne	r3, #0
 800362c:	b2db      	uxtb	r3, r3
 800362e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003636:	f003 0308 	and.w	r3, r3, #8
 800363a:	2b00      	cmp	r3, #0
 800363c:	d103      	bne.n	8003646 <HAL_UART_IRQHandler+0x17a>
 800363e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003642:	2b00      	cmp	r3, #0
 8003644:	d04f      	beq.n	80036e6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f000 fa2c 	bl	8003aa4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	695b      	ldr	r3, [r3, #20]
 8003652:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003656:	2b40      	cmp	r3, #64	@ 0x40
 8003658:	d141      	bne.n	80036de <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	3314      	adds	r3, #20
 8003660:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003664:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003668:	e853 3f00 	ldrex	r3, [r3]
 800366c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003670:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003674:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003678:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	3314      	adds	r3, #20
 8003682:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003686:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800368a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800368e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003692:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003696:	e841 2300 	strex	r3, r2, [r1]
 800369a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800369e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d1d9      	bne.n	800365a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d013      	beq.n	80036d6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036b2:	4a7e      	ldr	r2, [pc, #504]	@ (80038ac <HAL_UART_IRQHandler+0x3e0>)
 80036b4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036ba:	4618      	mov	r0, r3
 80036bc:	f7fe fc38 	bl	8001f30 <HAL_DMA_Abort_IT>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d016      	beq.n	80036f4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80036d0:	4610      	mov	r0, r2
 80036d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036d4:	e00e      	b.n	80036f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f000 f994 	bl	8003a04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036dc:	e00a      	b.n	80036f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f000 f990 	bl	8003a04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036e4:	e006      	b.n	80036f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f000 f98c 	bl	8003a04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80036f2:	e175      	b.n	80039e0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036f4:	bf00      	nop
    return;
 80036f6:	e173      	b.n	80039e0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	f040 814f 	bne.w	80039a0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003702:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003706:	f003 0310 	and.w	r3, r3, #16
 800370a:	2b00      	cmp	r3, #0
 800370c:	f000 8148 	beq.w	80039a0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003710:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003714:	f003 0310 	and.w	r3, r3, #16
 8003718:	2b00      	cmp	r3, #0
 800371a:	f000 8141 	beq.w	80039a0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800371e:	2300      	movs	r3, #0
 8003720:	60bb      	str	r3, [r7, #8]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	60bb      	str	r3, [r7, #8]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	60bb      	str	r3, [r7, #8]
 8003732:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	695b      	ldr	r3, [r3, #20]
 800373a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800373e:	2b40      	cmp	r3, #64	@ 0x40
 8003740:	f040 80b6 	bne.w	80038b0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003750:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003754:	2b00      	cmp	r3, #0
 8003756:	f000 8145 	beq.w	80039e4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800375e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003762:	429a      	cmp	r2, r3
 8003764:	f080 813e 	bcs.w	80039e4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800376e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003774:	69db      	ldr	r3, [r3, #28]
 8003776:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800377a:	f000 8088 	beq.w	800388e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	330c      	adds	r3, #12
 8003784:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003788:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800378c:	e853 3f00 	ldrex	r3, [r3]
 8003790:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003794:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003798:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800379c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	330c      	adds	r3, #12
 80037a6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80037aa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80037ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80037b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80037ba:	e841 2300 	strex	r3, r2, [r1]
 80037be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80037c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d1d9      	bne.n	800377e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	3314      	adds	r3, #20
 80037d0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80037d4:	e853 3f00 	ldrex	r3, [r3]
 80037d8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80037da:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80037dc:	f023 0301 	bic.w	r3, r3, #1
 80037e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	3314      	adds	r3, #20
 80037ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80037ee:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80037f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037f4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80037f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80037fa:	e841 2300 	strex	r3, r2, [r1]
 80037fe:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003800:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003802:	2b00      	cmp	r3, #0
 8003804:	d1e1      	bne.n	80037ca <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	3314      	adds	r3, #20
 800380c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800380e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003810:	e853 3f00 	ldrex	r3, [r3]
 8003814:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003816:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003818:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800381c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	3314      	adds	r3, #20
 8003826:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800382a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800382c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800382e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003830:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003832:	e841 2300 	strex	r3, r2, [r1]
 8003836:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003838:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800383a:	2b00      	cmp	r3, #0
 800383c:	d1e3      	bne.n	8003806 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2220      	movs	r2, #32
 8003842:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	330c      	adds	r3, #12
 8003852:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003854:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003856:	e853 3f00 	ldrex	r3, [r3]
 800385a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800385c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800385e:	f023 0310 	bic.w	r3, r3, #16
 8003862:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	330c      	adds	r3, #12
 800386c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003870:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003872:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003874:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003876:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003878:	e841 2300 	strex	r3, r2, [r1]
 800387c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800387e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003880:	2b00      	cmp	r3, #0
 8003882:	d1e3      	bne.n	800384c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003888:	4618      	mov	r0, r3
 800388a:	f7fe fae1 	bl	8001e50 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2202      	movs	r2, #2
 8003892:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800389c:	b29b      	uxth	r3, r3
 800389e:	1ad3      	subs	r3, r2, r3
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	4619      	mov	r1, r3
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f000 f8b7 	bl	8003a18 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80038aa:	e09b      	b.n	80039e4 <HAL_UART_IRQHandler+0x518>
 80038ac:	08003b6b 	.word	0x08003b6b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	f000 808e 	beq.w	80039e8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80038cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	f000 8089 	beq.w	80039e8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	330c      	adds	r3, #12
 80038dc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038e0:	e853 3f00 	ldrex	r3, [r3]
 80038e4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80038e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80038ec:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	330c      	adds	r3, #12
 80038f6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80038fa:	647a      	str	r2, [r7, #68]	@ 0x44
 80038fc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038fe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003900:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003902:	e841 2300 	strex	r3, r2, [r1]
 8003906:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003908:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800390a:	2b00      	cmp	r3, #0
 800390c:	d1e3      	bne.n	80038d6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	3314      	adds	r3, #20
 8003914:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003918:	e853 3f00 	ldrex	r3, [r3]
 800391c:	623b      	str	r3, [r7, #32]
   return(result);
 800391e:	6a3b      	ldr	r3, [r7, #32]
 8003920:	f023 0301 	bic.w	r3, r3, #1
 8003924:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	3314      	adds	r3, #20
 800392e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003932:	633a      	str	r2, [r7, #48]	@ 0x30
 8003934:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003936:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003938:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800393a:	e841 2300 	strex	r3, r2, [r1]
 800393e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003942:	2b00      	cmp	r3, #0
 8003944:	d1e3      	bne.n	800390e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2220      	movs	r2, #32
 800394a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	330c      	adds	r3, #12
 800395a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	e853 3f00 	ldrex	r3, [r3]
 8003962:	60fb      	str	r3, [r7, #12]
   return(result);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f023 0310 	bic.w	r3, r3, #16
 800396a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	330c      	adds	r3, #12
 8003974:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003978:	61fa      	str	r2, [r7, #28]
 800397a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800397c:	69b9      	ldr	r1, [r7, #24]
 800397e:	69fa      	ldr	r2, [r7, #28]
 8003980:	e841 2300 	strex	r3, r2, [r1]
 8003984:	617b      	str	r3, [r7, #20]
   return(result);
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d1e3      	bne.n	8003954 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2202      	movs	r2, #2
 8003990:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003992:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003996:	4619      	mov	r1, r3
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f000 f83d 	bl	8003a18 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800399e:	e023      	b.n	80039e8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80039a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d009      	beq.n	80039c0 <HAL_UART_IRQHandler+0x4f4>
 80039ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d003      	beq.n	80039c0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f000 f8ea 	bl	8003b92 <UART_Transmit_IT>
    return;
 80039be:	e014      	b.n	80039ea <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80039c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d00e      	beq.n	80039ea <HAL_UART_IRQHandler+0x51e>
 80039cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d008      	beq.n	80039ea <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f000 f92a 	bl	8003c32 <UART_EndTransmit_IT>
    return;
 80039de:	e004      	b.n	80039ea <HAL_UART_IRQHandler+0x51e>
    return;
 80039e0:	bf00      	nop
 80039e2:	e002      	b.n	80039ea <HAL_UART_IRQHandler+0x51e>
      return;
 80039e4:	bf00      	nop
 80039e6:	e000      	b.n	80039ea <HAL_UART_IRQHandler+0x51e>
      return;
 80039e8:	bf00      	nop
  }
}
 80039ea:	37e8      	adds	r7, #232	@ 0xe8
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b083      	sub	sp, #12
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80039f8:	bf00      	nop
 80039fa:	370c      	adds	r7, #12
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr

08003a04 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003a0c:	bf00      	nop
 8003a0e:	370c      	adds	r7, #12
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	460b      	mov	r3, r1
 8003a22:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003a24:	bf00      	nop
 8003a26:	370c      	adds	r7, #12
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr

08003a30 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b085      	sub	sp, #20
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	60b9      	str	r1, [r7, #8]
 8003a3a:	4613      	mov	r3, r2
 8003a3c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	68ba      	ldr	r2, [r7, #8]
 8003a42:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	88fa      	ldrh	r2, [r7, #6]
 8003a48:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	88fa      	ldrh	r2, [r7, #6]
 8003a4e:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2200      	movs	r2, #0
 8003a54:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2222      	movs	r2, #34	@ 0x22
 8003a5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	691b      	ldr	r3, [r3, #16]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d007      	beq.n	8003a76 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	68da      	ldr	r2, [r3, #12]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a74:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	695a      	ldr	r2, [r3, #20]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f042 0201 	orr.w	r2, r2, #1
 8003a84:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	68da      	ldr	r2, [r3, #12]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f042 0220 	orr.w	r2, r2, #32
 8003a94:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003a96:	2300      	movs	r3, #0
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3714      	adds	r7, #20
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr

08003aa4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b095      	sub	sp, #84	@ 0x54
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	330c      	adds	r3, #12
 8003ab2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ab4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ab6:	e853 3f00 	ldrex	r3, [r3]
 8003aba:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003abc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003abe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ac2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	330c      	adds	r3, #12
 8003aca:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003acc:	643a      	str	r2, [r7, #64]	@ 0x40
 8003ace:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ad0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003ad2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003ad4:	e841 2300 	strex	r3, r2, [r1]
 8003ad8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003ada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d1e5      	bne.n	8003aac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	3314      	adds	r3, #20
 8003ae6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae8:	6a3b      	ldr	r3, [r7, #32]
 8003aea:	e853 3f00 	ldrex	r3, [r3]
 8003aee:	61fb      	str	r3, [r7, #28]
   return(result);
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	f023 0301 	bic.w	r3, r3, #1
 8003af6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	3314      	adds	r3, #20
 8003afe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003b00:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b02:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b04:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b08:	e841 2300 	strex	r3, r2, [r1]
 8003b0c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d1e5      	bne.n	8003ae0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d119      	bne.n	8003b50 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	330c      	adds	r3, #12
 8003b22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	e853 3f00 	ldrex	r3, [r3]
 8003b2a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	f023 0310 	bic.w	r3, r3, #16
 8003b32:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	330c      	adds	r3, #12
 8003b3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003b3c:	61ba      	str	r2, [r7, #24]
 8003b3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b40:	6979      	ldr	r1, [r7, #20]
 8003b42:	69ba      	ldr	r2, [r7, #24]
 8003b44:	e841 2300 	strex	r3, r2, [r1]
 8003b48:	613b      	str	r3, [r7, #16]
   return(result);
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d1e5      	bne.n	8003b1c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2220      	movs	r2, #32
 8003b54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003b5e:	bf00      	nop
 8003b60:	3754      	adds	r7, #84	@ 0x54
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr

08003b6a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b6a:	b580      	push	{r7, lr}
 8003b6c:	b084      	sub	sp, #16
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b76:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2200      	movs	r2, #0
 8003b82:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b84:	68f8      	ldr	r0, [r7, #12]
 8003b86:	f7ff ff3d 	bl	8003a04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b8a:	bf00      	nop
 8003b8c:	3710      	adds	r7, #16
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}

08003b92 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003b92:	b480      	push	{r7}
 8003b94:	b085      	sub	sp, #20
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	2b21      	cmp	r3, #33	@ 0x21
 8003ba4:	d13e      	bne.n	8003c24 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bae:	d114      	bne.n	8003bda <UART_Transmit_IT+0x48>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	691b      	ldr	r3, [r3, #16]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d110      	bne.n	8003bda <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6a1b      	ldr	r3, [r3, #32]
 8003bbc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	881b      	ldrh	r3, [r3, #0]
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bcc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6a1b      	ldr	r3, [r3, #32]
 8003bd2:	1c9a      	adds	r2, r3, #2
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	621a      	str	r2, [r3, #32]
 8003bd8:	e008      	b.n	8003bec <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a1b      	ldr	r3, [r3, #32]
 8003bde:	1c59      	adds	r1, r3, #1
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	6211      	str	r1, [r2, #32]
 8003be4:	781a      	ldrb	r2, [r3, #0]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	3b01      	subs	r3, #1
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	4619      	mov	r1, r3
 8003bfa:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d10f      	bne.n	8003c20 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	68da      	ldr	r2, [r3, #12]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003c0e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	68da      	ldr	r2, [r3, #12]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003c1e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003c20:	2300      	movs	r3, #0
 8003c22:	e000      	b.n	8003c26 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003c24:	2302      	movs	r3, #2
  }
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3714      	adds	r7, #20
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr

08003c32 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003c32:	b580      	push	{r7, lr}
 8003c34:	b082      	sub	sp, #8
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	68da      	ldr	r2, [r3, #12]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c48:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2220      	movs	r2, #32
 8003c4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f7ff fecc 	bl	80039f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3708      	adds	r7, #8
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}

08003c62 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003c62:	b580      	push	{r7, lr}
 8003c64:	b08c      	sub	sp, #48	@ 0x30
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	2b22      	cmp	r3, #34	@ 0x22
 8003c74:	f040 80ae 	bne.w	8003dd4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c80:	d117      	bne.n	8003cb2 <UART_Receive_IT+0x50>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	691b      	ldr	r3, [r3, #16]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d113      	bne.n	8003cb2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c92:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ca0:	b29a      	uxth	r2, r3
 8003ca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ca4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003caa:	1c9a      	adds	r2, r3, #2
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	629a      	str	r2, [r3, #40]	@ 0x28
 8003cb0:	e026      	b.n	8003d00 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cc4:	d007      	beq.n	8003cd6 <UART_Receive_IT+0x74>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d10a      	bne.n	8003ce4 <UART_Receive_IT+0x82>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d106      	bne.n	8003ce4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	b2da      	uxtb	r2, r3
 8003cde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ce0:	701a      	strb	r2, [r3, #0]
 8003ce2:	e008      	b.n	8003cf6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003cf0:	b2da      	uxtb	r2, r3
 8003cf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cf4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cfa:	1c5a      	adds	r2, r3, #1
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	3b01      	subs	r3, #1
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	4619      	mov	r1, r3
 8003d0e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d15d      	bne.n	8003dd0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	68da      	ldr	r2, [r3, #12]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f022 0220 	bic.w	r2, r2, #32
 8003d22:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	68da      	ldr	r2, [r3, #12]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003d32:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	695a      	ldr	r2, [r3, #20]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f022 0201 	bic.w	r2, r2, #1
 8003d42:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2220      	movs	r2, #32
 8003d48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d135      	bne.n	8003dc6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	330c      	adds	r3, #12
 8003d66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	e853 3f00 	ldrex	r3, [r3]
 8003d6e:	613b      	str	r3, [r7, #16]
   return(result);
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	f023 0310 	bic.w	r3, r3, #16
 8003d76:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	330c      	adds	r3, #12
 8003d7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d80:	623a      	str	r2, [r7, #32]
 8003d82:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d84:	69f9      	ldr	r1, [r7, #28]
 8003d86:	6a3a      	ldr	r2, [r7, #32]
 8003d88:	e841 2300 	strex	r3, r2, [r1]
 8003d8c:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d8e:	69bb      	ldr	r3, [r7, #24]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d1e5      	bne.n	8003d60 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0310 	and.w	r3, r3, #16
 8003d9e:	2b10      	cmp	r3, #16
 8003da0:	d10a      	bne.n	8003db8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003da2:	2300      	movs	r3, #0
 8003da4:	60fb      	str	r3, [r7, #12]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	60fb      	str	r3, [r7, #12]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	60fb      	str	r3, [r7, #12]
 8003db6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003dbc:	4619      	mov	r1, r3
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f7ff fe2a 	bl	8003a18 <HAL_UARTEx_RxEventCallback>
 8003dc4:	e002      	b.n	8003dcc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f7fc fe64 	bl	8000a94 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	e002      	b.n	8003dd6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	e000      	b.n	8003dd6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003dd4:	2302      	movs	r3, #2
  }
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3730      	adds	r7, #48	@ 0x30
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
	...

08003de0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003de0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003de4:	b0c0      	sub	sp, #256	@ 0x100
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	691b      	ldr	r3, [r3, #16]
 8003df4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dfc:	68d9      	ldr	r1, [r3, #12]
 8003dfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	ea40 0301 	orr.w	r3, r0, r1
 8003e08:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003e0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e0e:	689a      	ldr	r2, [r3, #8]
 8003e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e14:	691b      	ldr	r3, [r3, #16]
 8003e16:	431a      	orrs	r2, r3
 8003e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e1c:	695b      	ldr	r3, [r3, #20]
 8003e1e:	431a      	orrs	r2, r3
 8003e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e24:	69db      	ldr	r3, [r3, #28]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003e38:	f021 010c 	bic.w	r1, r1, #12
 8003e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003e46:	430b      	orrs	r3, r1
 8003e48:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	695b      	ldr	r3, [r3, #20]
 8003e52:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003e56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e5a:	6999      	ldr	r1, [r3, #24]
 8003e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	ea40 0301 	orr.w	r3, r0, r1
 8003e66:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	4b8f      	ldr	r3, [pc, #572]	@ (80040ac <UART_SetConfig+0x2cc>)
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d005      	beq.n	8003e80 <UART_SetConfig+0xa0>
 8003e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	4b8d      	ldr	r3, [pc, #564]	@ (80040b0 <UART_SetConfig+0x2d0>)
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d104      	bne.n	8003e8a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e80:	f7fe fd96 	bl	80029b0 <HAL_RCC_GetPCLK2Freq>
 8003e84:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003e88:	e003      	b.n	8003e92 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e8a:	f7fe fd7d 	bl	8002988 <HAL_RCC_GetPCLK1Freq>
 8003e8e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e96:	69db      	ldr	r3, [r3, #28]
 8003e98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e9c:	f040 810c 	bne.w	80040b8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ea0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003eaa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003eae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003eb2:	4622      	mov	r2, r4
 8003eb4:	462b      	mov	r3, r5
 8003eb6:	1891      	adds	r1, r2, r2
 8003eb8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003eba:	415b      	adcs	r3, r3
 8003ebc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003ebe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003ec2:	4621      	mov	r1, r4
 8003ec4:	eb12 0801 	adds.w	r8, r2, r1
 8003ec8:	4629      	mov	r1, r5
 8003eca:	eb43 0901 	adc.w	r9, r3, r1
 8003ece:	f04f 0200 	mov.w	r2, #0
 8003ed2:	f04f 0300 	mov.w	r3, #0
 8003ed6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003eda:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ede:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ee2:	4690      	mov	r8, r2
 8003ee4:	4699      	mov	r9, r3
 8003ee6:	4623      	mov	r3, r4
 8003ee8:	eb18 0303 	adds.w	r3, r8, r3
 8003eec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003ef0:	462b      	mov	r3, r5
 8003ef2:	eb49 0303 	adc.w	r3, r9, r3
 8003ef6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003efa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	2200      	movs	r2, #0
 8003f02:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003f06:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003f0a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003f0e:	460b      	mov	r3, r1
 8003f10:	18db      	adds	r3, r3, r3
 8003f12:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f14:	4613      	mov	r3, r2
 8003f16:	eb42 0303 	adc.w	r3, r2, r3
 8003f1a:	657b      	str	r3, [r7, #84]	@ 0x54
 8003f1c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003f20:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003f24:	f7fc f9cc 	bl	80002c0 <__aeabi_uldivmod>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	460b      	mov	r3, r1
 8003f2c:	4b61      	ldr	r3, [pc, #388]	@ (80040b4 <UART_SetConfig+0x2d4>)
 8003f2e:	fba3 2302 	umull	r2, r3, r3, r2
 8003f32:	095b      	lsrs	r3, r3, #5
 8003f34:	011c      	lsls	r4, r3, #4
 8003f36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003f40:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003f44:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003f48:	4642      	mov	r2, r8
 8003f4a:	464b      	mov	r3, r9
 8003f4c:	1891      	adds	r1, r2, r2
 8003f4e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003f50:	415b      	adcs	r3, r3
 8003f52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f54:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003f58:	4641      	mov	r1, r8
 8003f5a:	eb12 0a01 	adds.w	sl, r2, r1
 8003f5e:	4649      	mov	r1, r9
 8003f60:	eb43 0b01 	adc.w	fp, r3, r1
 8003f64:	f04f 0200 	mov.w	r2, #0
 8003f68:	f04f 0300 	mov.w	r3, #0
 8003f6c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003f70:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003f74:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f78:	4692      	mov	sl, r2
 8003f7a:	469b      	mov	fp, r3
 8003f7c:	4643      	mov	r3, r8
 8003f7e:	eb1a 0303 	adds.w	r3, sl, r3
 8003f82:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003f86:	464b      	mov	r3, r9
 8003f88:	eb4b 0303 	adc.w	r3, fp, r3
 8003f8c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	2200      	movs	r2, #0
 8003f98:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003f9c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003fa0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003fa4:	460b      	mov	r3, r1
 8003fa6:	18db      	adds	r3, r3, r3
 8003fa8:	643b      	str	r3, [r7, #64]	@ 0x40
 8003faa:	4613      	mov	r3, r2
 8003fac:	eb42 0303 	adc.w	r3, r2, r3
 8003fb0:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fb2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003fb6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003fba:	f7fc f981 	bl	80002c0 <__aeabi_uldivmod>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	460b      	mov	r3, r1
 8003fc2:	4611      	mov	r1, r2
 8003fc4:	4b3b      	ldr	r3, [pc, #236]	@ (80040b4 <UART_SetConfig+0x2d4>)
 8003fc6:	fba3 2301 	umull	r2, r3, r3, r1
 8003fca:	095b      	lsrs	r3, r3, #5
 8003fcc:	2264      	movs	r2, #100	@ 0x64
 8003fce:	fb02 f303 	mul.w	r3, r2, r3
 8003fd2:	1acb      	subs	r3, r1, r3
 8003fd4:	00db      	lsls	r3, r3, #3
 8003fd6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003fda:	4b36      	ldr	r3, [pc, #216]	@ (80040b4 <UART_SetConfig+0x2d4>)
 8003fdc:	fba3 2302 	umull	r2, r3, r3, r2
 8003fe0:	095b      	lsrs	r3, r3, #5
 8003fe2:	005b      	lsls	r3, r3, #1
 8003fe4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003fe8:	441c      	add	r4, r3
 8003fea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003ff4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003ff8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003ffc:	4642      	mov	r2, r8
 8003ffe:	464b      	mov	r3, r9
 8004000:	1891      	adds	r1, r2, r2
 8004002:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004004:	415b      	adcs	r3, r3
 8004006:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004008:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800400c:	4641      	mov	r1, r8
 800400e:	1851      	adds	r1, r2, r1
 8004010:	6339      	str	r1, [r7, #48]	@ 0x30
 8004012:	4649      	mov	r1, r9
 8004014:	414b      	adcs	r3, r1
 8004016:	637b      	str	r3, [r7, #52]	@ 0x34
 8004018:	f04f 0200 	mov.w	r2, #0
 800401c:	f04f 0300 	mov.w	r3, #0
 8004020:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004024:	4659      	mov	r1, fp
 8004026:	00cb      	lsls	r3, r1, #3
 8004028:	4651      	mov	r1, sl
 800402a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800402e:	4651      	mov	r1, sl
 8004030:	00ca      	lsls	r2, r1, #3
 8004032:	4610      	mov	r0, r2
 8004034:	4619      	mov	r1, r3
 8004036:	4603      	mov	r3, r0
 8004038:	4642      	mov	r2, r8
 800403a:	189b      	adds	r3, r3, r2
 800403c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004040:	464b      	mov	r3, r9
 8004042:	460a      	mov	r2, r1
 8004044:	eb42 0303 	adc.w	r3, r2, r3
 8004048:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800404c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	2200      	movs	r2, #0
 8004054:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004058:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800405c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004060:	460b      	mov	r3, r1
 8004062:	18db      	adds	r3, r3, r3
 8004064:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004066:	4613      	mov	r3, r2
 8004068:	eb42 0303 	adc.w	r3, r2, r3
 800406c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800406e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004072:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004076:	f7fc f923 	bl	80002c0 <__aeabi_uldivmod>
 800407a:	4602      	mov	r2, r0
 800407c:	460b      	mov	r3, r1
 800407e:	4b0d      	ldr	r3, [pc, #52]	@ (80040b4 <UART_SetConfig+0x2d4>)
 8004080:	fba3 1302 	umull	r1, r3, r3, r2
 8004084:	095b      	lsrs	r3, r3, #5
 8004086:	2164      	movs	r1, #100	@ 0x64
 8004088:	fb01 f303 	mul.w	r3, r1, r3
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	00db      	lsls	r3, r3, #3
 8004090:	3332      	adds	r3, #50	@ 0x32
 8004092:	4a08      	ldr	r2, [pc, #32]	@ (80040b4 <UART_SetConfig+0x2d4>)
 8004094:	fba2 2303 	umull	r2, r3, r2, r3
 8004098:	095b      	lsrs	r3, r3, #5
 800409a:	f003 0207 	and.w	r2, r3, #7
 800409e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4422      	add	r2, r4
 80040a6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80040a8:	e106      	b.n	80042b8 <UART_SetConfig+0x4d8>
 80040aa:	bf00      	nop
 80040ac:	40011000 	.word	0x40011000
 80040b0:	40011400 	.word	0x40011400
 80040b4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80040b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040bc:	2200      	movs	r2, #0
 80040be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80040c2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80040c6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80040ca:	4642      	mov	r2, r8
 80040cc:	464b      	mov	r3, r9
 80040ce:	1891      	adds	r1, r2, r2
 80040d0:	6239      	str	r1, [r7, #32]
 80040d2:	415b      	adcs	r3, r3
 80040d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80040d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80040da:	4641      	mov	r1, r8
 80040dc:	1854      	adds	r4, r2, r1
 80040de:	4649      	mov	r1, r9
 80040e0:	eb43 0501 	adc.w	r5, r3, r1
 80040e4:	f04f 0200 	mov.w	r2, #0
 80040e8:	f04f 0300 	mov.w	r3, #0
 80040ec:	00eb      	lsls	r3, r5, #3
 80040ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040f2:	00e2      	lsls	r2, r4, #3
 80040f4:	4614      	mov	r4, r2
 80040f6:	461d      	mov	r5, r3
 80040f8:	4643      	mov	r3, r8
 80040fa:	18e3      	adds	r3, r4, r3
 80040fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004100:	464b      	mov	r3, r9
 8004102:	eb45 0303 	adc.w	r3, r5, r3
 8004106:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800410a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004116:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800411a:	f04f 0200 	mov.w	r2, #0
 800411e:	f04f 0300 	mov.w	r3, #0
 8004122:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004126:	4629      	mov	r1, r5
 8004128:	008b      	lsls	r3, r1, #2
 800412a:	4621      	mov	r1, r4
 800412c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004130:	4621      	mov	r1, r4
 8004132:	008a      	lsls	r2, r1, #2
 8004134:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004138:	f7fc f8c2 	bl	80002c0 <__aeabi_uldivmod>
 800413c:	4602      	mov	r2, r0
 800413e:	460b      	mov	r3, r1
 8004140:	4b60      	ldr	r3, [pc, #384]	@ (80042c4 <UART_SetConfig+0x4e4>)
 8004142:	fba3 2302 	umull	r2, r3, r3, r2
 8004146:	095b      	lsrs	r3, r3, #5
 8004148:	011c      	lsls	r4, r3, #4
 800414a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800414e:	2200      	movs	r2, #0
 8004150:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004154:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004158:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800415c:	4642      	mov	r2, r8
 800415e:	464b      	mov	r3, r9
 8004160:	1891      	adds	r1, r2, r2
 8004162:	61b9      	str	r1, [r7, #24]
 8004164:	415b      	adcs	r3, r3
 8004166:	61fb      	str	r3, [r7, #28]
 8004168:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800416c:	4641      	mov	r1, r8
 800416e:	1851      	adds	r1, r2, r1
 8004170:	6139      	str	r1, [r7, #16]
 8004172:	4649      	mov	r1, r9
 8004174:	414b      	adcs	r3, r1
 8004176:	617b      	str	r3, [r7, #20]
 8004178:	f04f 0200 	mov.w	r2, #0
 800417c:	f04f 0300 	mov.w	r3, #0
 8004180:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004184:	4659      	mov	r1, fp
 8004186:	00cb      	lsls	r3, r1, #3
 8004188:	4651      	mov	r1, sl
 800418a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800418e:	4651      	mov	r1, sl
 8004190:	00ca      	lsls	r2, r1, #3
 8004192:	4610      	mov	r0, r2
 8004194:	4619      	mov	r1, r3
 8004196:	4603      	mov	r3, r0
 8004198:	4642      	mov	r2, r8
 800419a:	189b      	adds	r3, r3, r2
 800419c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80041a0:	464b      	mov	r3, r9
 80041a2:	460a      	mov	r2, r1
 80041a4:	eb42 0303 	adc.w	r3, r2, r3
 80041a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80041ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	2200      	movs	r2, #0
 80041b4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80041b6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80041b8:	f04f 0200 	mov.w	r2, #0
 80041bc:	f04f 0300 	mov.w	r3, #0
 80041c0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80041c4:	4649      	mov	r1, r9
 80041c6:	008b      	lsls	r3, r1, #2
 80041c8:	4641      	mov	r1, r8
 80041ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041ce:	4641      	mov	r1, r8
 80041d0:	008a      	lsls	r2, r1, #2
 80041d2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80041d6:	f7fc f873 	bl	80002c0 <__aeabi_uldivmod>
 80041da:	4602      	mov	r2, r0
 80041dc:	460b      	mov	r3, r1
 80041de:	4611      	mov	r1, r2
 80041e0:	4b38      	ldr	r3, [pc, #224]	@ (80042c4 <UART_SetConfig+0x4e4>)
 80041e2:	fba3 2301 	umull	r2, r3, r3, r1
 80041e6:	095b      	lsrs	r3, r3, #5
 80041e8:	2264      	movs	r2, #100	@ 0x64
 80041ea:	fb02 f303 	mul.w	r3, r2, r3
 80041ee:	1acb      	subs	r3, r1, r3
 80041f0:	011b      	lsls	r3, r3, #4
 80041f2:	3332      	adds	r3, #50	@ 0x32
 80041f4:	4a33      	ldr	r2, [pc, #204]	@ (80042c4 <UART_SetConfig+0x4e4>)
 80041f6:	fba2 2303 	umull	r2, r3, r2, r3
 80041fa:	095b      	lsrs	r3, r3, #5
 80041fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004200:	441c      	add	r4, r3
 8004202:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004206:	2200      	movs	r2, #0
 8004208:	673b      	str	r3, [r7, #112]	@ 0x70
 800420a:	677a      	str	r2, [r7, #116]	@ 0x74
 800420c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004210:	4642      	mov	r2, r8
 8004212:	464b      	mov	r3, r9
 8004214:	1891      	adds	r1, r2, r2
 8004216:	60b9      	str	r1, [r7, #8]
 8004218:	415b      	adcs	r3, r3
 800421a:	60fb      	str	r3, [r7, #12]
 800421c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004220:	4641      	mov	r1, r8
 8004222:	1851      	adds	r1, r2, r1
 8004224:	6039      	str	r1, [r7, #0]
 8004226:	4649      	mov	r1, r9
 8004228:	414b      	adcs	r3, r1
 800422a:	607b      	str	r3, [r7, #4]
 800422c:	f04f 0200 	mov.w	r2, #0
 8004230:	f04f 0300 	mov.w	r3, #0
 8004234:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004238:	4659      	mov	r1, fp
 800423a:	00cb      	lsls	r3, r1, #3
 800423c:	4651      	mov	r1, sl
 800423e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004242:	4651      	mov	r1, sl
 8004244:	00ca      	lsls	r2, r1, #3
 8004246:	4610      	mov	r0, r2
 8004248:	4619      	mov	r1, r3
 800424a:	4603      	mov	r3, r0
 800424c:	4642      	mov	r2, r8
 800424e:	189b      	adds	r3, r3, r2
 8004250:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004252:	464b      	mov	r3, r9
 8004254:	460a      	mov	r2, r1
 8004256:	eb42 0303 	adc.w	r3, r2, r3
 800425a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800425c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	663b      	str	r3, [r7, #96]	@ 0x60
 8004266:	667a      	str	r2, [r7, #100]	@ 0x64
 8004268:	f04f 0200 	mov.w	r2, #0
 800426c:	f04f 0300 	mov.w	r3, #0
 8004270:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004274:	4649      	mov	r1, r9
 8004276:	008b      	lsls	r3, r1, #2
 8004278:	4641      	mov	r1, r8
 800427a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800427e:	4641      	mov	r1, r8
 8004280:	008a      	lsls	r2, r1, #2
 8004282:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004286:	f7fc f81b 	bl	80002c0 <__aeabi_uldivmod>
 800428a:	4602      	mov	r2, r0
 800428c:	460b      	mov	r3, r1
 800428e:	4b0d      	ldr	r3, [pc, #52]	@ (80042c4 <UART_SetConfig+0x4e4>)
 8004290:	fba3 1302 	umull	r1, r3, r3, r2
 8004294:	095b      	lsrs	r3, r3, #5
 8004296:	2164      	movs	r1, #100	@ 0x64
 8004298:	fb01 f303 	mul.w	r3, r1, r3
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	011b      	lsls	r3, r3, #4
 80042a0:	3332      	adds	r3, #50	@ 0x32
 80042a2:	4a08      	ldr	r2, [pc, #32]	@ (80042c4 <UART_SetConfig+0x4e4>)
 80042a4:	fba2 2303 	umull	r2, r3, r2, r3
 80042a8:	095b      	lsrs	r3, r3, #5
 80042aa:	f003 020f 	and.w	r2, r3, #15
 80042ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4422      	add	r2, r4
 80042b6:	609a      	str	r2, [r3, #8]
}
 80042b8:	bf00      	nop
 80042ba:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80042be:	46bd      	mov	sp, r7
 80042c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042c4:	51eb851f 	.word	0x51eb851f

080042c8 <siprintf>:
 80042c8:	b40e      	push	{r1, r2, r3}
 80042ca:	b510      	push	{r4, lr}
 80042cc:	b09d      	sub	sp, #116	@ 0x74
 80042ce:	ab1f      	add	r3, sp, #124	@ 0x7c
 80042d0:	9002      	str	r0, [sp, #8]
 80042d2:	9006      	str	r0, [sp, #24]
 80042d4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80042d8:	480a      	ldr	r0, [pc, #40]	@ (8004304 <siprintf+0x3c>)
 80042da:	9107      	str	r1, [sp, #28]
 80042dc:	9104      	str	r1, [sp, #16]
 80042de:	490a      	ldr	r1, [pc, #40]	@ (8004308 <siprintf+0x40>)
 80042e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80042e4:	9105      	str	r1, [sp, #20]
 80042e6:	2400      	movs	r4, #0
 80042e8:	a902      	add	r1, sp, #8
 80042ea:	6800      	ldr	r0, [r0, #0]
 80042ec:	9301      	str	r3, [sp, #4]
 80042ee:	941b      	str	r4, [sp, #108]	@ 0x6c
 80042f0:	f000 f994 	bl	800461c <_svfiprintf_r>
 80042f4:	9b02      	ldr	r3, [sp, #8]
 80042f6:	701c      	strb	r4, [r3, #0]
 80042f8:	b01d      	add	sp, #116	@ 0x74
 80042fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80042fe:	b003      	add	sp, #12
 8004300:	4770      	bx	lr
 8004302:	bf00      	nop
 8004304:	2000000c 	.word	0x2000000c
 8004308:	ffff0208 	.word	0xffff0208

0800430c <memset>:
 800430c:	4402      	add	r2, r0
 800430e:	4603      	mov	r3, r0
 8004310:	4293      	cmp	r3, r2
 8004312:	d100      	bne.n	8004316 <memset+0xa>
 8004314:	4770      	bx	lr
 8004316:	f803 1b01 	strb.w	r1, [r3], #1
 800431a:	e7f9      	b.n	8004310 <memset+0x4>

0800431c <__errno>:
 800431c:	4b01      	ldr	r3, [pc, #4]	@ (8004324 <__errno+0x8>)
 800431e:	6818      	ldr	r0, [r3, #0]
 8004320:	4770      	bx	lr
 8004322:	bf00      	nop
 8004324:	2000000c 	.word	0x2000000c

08004328 <__libc_init_array>:
 8004328:	b570      	push	{r4, r5, r6, lr}
 800432a:	4d0d      	ldr	r5, [pc, #52]	@ (8004360 <__libc_init_array+0x38>)
 800432c:	4c0d      	ldr	r4, [pc, #52]	@ (8004364 <__libc_init_array+0x3c>)
 800432e:	1b64      	subs	r4, r4, r5
 8004330:	10a4      	asrs	r4, r4, #2
 8004332:	2600      	movs	r6, #0
 8004334:	42a6      	cmp	r6, r4
 8004336:	d109      	bne.n	800434c <__libc_init_array+0x24>
 8004338:	4d0b      	ldr	r5, [pc, #44]	@ (8004368 <__libc_init_array+0x40>)
 800433a:	4c0c      	ldr	r4, [pc, #48]	@ (800436c <__libc_init_array+0x44>)
 800433c:	f000 fc64 	bl	8004c08 <_init>
 8004340:	1b64      	subs	r4, r4, r5
 8004342:	10a4      	asrs	r4, r4, #2
 8004344:	2600      	movs	r6, #0
 8004346:	42a6      	cmp	r6, r4
 8004348:	d105      	bne.n	8004356 <__libc_init_array+0x2e>
 800434a:	bd70      	pop	{r4, r5, r6, pc}
 800434c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004350:	4798      	blx	r3
 8004352:	3601      	adds	r6, #1
 8004354:	e7ee      	b.n	8004334 <__libc_init_array+0xc>
 8004356:	f855 3b04 	ldr.w	r3, [r5], #4
 800435a:	4798      	blx	r3
 800435c:	3601      	adds	r6, #1
 800435e:	e7f2      	b.n	8004346 <__libc_init_array+0x1e>
 8004360:	08004d7c 	.word	0x08004d7c
 8004364:	08004d7c 	.word	0x08004d7c
 8004368:	08004d7c 	.word	0x08004d7c
 800436c:	08004d80 	.word	0x08004d80

08004370 <__retarget_lock_acquire_recursive>:
 8004370:	4770      	bx	lr

08004372 <__retarget_lock_release_recursive>:
 8004372:	4770      	bx	lr

08004374 <_free_r>:
 8004374:	b538      	push	{r3, r4, r5, lr}
 8004376:	4605      	mov	r5, r0
 8004378:	2900      	cmp	r1, #0
 800437a:	d041      	beq.n	8004400 <_free_r+0x8c>
 800437c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004380:	1f0c      	subs	r4, r1, #4
 8004382:	2b00      	cmp	r3, #0
 8004384:	bfb8      	it	lt
 8004386:	18e4      	addlt	r4, r4, r3
 8004388:	f000 f8e0 	bl	800454c <__malloc_lock>
 800438c:	4a1d      	ldr	r2, [pc, #116]	@ (8004404 <_free_r+0x90>)
 800438e:	6813      	ldr	r3, [r2, #0]
 8004390:	b933      	cbnz	r3, 80043a0 <_free_r+0x2c>
 8004392:	6063      	str	r3, [r4, #4]
 8004394:	6014      	str	r4, [r2, #0]
 8004396:	4628      	mov	r0, r5
 8004398:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800439c:	f000 b8dc 	b.w	8004558 <__malloc_unlock>
 80043a0:	42a3      	cmp	r3, r4
 80043a2:	d908      	bls.n	80043b6 <_free_r+0x42>
 80043a4:	6820      	ldr	r0, [r4, #0]
 80043a6:	1821      	adds	r1, r4, r0
 80043a8:	428b      	cmp	r3, r1
 80043aa:	bf01      	itttt	eq
 80043ac:	6819      	ldreq	r1, [r3, #0]
 80043ae:	685b      	ldreq	r3, [r3, #4]
 80043b0:	1809      	addeq	r1, r1, r0
 80043b2:	6021      	streq	r1, [r4, #0]
 80043b4:	e7ed      	b.n	8004392 <_free_r+0x1e>
 80043b6:	461a      	mov	r2, r3
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	b10b      	cbz	r3, 80043c0 <_free_r+0x4c>
 80043bc:	42a3      	cmp	r3, r4
 80043be:	d9fa      	bls.n	80043b6 <_free_r+0x42>
 80043c0:	6811      	ldr	r1, [r2, #0]
 80043c2:	1850      	adds	r0, r2, r1
 80043c4:	42a0      	cmp	r0, r4
 80043c6:	d10b      	bne.n	80043e0 <_free_r+0x6c>
 80043c8:	6820      	ldr	r0, [r4, #0]
 80043ca:	4401      	add	r1, r0
 80043cc:	1850      	adds	r0, r2, r1
 80043ce:	4283      	cmp	r3, r0
 80043d0:	6011      	str	r1, [r2, #0]
 80043d2:	d1e0      	bne.n	8004396 <_free_r+0x22>
 80043d4:	6818      	ldr	r0, [r3, #0]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	6053      	str	r3, [r2, #4]
 80043da:	4408      	add	r0, r1
 80043dc:	6010      	str	r0, [r2, #0]
 80043de:	e7da      	b.n	8004396 <_free_r+0x22>
 80043e0:	d902      	bls.n	80043e8 <_free_r+0x74>
 80043e2:	230c      	movs	r3, #12
 80043e4:	602b      	str	r3, [r5, #0]
 80043e6:	e7d6      	b.n	8004396 <_free_r+0x22>
 80043e8:	6820      	ldr	r0, [r4, #0]
 80043ea:	1821      	adds	r1, r4, r0
 80043ec:	428b      	cmp	r3, r1
 80043ee:	bf04      	itt	eq
 80043f0:	6819      	ldreq	r1, [r3, #0]
 80043f2:	685b      	ldreq	r3, [r3, #4]
 80043f4:	6063      	str	r3, [r4, #4]
 80043f6:	bf04      	itt	eq
 80043f8:	1809      	addeq	r1, r1, r0
 80043fa:	6021      	streq	r1, [r4, #0]
 80043fc:	6054      	str	r4, [r2, #4]
 80043fe:	e7ca      	b.n	8004396 <_free_r+0x22>
 8004400:	bd38      	pop	{r3, r4, r5, pc}
 8004402:	bf00      	nop
 8004404:	20000404 	.word	0x20000404

08004408 <sbrk_aligned>:
 8004408:	b570      	push	{r4, r5, r6, lr}
 800440a:	4e0f      	ldr	r6, [pc, #60]	@ (8004448 <sbrk_aligned+0x40>)
 800440c:	460c      	mov	r4, r1
 800440e:	6831      	ldr	r1, [r6, #0]
 8004410:	4605      	mov	r5, r0
 8004412:	b911      	cbnz	r1, 800441a <sbrk_aligned+0x12>
 8004414:	f000 fba4 	bl	8004b60 <_sbrk_r>
 8004418:	6030      	str	r0, [r6, #0]
 800441a:	4621      	mov	r1, r4
 800441c:	4628      	mov	r0, r5
 800441e:	f000 fb9f 	bl	8004b60 <_sbrk_r>
 8004422:	1c43      	adds	r3, r0, #1
 8004424:	d103      	bne.n	800442e <sbrk_aligned+0x26>
 8004426:	f04f 34ff 	mov.w	r4, #4294967295
 800442a:	4620      	mov	r0, r4
 800442c:	bd70      	pop	{r4, r5, r6, pc}
 800442e:	1cc4      	adds	r4, r0, #3
 8004430:	f024 0403 	bic.w	r4, r4, #3
 8004434:	42a0      	cmp	r0, r4
 8004436:	d0f8      	beq.n	800442a <sbrk_aligned+0x22>
 8004438:	1a21      	subs	r1, r4, r0
 800443a:	4628      	mov	r0, r5
 800443c:	f000 fb90 	bl	8004b60 <_sbrk_r>
 8004440:	3001      	adds	r0, #1
 8004442:	d1f2      	bne.n	800442a <sbrk_aligned+0x22>
 8004444:	e7ef      	b.n	8004426 <sbrk_aligned+0x1e>
 8004446:	bf00      	nop
 8004448:	20000400 	.word	0x20000400

0800444c <_malloc_r>:
 800444c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004450:	1ccd      	adds	r5, r1, #3
 8004452:	f025 0503 	bic.w	r5, r5, #3
 8004456:	3508      	adds	r5, #8
 8004458:	2d0c      	cmp	r5, #12
 800445a:	bf38      	it	cc
 800445c:	250c      	movcc	r5, #12
 800445e:	2d00      	cmp	r5, #0
 8004460:	4606      	mov	r6, r0
 8004462:	db01      	blt.n	8004468 <_malloc_r+0x1c>
 8004464:	42a9      	cmp	r1, r5
 8004466:	d904      	bls.n	8004472 <_malloc_r+0x26>
 8004468:	230c      	movs	r3, #12
 800446a:	6033      	str	r3, [r6, #0]
 800446c:	2000      	movs	r0, #0
 800446e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004472:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004548 <_malloc_r+0xfc>
 8004476:	f000 f869 	bl	800454c <__malloc_lock>
 800447a:	f8d8 3000 	ldr.w	r3, [r8]
 800447e:	461c      	mov	r4, r3
 8004480:	bb44      	cbnz	r4, 80044d4 <_malloc_r+0x88>
 8004482:	4629      	mov	r1, r5
 8004484:	4630      	mov	r0, r6
 8004486:	f7ff ffbf 	bl	8004408 <sbrk_aligned>
 800448a:	1c43      	adds	r3, r0, #1
 800448c:	4604      	mov	r4, r0
 800448e:	d158      	bne.n	8004542 <_malloc_r+0xf6>
 8004490:	f8d8 4000 	ldr.w	r4, [r8]
 8004494:	4627      	mov	r7, r4
 8004496:	2f00      	cmp	r7, #0
 8004498:	d143      	bne.n	8004522 <_malloc_r+0xd6>
 800449a:	2c00      	cmp	r4, #0
 800449c:	d04b      	beq.n	8004536 <_malloc_r+0xea>
 800449e:	6823      	ldr	r3, [r4, #0]
 80044a0:	4639      	mov	r1, r7
 80044a2:	4630      	mov	r0, r6
 80044a4:	eb04 0903 	add.w	r9, r4, r3
 80044a8:	f000 fb5a 	bl	8004b60 <_sbrk_r>
 80044ac:	4581      	cmp	r9, r0
 80044ae:	d142      	bne.n	8004536 <_malloc_r+0xea>
 80044b0:	6821      	ldr	r1, [r4, #0]
 80044b2:	1a6d      	subs	r5, r5, r1
 80044b4:	4629      	mov	r1, r5
 80044b6:	4630      	mov	r0, r6
 80044b8:	f7ff ffa6 	bl	8004408 <sbrk_aligned>
 80044bc:	3001      	adds	r0, #1
 80044be:	d03a      	beq.n	8004536 <_malloc_r+0xea>
 80044c0:	6823      	ldr	r3, [r4, #0]
 80044c2:	442b      	add	r3, r5
 80044c4:	6023      	str	r3, [r4, #0]
 80044c6:	f8d8 3000 	ldr.w	r3, [r8]
 80044ca:	685a      	ldr	r2, [r3, #4]
 80044cc:	bb62      	cbnz	r2, 8004528 <_malloc_r+0xdc>
 80044ce:	f8c8 7000 	str.w	r7, [r8]
 80044d2:	e00f      	b.n	80044f4 <_malloc_r+0xa8>
 80044d4:	6822      	ldr	r2, [r4, #0]
 80044d6:	1b52      	subs	r2, r2, r5
 80044d8:	d420      	bmi.n	800451c <_malloc_r+0xd0>
 80044da:	2a0b      	cmp	r2, #11
 80044dc:	d917      	bls.n	800450e <_malloc_r+0xc2>
 80044de:	1961      	adds	r1, r4, r5
 80044e0:	42a3      	cmp	r3, r4
 80044e2:	6025      	str	r5, [r4, #0]
 80044e4:	bf18      	it	ne
 80044e6:	6059      	strne	r1, [r3, #4]
 80044e8:	6863      	ldr	r3, [r4, #4]
 80044ea:	bf08      	it	eq
 80044ec:	f8c8 1000 	streq.w	r1, [r8]
 80044f0:	5162      	str	r2, [r4, r5]
 80044f2:	604b      	str	r3, [r1, #4]
 80044f4:	4630      	mov	r0, r6
 80044f6:	f000 f82f 	bl	8004558 <__malloc_unlock>
 80044fa:	f104 000b 	add.w	r0, r4, #11
 80044fe:	1d23      	adds	r3, r4, #4
 8004500:	f020 0007 	bic.w	r0, r0, #7
 8004504:	1ac2      	subs	r2, r0, r3
 8004506:	bf1c      	itt	ne
 8004508:	1a1b      	subne	r3, r3, r0
 800450a:	50a3      	strne	r3, [r4, r2]
 800450c:	e7af      	b.n	800446e <_malloc_r+0x22>
 800450e:	6862      	ldr	r2, [r4, #4]
 8004510:	42a3      	cmp	r3, r4
 8004512:	bf0c      	ite	eq
 8004514:	f8c8 2000 	streq.w	r2, [r8]
 8004518:	605a      	strne	r2, [r3, #4]
 800451a:	e7eb      	b.n	80044f4 <_malloc_r+0xa8>
 800451c:	4623      	mov	r3, r4
 800451e:	6864      	ldr	r4, [r4, #4]
 8004520:	e7ae      	b.n	8004480 <_malloc_r+0x34>
 8004522:	463c      	mov	r4, r7
 8004524:	687f      	ldr	r7, [r7, #4]
 8004526:	e7b6      	b.n	8004496 <_malloc_r+0x4a>
 8004528:	461a      	mov	r2, r3
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	42a3      	cmp	r3, r4
 800452e:	d1fb      	bne.n	8004528 <_malloc_r+0xdc>
 8004530:	2300      	movs	r3, #0
 8004532:	6053      	str	r3, [r2, #4]
 8004534:	e7de      	b.n	80044f4 <_malloc_r+0xa8>
 8004536:	230c      	movs	r3, #12
 8004538:	6033      	str	r3, [r6, #0]
 800453a:	4630      	mov	r0, r6
 800453c:	f000 f80c 	bl	8004558 <__malloc_unlock>
 8004540:	e794      	b.n	800446c <_malloc_r+0x20>
 8004542:	6005      	str	r5, [r0, #0]
 8004544:	e7d6      	b.n	80044f4 <_malloc_r+0xa8>
 8004546:	bf00      	nop
 8004548:	20000404 	.word	0x20000404

0800454c <__malloc_lock>:
 800454c:	4801      	ldr	r0, [pc, #4]	@ (8004554 <__malloc_lock+0x8>)
 800454e:	f7ff bf0f 	b.w	8004370 <__retarget_lock_acquire_recursive>
 8004552:	bf00      	nop
 8004554:	200003fc 	.word	0x200003fc

08004558 <__malloc_unlock>:
 8004558:	4801      	ldr	r0, [pc, #4]	@ (8004560 <__malloc_unlock+0x8>)
 800455a:	f7ff bf0a 	b.w	8004372 <__retarget_lock_release_recursive>
 800455e:	bf00      	nop
 8004560:	200003fc 	.word	0x200003fc

08004564 <__ssputs_r>:
 8004564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004568:	688e      	ldr	r6, [r1, #8]
 800456a:	461f      	mov	r7, r3
 800456c:	42be      	cmp	r6, r7
 800456e:	680b      	ldr	r3, [r1, #0]
 8004570:	4682      	mov	sl, r0
 8004572:	460c      	mov	r4, r1
 8004574:	4690      	mov	r8, r2
 8004576:	d82d      	bhi.n	80045d4 <__ssputs_r+0x70>
 8004578:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800457c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004580:	d026      	beq.n	80045d0 <__ssputs_r+0x6c>
 8004582:	6965      	ldr	r5, [r4, #20]
 8004584:	6909      	ldr	r1, [r1, #16]
 8004586:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800458a:	eba3 0901 	sub.w	r9, r3, r1
 800458e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004592:	1c7b      	adds	r3, r7, #1
 8004594:	444b      	add	r3, r9
 8004596:	106d      	asrs	r5, r5, #1
 8004598:	429d      	cmp	r5, r3
 800459a:	bf38      	it	cc
 800459c:	461d      	movcc	r5, r3
 800459e:	0553      	lsls	r3, r2, #21
 80045a0:	d527      	bpl.n	80045f2 <__ssputs_r+0x8e>
 80045a2:	4629      	mov	r1, r5
 80045a4:	f7ff ff52 	bl	800444c <_malloc_r>
 80045a8:	4606      	mov	r6, r0
 80045aa:	b360      	cbz	r0, 8004606 <__ssputs_r+0xa2>
 80045ac:	6921      	ldr	r1, [r4, #16]
 80045ae:	464a      	mov	r2, r9
 80045b0:	f000 fae6 	bl	8004b80 <memcpy>
 80045b4:	89a3      	ldrh	r3, [r4, #12]
 80045b6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80045ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045be:	81a3      	strh	r3, [r4, #12]
 80045c0:	6126      	str	r6, [r4, #16]
 80045c2:	6165      	str	r5, [r4, #20]
 80045c4:	444e      	add	r6, r9
 80045c6:	eba5 0509 	sub.w	r5, r5, r9
 80045ca:	6026      	str	r6, [r4, #0]
 80045cc:	60a5      	str	r5, [r4, #8]
 80045ce:	463e      	mov	r6, r7
 80045d0:	42be      	cmp	r6, r7
 80045d2:	d900      	bls.n	80045d6 <__ssputs_r+0x72>
 80045d4:	463e      	mov	r6, r7
 80045d6:	6820      	ldr	r0, [r4, #0]
 80045d8:	4632      	mov	r2, r6
 80045da:	4641      	mov	r1, r8
 80045dc:	f000 faa6 	bl	8004b2c <memmove>
 80045e0:	68a3      	ldr	r3, [r4, #8]
 80045e2:	1b9b      	subs	r3, r3, r6
 80045e4:	60a3      	str	r3, [r4, #8]
 80045e6:	6823      	ldr	r3, [r4, #0]
 80045e8:	4433      	add	r3, r6
 80045ea:	6023      	str	r3, [r4, #0]
 80045ec:	2000      	movs	r0, #0
 80045ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045f2:	462a      	mov	r2, r5
 80045f4:	f000 fad2 	bl	8004b9c <_realloc_r>
 80045f8:	4606      	mov	r6, r0
 80045fa:	2800      	cmp	r0, #0
 80045fc:	d1e0      	bne.n	80045c0 <__ssputs_r+0x5c>
 80045fe:	6921      	ldr	r1, [r4, #16]
 8004600:	4650      	mov	r0, sl
 8004602:	f7ff feb7 	bl	8004374 <_free_r>
 8004606:	230c      	movs	r3, #12
 8004608:	f8ca 3000 	str.w	r3, [sl]
 800460c:	89a3      	ldrh	r3, [r4, #12]
 800460e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004612:	81a3      	strh	r3, [r4, #12]
 8004614:	f04f 30ff 	mov.w	r0, #4294967295
 8004618:	e7e9      	b.n	80045ee <__ssputs_r+0x8a>
	...

0800461c <_svfiprintf_r>:
 800461c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004620:	4698      	mov	r8, r3
 8004622:	898b      	ldrh	r3, [r1, #12]
 8004624:	061b      	lsls	r3, r3, #24
 8004626:	b09d      	sub	sp, #116	@ 0x74
 8004628:	4607      	mov	r7, r0
 800462a:	460d      	mov	r5, r1
 800462c:	4614      	mov	r4, r2
 800462e:	d510      	bpl.n	8004652 <_svfiprintf_r+0x36>
 8004630:	690b      	ldr	r3, [r1, #16]
 8004632:	b973      	cbnz	r3, 8004652 <_svfiprintf_r+0x36>
 8004634:	2140      	movs	r1, #64	@ 0x40
 8004636:	f7ff ff09 	bl	800444c <_malloc_r>
 800463a:	6028      	str	r0, [r5, #0]
 800463c:	6128      	str	r0, [r5, #16]
 800463e:	b930      	cbnz	r0, 800464e <_svfiprintf_r+0x32>
 8004640:	230c      	movs	r3, #12
 8004642:	603b      	str	r3, [r7, #0]
 8004644:	f04f 30ff 	mov.w	r0, #4294967295
 8004648:	b01d      	add	sp, #116	@ 0x74
 800464a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800464e:	2340      	movs	r3, #64	@ 0x40
 8004650:	616b      	str	r3, [r5, #20]
 8004652:	2300      	movs	r3, #0
 8004654:	9309      	str	r3, [sp, #36]	@ 0x24
 8004656:	2320      	movs	r3, #32
 8004658:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800465c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004660:	2330      	movs	r3, #48	@ 0x30
 8004662:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004800 <_svfiprintf_r+0x1e4>
 8004666:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800466a:	f04f 0901 	mov.w	r9, #1
 800466e:	4623      	mov	r3, r4
 8004670:	469a      	mov	sl, r3
 8004672:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004676:	b10a      	cbz	r2, 800467c <_svfiprintf_r+0x60>
 8004678:	2a25      	cmp	r2, #37	@ 0x25
 800467a:	d1f9      	bne.n	8004670 <_svfiprintf_r+0x54>
 800467c:	ebba 0b04 	subs.w	fp, sl, r4
 8004680:	d00b      	beq.n	800469a <_svfiprintf_r+0x7e>
 8004682:	465b      	mov	r3, fp
 8004684:	4622      	mov	r2, r4
 8004686:	4629      	mov	r1, r5
 8004688:	4638      	mov	r0, r7
 800468a:	f7ff ff6b 	bl	8004564 <__ssputs_r>
 800468e:	3001      	adds	r0, #1
 8004690:	f000 80a7 	beq.w	80047e2 <_svfiprintf_r+0x1c6>
 8004694:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004696:	445a      	add	r2, fp
 8004698:	9209      	str	r2, [sp, #36]	@ 0x24
 800469a:	f89a 3000 	ldrb.w	r3, [sl]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	f000 809f 	beq.w	80047e2 <_svfiprintf_r+0x1c6>
 80046a4:	2300      	movs	r3, #0
 80046a6:	f04f 32ff 	mov.w	r2, #4294967295
 80046aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80046ae:	f10a 0a01 	add.w	sl, sl, #1
 80046b2:	9304      	str	r3, [sp, #16]
 80046b4:	9307      	str	r3, [sp, #28]
 80046b6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80046ba:	931a      	str	r3, [sp, #104]	@ 0x68
 80046bc:	4654      	mov	r4, sl
 80046be:	2205      	movs	r2, #5
 80046c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046c4:	484e      	ldr	r0, [pc, #312]	@ (8004800 <_svfiprintf_r+0x1e4>)
 80046c6:	f7fb fdab 	bl	8000220 <memchr>
 80046ca:	9a04      	ldr	r2, [sp, #16]
 80046cc:	b9d8      	cbnz	r0, 8004706 <_svfiprintf_r+0xea>
 80046ce:	06d0      	lsls	r0, r2, #27
 80046d0:	bf44      	itt	mi
 80046d2:	2320      	movmi	r3, #32
 80046d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80046d8:	0711      	lsls	r1, r2, #28
 80046da:	bf44      	itt	mi
 80046dc:	232b      	movmi	r3, #43	@ 0x2b
 80046de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80046e2:	f89a 3000 	ldrb.w	r3, [sl]
 80046e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80046e8:	d015      	beq.n	8004716 <_svfiprintf_r+0xfa>
 80046ea:	9a07      	ldr	r2, [sp, #28]
 80046ec:	4654      	mov	r4, sl
 80046ee:	2000      	movs	r0, #0
 80046f0:	f04f 0c0a 	mov.w	ip, #10
 80046f4:	4621      	mov	r1, r4
 80046f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80046fa:	3b30      	subs	r3, #48	@ 0x30
 80046fc:	2b09      	cmp	r3, #9
 80046fe:	d94b      	bls.n	8004798 <_svfiprintf_r+0x17c>
 8004700:	b1b0      	cbz	r0, 8004730 <_svfiprintf_r+0x114>
 8004702:	9207      	str	r2, [sp, #28]
 8004704:	e014      	b.n	8004730 <_svfiprintf_r+0x114>
 8004706:	eba0 0308 	sub.w	r3, r0, r8
 800470a:	fa09 f303 	lsl.w	r3, r9, r3
 800470e:	4313      	orrs	r3, r2
 8004710:	9304      	str	r3, [sp, #16]
 8004712:	46a2      	mov	sl, r4
 8004714:	e7d2      	b.n	80046bc <_svfiprintf_r+0xa0>
 8004716:	9b03      	ldr	r3, [sp, #12]
 8004718:	1d19      	adds	r1, r3, #4
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	9103      	str	r1, [sp, #12]
 800471e:	2b00      	cmp	r3, #0
 8004720:	bfbb      	ittet	lt
 8004722:	425b      	neglt	r3, r3
 8004724:	f042 0202 	orrlt.w	r2, r2, #2
 8004728:	9307      	strge	r3, [sp, #28]
 800472a:	9307      	strlt	r3, [sp, #28]
 800472c:	bfb8      	it	lt
 800472e:	9204      	strlt	r2, [sp, #16]
 8004730:	7823      	ldrb	r3, [r4, #0]
 8004732:	2b2e      	cmp	r3, #46	@ 0x2e
 8004734:	d10a      	bne.n	800474c <_svfiprintf_r+0x130>
 8004736:	7863      	ldrb	r3, [r4, #1]
 8004738:	2b2a      	cmp	r3, #42	@ 0x2a
 800473a:	d132      	bne.n	80047a2 <_svfiprintf_r+0x186>
 800473c:	9b03      	ldr	r3, [sp, #12]
 800473e:	1d1a      	adds	r2, r3, #4
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	9203      	str	r2, [sp, #12]
 8004744:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004748:	3402      	adds	r4, #2
 800474a:	9305      	str	r3, [sp, #20]
 800474c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004810 <_svfiprintf_r+0x1f4>
 8004750:	7821      	ldrb	r1, [r4, #0]
 8004752:	2203      	movs	r2, #3
 8004754:	4650      	mov	r0, sl
 8004756:	f7fb fd63 	bl	8000220 <memchr>
 800475a:	b138      	cbz	r0, 800476c <_svfiprintf_r+0x150>
 800475c:	9b04      	ldr	r3, [sp, #16]
 800475e:	eba0 000a 	sub.w	r0, r0, sl
 8004762:	2240      	movs	r2, #64	@ 0x40
 8004764:	4082      	lsls	r2, r0
 8004766:	4313      	orrs	r3, r2
 8004768:	3401      	adds	r4, #1
 800476a:	9304      	str	r3, [sp, #16]
 800476c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004770:	4824      	ldr	r0, [pc, #144]	@ (8004804 <_svfiprintf_r+0x1e8>)
 8004772:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004776:	2206      	movs	r2, #6
 8004778:	f7fb fd52 	bl	8000220 <memchr>
 800477c:	2800      	cmp	r0, #0
 800477e:	d036      	beq.n	80047ee <_svfiprintf_r+0x1d2>
 8004780:	4b21      	ldr	r3, [pc, #132]	@ (8004808 <_svfiprintf_r+0x1ec>)
 8004782:	bb1b      	cbnz	r3, 80047cc <_svfiprintf_r+0x1b0>
 8004784:	9b03      	ldr	r3, [sp, #12]
 8004786:	3307      	adds	r3, #7
 8004788:	f023 0307 	bic.w	r3, r3, #7
 800478c:	3308      	adds	r3, #8
 800478e:	9303      	str	r3, [sp, #12]
 8004790:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004792:	4433      	add	r3, r6
 8004794:	9309      	str	r3, [sp, #36]	@ 0x24
 8004796:	e76a      	b.n	800466e <_svfiprintf_r+0x52>
 8004798:	fb0c 3202 	mla	r2, ip, r2, r3
 800479c:	460c      	mov	r4, r1
 800479e:	2001      	movs	r0, #1
 80047a0:	e7a8      	b.n	80046f4 <_svfiprintf_r+0xd8>
 80047a2:	2300      	movs	r3, #0
 80047a4:	3401      	adds	r4, #1
 80047a6:	9305      	str	r3, [sp, #20]
 80047a8:	4619      	mov	r1, r3
 80047aa:	f04f 0c0a 	mov.w	ip, #10
 80047ae:	4620      	mov	r0, r4
 80047b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80047b4:	3a30      	subs	r2, #48	@ 0x30
 80047b6:	2a09      	cmp	r2, #9
 80047b8:	d903      	bls.n	80047c2 <_svfiprintf_r+0x1a6>
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d0c6      	beq.n	800474c <_svfiprintf_r+0x130>
 80047be:	9105      	str	r1, [sp, #20]
 80047c0:	e7c4      	b.n	800474c <_svfiprintf_r+0x130>
 80047c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80047c6:	4604      	mov	r4, r0
 80047c8:	2301      	movs	r3, #1
 80047ca:	e7f0      	b.n	80047ae <_svfiprintf_r+0x192>
 80047cc:	ab03      	add	r3, sp, #12
 80047ce:	9300      	str	r3, [sp, #0]
 80047d0:	462a      	mov	r2, r5
 80047d2:	4b0e      	ldr	r3, [pc, #56]	@ (800480c <_svfiprintf_r+0x1f0>)
 80047d4:	a904      	add	r1, sp, #16
 80047d6:	4638      	mov	r0, r7
 80047d8:	f3af 8000 	nop.w
 80047dc:	1c42      	adds	r2, r0, #1
 80047de:	4606      	mov	r6, r0
 80047e0:	d1d6      	bne.n	8004790 <_svfiprintf_r+0x174>
 80047e2:	89ab      	ldrh	r3, [r5, #12]
 80047e4:	065b      	lsls	r3, r3, #25
 80047e6:	f53f af2d 	bmi.w	8004644 <_svfiprintf_r+0x28>
 80047ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80047ec:	e72c      	b.n	8004648 <_svfiprintf_r+0x2c>
 80047ee:	ab03      	add	r3, sp, #12
 80047f0:	9300      	str	r3, [sp, #0]
 80047f2:	462a      	mov	r2, r5
 80047f4:	4b05      	ldr	r3, [pc, #20]	@ (800480c <_svfiprintf_r+0x1f0>)
 80047f6:	a904      	add	r1, sp, #16
 80047f8:	4638      	mov	r0, r7
 80047fa:	f000 f879 	bl	80048f0 <_printf_i>
 80047fe:	e7ed      	b.n	80047dc <_svfiprintf_r+0x1c0>
 8004800:	08004d40 	.word	0x08004d40
 8004804:	08004d4a 	.word	0x08004d4a
 8004808:	00000000 	.word	0x00000000
 800480c:	08004565 	.word	0x08004565
 8004810:	08004d46 	.word	0x08004d46

08004814 <_printf_common>:
 8004814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004818:	4616      	mov	r6, r2
 800481a:	4698      	mov	r8, r3
 800481c:	688a      	ldr	r2, [r1, #8]
 800481e:	690b      	ldr	r3, [r1, #16]
 8004820:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004824:	4293      	cmp	r3, r2
 8004826:	bfb8      	it	lt
 8004828:	4613      	movlt	r3, r2
 800482a:	6033      	str	r3, [r6, #0]
 800482c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004830:	4607      	mov	r7, r0
 8004832:	460c      	mov	r4, r1
 8004834:	b10a      	cbz	r2, 800483a <_printf_common+0x26>
 8004836:	3301      	adds	r3, #1
 8004838:	6033      	str	r3, [r6, #0]
 800483a:	6823      	ldr	r3, [r4, #0]
 800483c:	0699      	lsls	r1, r3, #26
 800483e:	bf42      	ittt	mi
 8004840:	6833      	ldrmi	r3, [r6, #0]
 8004842:	3302      	addmi	r3, #2
 8004844:	6033      	strmi	r3, [r6, #0]
 8004846:	6825      	ldr	r5, [r4, #0]
 8004848:	f015 0506 	ands.w	r5, r5, #6
 800484c:	d106      	bne.n	800485c <_printf_common+0x48>
 800484e:	f104 0a19 	add.w	sl, r4, #25
 8004852:	68e3      	ldr	r3, [r4, #12]
 8004854:	6832      	ldr	r2, [r6, #0]
 8004856:	1a9b      	subs	r3, r3, r2
 8004858:	42ab      	cmp	r3, r5
 800485a:	dc26      	bgt.n	80048aa <_printf_common+0x96>
 800485c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004860:	6822      	ldr	r2, [r4, #0]
 8004862:	3b00      	subs	r3, #0
 8004864:	bf18      	it	ne
 8004866:	2301      	movne	r3, #1
 8004868:	0692      	lsls	r2, r2, #26
 800486a:	d42b      	bmi.n	80048c4 <_printf_common+0xb0>
 800486c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004870:	4641      	mov	r1, r8
 8004872:	4638      	mov	r0, r7
 8004874:	47c8      	blx	r9
 8004876:	3001      	adds	r0, #1
 8004878:	d01e      	beq.n	80048b8 <_printf_common+0xa4>
 800487a:	6823      	ldr	r3, [r4, #0]
 800487c:	6922      	ldr	r2, [r4, #16]
 800487e:	f003 0306 	and.w	r3, r3, #6
 8004882:	2b04      	cmp	r3, #4
 8004884:	bf02      	ittt	eq
 8004886:	68e5      	ldreq	r5, [r4, #12]
 8004888:	6833      	ldreq	r3, [r6, #0]
 800488a:	1aed      	subeq	r5, r5, r3
 800488c:	68a3      	ldr	r3, [r4, #8]
 800488e:	bf0c      	ite	eq
 8004890:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004894:	2500      	movne	r5, #0
 8004896:	4293      	cmp	r3, r2
 8004898:	bfc4      	itt	gt
 800489a:	1a9b      	subgt	r3, r3, r2
 800489c:	18ed      	addgt	r5, r5, r3
 800489e:	2600      	movs	r6, #0
 80048a0:	341a      	adds	r4, #26
 80048a2:	42b5      	cmp	r5, r6
 80048a4:	d11a      	bne.n	80048dc <_printf_common+0xc8>
 80048a6:	2000      	movs	r0, #0
 80048a8:	e008      	b.n	80048bc <_printf_common+0xa8>
 80048aa:	2301      	movs	r3, #1
 80048ac:	4652      	mov	r2, sl
 80048ae:	4641      	mov	r1, r8
 80048b0:	4638      	mov	r0, r7
 80048b2:	47c8      	blx	r9
 80048b4:	3001      	adds	r0, #1
 80048b6:	d103      	bne.n	80048c0 <_printf_common+0xac>
 80048b8:	f04f 30ff 	mov.w	r0, #4294967295
 80048bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048c0:	3501      	adds	r5, #1
 80048c2:	e7c6      	b.n	8004852 <_printf_common+0x3e>
 80048c4:	18e1      	adds	r1, r4, r3
 80048c6:	1c5a      	adds	r2, r3, #1
 80048c8:	2030      	movs	r0, #48	@ 0x30
 80048ca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80048ce:	4422      	add	r2, r4
 80048d0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80048d4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80048d8:	3302      	adds	r3, #2
 80048da:	e7c7      	b.n	800486c <_printf_common+0x58>
 80048dc:	2301      	movs	r3, #1
 80048de:	4622      	mov	r2, r4
 80048e0:	4641      	mov	r1, r8
 80048e2:	4638      	mov	r0, r7
 80048e4:	47c8      	blx	r9
 80048e6:	3001      	adds	r0, #1
 80048e8:	d0e6      	beq.n	80048b8 <_printf_common+0xa4>
 80048ea:	3601      	adds	r6, #1
 80048ec:	e7d9      	b.n	80048a2 <_printf_common+0x8e>
	...

080048f0 <_printf_i>:
 80048f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80048f4:	7e0f      	ldrb	r7, [r1, #24]
 80048f6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80048f8:	2f78      	cmp	r7, #120	@ 0x78
 80048fa:	4691      	mov	r9, r2
 80048fc:	4680      	mov	r8, r0
 80048fe:	460c      	mov	r4, r1
 8004900:	469a      	mov	sl, r3
 8004902:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004906:	d807      	bhi.n	8004918 <_printf_i+0x28>
 8004908:	2f62      	cmp	r7, #98	@ 0x62
 800490a:	d80a      	bhi.n	8004922 <_printf_i+0x32>
 800490c:	2f00      	cmp	r7, #0
 800490e:	f000 80d1 	beq.w	8004ab4 <_printf_i+0x1c4>
 8004912:	2f58      	cmp	r7, #88	@ 0x58
 8004914:	f000 80b8 	beq.w	8004a88 <_printf_i+0x198>
 8004918:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800491c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004920:	e03a      	b.n	8004998 <_printf_i+0xa8>
 8004922:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004926:	2b15      	cmp	r3, #21
 8004928:	d8f6      	bhi.n	8004918 <_printf_i+0x28>
 800492a:	a101      	add	r1, pc, #4	@ (adr r1, 8004930 <_printf_i+0x40>)
 800492c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004930:	08004989 	.word	0x08004989
 8004934:	0800499d 	.word	0x0800499d
 8004938:	08004919 	.word	0x08004919
 800493c:	08004919 	.word	0x08004919
 8004940:	08004919 	.word	0x08004919
 8004944:	08004919 	.word	0x08004919
 8004948:	0800499d 	.word	0x0800499d
 800494c:	08004919 	.word	0x08004919
 8004950:	08004919 	.word	0x08004919
 8004954:	08004919 	.word	0x08004919
 8004958:	08004919 	.word	0x08004919
 800495c:	08004a9b 	.word	0x08004a9b
 8004960:	080049c7 	.word	0x080049c7
 8004964:	08004a55 	.word	0x08004a55
 8004968:	08004919 	.word	0x08004919
 800496c:	08004919 	.word	0x08004919
 8004970:	08004abd 	.word	0x08004abd
 8004974:	08004919 	.word	0x08004919
 8004978:	080049c7 	.word	0x080049c7
 800497c:	08004919 	.word	0x08004919
 8004980:	08004919 	.word	0x08004919
 8004984:	08004a5d 	.word	0x08004a5d
 8004988:	6833      	ldr	r3, [r6, #0]
 800498a:	1d1a      	adds	r2, r3, #4
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	6032      	str	r2, [r6, #0]
 8004990:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004994:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004998:	2301      	movs	r3, #1
 800499a:	e09c      	b.n	8004ad6 <_printf_i+0x1e6>
 800499c:	6833      	ldr	r3, [r6, #0]
 800499e:	6820      	ldr	r0, [r4, #0]
 80049a0:	1d19      	adds	r1, r3, #4
 80049a2:	6031      	str	r1, [r6, #0]
 80049a4:	0606      	lsls	r6, r0, #24
 80049a6:	d501      	bpl.n	80049ac <_printf_i+0xbc>
 80049a8:	681d      	ldr	r5, [r3, #0]
 80049aa:	e003      	b.n	80049b4 <_printf_i+0xc4>
 80049ac:	0645      	lsls	r5, r0, #25
 80049ae:	d5fb      	bpl.n	80049a8 <_printf_i+0xb8>
 80049b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80049b4:	2d00      	cmp	r5, #0
 80049b6:	da03      	bge.n	80049c0 <_printf_i+0xd0>
 80049b8:	232d      	movs	r3, #45	@ 0x2d
 80049ba:	426d      	negs	r5, r5
 80049bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80049c0:	4858      	ldr	r0, [pc, #352]	@ (8004b24 <_printf_i+0x234>)
 80049c2:	230a      	movs	r3, #10
 80049c4:	e011      	b.n	80049ea <_printf_i+0xfa>
 80049c6:	6821      	ldr	r1, [r4, #0]
 80049c8:	6833      	ldr	r3, [r6, #0]
 80049ca:	0608      	lsls	r0, r1, #24
 80049cc:	f853 5b04 	ldr.w	r5, [r3], #4
 80049d0:	d402      	bmi.n	80049d8 <_printf_i+0xe8>
 80049d2:	0649      	lsls	r1, r1, #25
 80049d4:	bf48      	it	mi
 80049d6:	b2ad      	uxthmi	r5, r5
 80049d8:	2f6f      	cmp	r7, #111	@ 0x6f
 80049da:	4852      	ldr	r0, [pc, #328]	@ (8004b24 <_printf_i+0x234>)
 80049dc:	6033      	str	r3, [r6, #0]
 80049de:	bf14      	ite	ne
 80049e0:	230a      	movne	r3, #10
 80049e2:	2308      	moveq	r3, #8
 80049e4:	2100      	movs	r1, #0
 80049e6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80049ea:	6866      	ldr	r6, [r4, #4]
 80049ec:	60a6      	str	r6, [r4, #8]
 80049ee:	2e00      	cmp	r6, #0
 80049f0:	db05      	blt.n	80049fe <_printf_i+0x10e>
 80049f2:	6821      	ldr	r1, [r4, #0]
 80049f4:	432e      	orrs	r6, r5
 80049f6:	f021 0104 	bic.w	r1, r1, #4
 80049fa:	6021      	str	r1, [r4, #0]
 80049fc:	d04b      	beq.n	8004a96 <_printf_i+0x1a6>
 80049fe:	4616      	mov	r6, r2
 8004a00:	fbb5 f1f3 	udiv	r1, r5, r3
 8004a04:	fb03 5711 	mls	r7, r3, r1, r5
 8004a08:	5dc7      	ldrb	r7, [r0, r7]
 8004a0a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004a0e:	462f      	mov	r7, r5
 8004a10:	42bb      	cmp	r3, r7
 8004a12:	460d      	mov	r5, r1
 8004a14:	d9f4      	bls.n	8004a00 <_printf_i+0x110>
 8004a16:	2b08      	cmp	r3, #8
 8004a18:	d10b      	bne.n	8004a32 <_printf_i+0x142>
 8004a1a:	6823      	ldr	r3, [r4, #0]
 8004a1c:	07df      	lsls	r7, r3, #31
 8004a1e:	d508      	bpl.n	8004a32 <_printf_i+0x142>
 8004a20:	6923      	ldr	r3, [r4, #16]
 8004a22:	6861      	ldr	r1, [r4, #4]
 8004a24:	4299      	cmp	r1, r3
 8004a26:	bfde      	ittt	le
 8004a28:	2330      	movle	r3, #48	@ 0x30
 8004a2a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004a2e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004a32:	1b92      	subs	r2, r2, r6
 8004a34:	6122      	str	r2, [r4, #16]
 8004a36:	f8cd a000 	str.w	sl, [sp]
 8004a3a:	464b      	mov	r3, r9
 8004a3c:	aa03      	add	r2, sp, #12
 8004a3e:	4621      	mov	r1, r4
 8004a40:	4640      	mov	r0, r8
 8004a42:	f7ff fee7 	bl	8004814 <_printf_common>
 8004a46:	3001      	adds	r0, #1
 8004a48:	d14a      	bne.n	8004ae0 <_printf_i+0x1f0>
 8004a4a:	f04f 30ff 	mov.w	r0, #4294967295
 8004a4e:	b004      	add	sp, #16
 8004a50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a54:	6823      	ldr	r3, [r4, #0]
 8004a56:	f043 0320 	orr.w	r3, r3, #32
 8004a5a:	6023      	str	r3, [r4, #0]
 8004a5c:	4832      	ldr	r0, [pc, #200]	@ (8004b28 <_printf_i+0x238>)
 8004a5e:	2778      	movs	r7, #120	@ 0x78
 8004a60:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004a64:	6823      	ldr	r3, [r4, #0]
 8004a66:	6831      	ldr	r1, [r6, #0]
 8004a68:	061f      	lsls	r7, r3, #24
 8004a6a:	f851 5b04 	ldr.w	r5, [r1], #4
 8004a6e:	d402      	bmi.n	8004a76 <_printf_i+0x186>
 8004a70:	065f      	lsls	r7, r3, #25
 8004a72:	bf48      	it	mi
 8004a74:	b2ad      	uxthmi	r5, r5
 8004a76:	6031      	str	r1, [r6, #0]
 8004a78:	07d9      	lsls	r1, r3, #31
 8004a7a:	bf44      	itt	mi
 8004a7c:	f043 0320 	orrmi.w	r3, r3, #32
 8004a80:	6023      	strmi	r3, [r4, #0]
 8004a82:	b11d      	cbz	r5, 8004a8c <_printf_i+0x19c>
 8004a84:	2310      	movs	r3, #16
 8004a86:	e7ad      	b.n	80049e4 <_printf_i+0xf4>
 8004a88:	4826      	ldr	r0, [pc, #152]	@ (8004b24 <_printf_i+0x234>)
 8004a8a:	e7e9      	b.n	8004a60 <_printf_i+0x170>
 8004a8c:	6823      	ldr	r3, [r4, #0]
 8004a8e:	f023 0320 	bic.w	r3, r3, #32
 8004a92:	6023      	str	r3, [r4, #0]
 8004a94:	e7f6      	b.n	8004a84 <_printf_i+0x194>
 8004a96:	4616      	mov	r6, r2
 8004a98:	e7bd      	b.n	8004a16 <_printf_i+0x126>
 8004a9a:	6833      	ldr	r3, [r6, #0]
 8004a9c:	6825      	ldr	r5, [r4, #0]
 8004a9e:	6961      	ldr	r1, [r4, #20]
 8004aa0:	1d18      	adds	r0, r3, #4
 8004aa2:	6030      	str	r0, [r6, #0]
 8004aa4:	062e      	lsls	r6, r5, #24
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	d501      	bpl.n	8004aae <_printf_i+0x1be>
 8004aaa:	6019      	str	r1, [r3, #0]
 8004aac:	e002      	b.n	8004ab4 <_printf_i+0x1c4>
 8004aae:	0668      	lsls	r0, r5, #25
 8004ab0:	d5fb      	bpl.n	8004aaa <_printf_i+0x1ba>
 8004ab2:	8019      	strh	r1, [r3, #0]
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	6123      	str	r3, [r4, #16]
 8004ab8:	4616      	mov	r6, r2
 8004aba:	e7bc      	b.n	8004a36 <_printf_i+0x146>
 8004abc:	6833      	ldr	r3, [r6, #0]
 8004abe:	1d1a      	adds	r2, r3, #4
 8004ac0:	6032      	str	r2, [r6, #0]
 8004ac2:	681e      	ldr	r6, [r3, #0]
 8004ac4:	6862      	ldr	r2, [r4, #4]
 8004ac6:	2100      	movs	r1, #0
 8004ac8:	4630      	mov	r0, r6
 8004aca:	f7fb fba9 	bl	8000220 <memchr>
 8004ace:	b108      	cbz	r0, 8004ad4 <_printf_i+0x1e4>
 8004ad0:	1b80      	subs	r0, r0, r6
 8004ad2:	6060      	str	r0, [r4, #4]
 8004ad4:	6863      	ldr	r3, [r4, #4]
 8004ad6:	6123      	str	r3, [r4, #16]
 8004ad8:	2300      	movs	r3, #0
 8004ada:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004ade:	e7aa      	b.n	8004a36 <_printf_i+0x146>
 8004ae0:	6923      	ldr	r3, [r4, #16]
 8004ae2:	4632      	mov	r2, r6
 8004ae4:	4649      	mov	r1, r9
 8004ae6:	4640      	mov	r0, r8
 8004ae8:	47d0      	blx	sl
 8004aea:	3001      	adds	r0, #1
 8004aec:	d0ad      	beq.n	8004a4a <_printf_i+0x15a>
 8004aee:	6823      	ldr	r3, [r4, #0]
 8004af0:	079b      	lsls	r3, r3, #30
 8004af2:	d413      	bmi.n	8004b1c <_printf_i+0x22c>
 8004af4:	68e0      	ldr	r0, [r4, #12]
 8004af6:	9b03      	ldr	r3, [sp, #12]
 8004af8:	4298      	cmp	r0, r3
 8004afa:	bfb8      	it	lt
 8004afc:	4618      	movlt	r0, r3
 8004afe:	e7a6      	b.n	8004a4e <_printf_i+0x15e>
 8004b00:	2301      	movs	r3, #1
 8004b02:	4632      	mov	r2, r6
 8004b04:	4649      	mov	r1, r9
 8004b06:	4640      	mov	r0, r8
 8004b08:	47d0      	blx	sl
 8004b0a:	3001      	adds	r0, #1
 8004b0c:	d09d      	beq.n	8004a4a <_printf_i+0x15a>
 8004b0e:	3501      	adds	r5, #1
 8004b10:	68e3      	ldr	r3, [r4, #12]
 8004b12:	9903      	ldr	r1, [sp, #12]
 8004b14:	1a5b      	subs	r3, r3, r1
 8004b16:	42ab      	cmp	r3, r5
 8004b18:	dcf2      	bgt.n	8004b00 <_printf_i+0x210>
 8004b1a:	e7eb      	b.n	8004af4 <_printf_i+0x204>
 8004b1c:	2500      	movs	r5, #0
 8004b1e:	f104 0619 	add.w	r6, r4, #25
 8004b22:	e7f5      	b.n	8004b10 <_printf_i+0x220>
 8004b24:	08004d51 	.word	0x08004d51
 8004b28:	08004d62 	.word	0x08004d62

08004b2c <memmove>:
 8004b2c:	4288      	cmp	r0, r1
 8004b2e:	b510      	push	{r4, lr}
 8004b30:	eb01 0402 	add.w	r4, r1, r2
 8004b34:	d902      	bls.n	8004b3c <memmove+0x10>
 8004b36:	4284      	cmp	r4, r0
 8004b38:	4623      	mov	r3, r4
 8004b3a:	d807      	bhi.n	8004b4c <memmove+0x20>
 8004b3c:	1e43      	subs	r3, r0, #1
 8004b3e:	42a1      	cmp	r1, r4
 8004b40:	d008      	beq.n	8004b54 <memmove+0x28>
 8004b42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004b46:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004b4a:	e7f8      	b.n	8004b3e <memmove+0x12>
 8004b4c:	4402      	add	r2, r0
 8004b4e:	4601      	mov	r1, r0
 8004b50:	428a      	cmp	r2, r1
 8004b52:	d100      	bne.n	8004b56 <memmove+0x2a>
 8004b54:	bd10      	pop	{r4, pc}
 8004b56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004b5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004b5e:	e7f7      	b.n	8004b50 <memmove+0x24>

08004b60 <_sbrk_r>:
 8004b60:	b538      	push	{r3, r4, r5, lr}
 8004b62:	4d06      	ldr	r5, [pc, #24]	@ (8004b7c <_sbrk_r+0x1c>)
 8004b64:	2300      	movs	r3, #0
 8004b66:	4604      	mov	r4, r0
 8004b68:	4608      	mov	r0, r1
 8004b6a:	602b      	str	r3, [r5, #0]
 8004b6c:	f7fc fa38 	bl	8000fe0 <_sbrk>
 8004b70:	1c43      	adds	r3, r0, #1
 8004b72:	d102      	bne.n	8004b7a <_sbrk_r+0x1a>
 8004b74:	682b      	ldr	r3, [r5, #0]
 8004b76:	b103      	cbz	r3, 8004b7a <_sbrk_r+0x1a>
 8004b78:	6023      	str	r3, [r4, #0]
 8004b7a:	bd38      	pop	{r3, r4, r5, pc}
 8004b7c:	200003f8 	.word	0x200003f8

08004b80 <memcpy>:
 8004b80:	440a      	add	r2, r1
 8004b82:	4291      	cmp	r1, r2
 8004b84:	f100 33ff 	add.w	r3, r0, #4294967295
 8004b88:	d100      	bne.n	8004b8c <memcpy+0xc>
 8004b8a:	4770      	bx	lr
 8004b8c:	b510      	push	{r4, lr}
 8004b8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b92:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b96:	4291      	cmp	r1, r2
 8004b98:	d1f9      	bne.n	8004b8e <memcpy+0xe>
 8004b9a:	bd10      	pop	{r4, pc}

08004b9c <_realloc_r>:
 8004b9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ba0:	4607      	mov	r7, r0
 8004ba2:	4614      	mov	r4, r2
 8004ba4:	460d      	mov	r5, r1
 8004ba6:	b921      	cbnz	r1, 8004bb2 <_realloc_r+0x16>
 8004ba8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004bac:	4611      	mov	r1, r2
 8004bae:	f7ff bc4d 	b.w	800444c <_malloc_r>
 8004bb2:	b92a      	cbnz	r2, 8004bc0 <_realloc_r+0x24>
 8004bb4:	f7ff fbde 	bl	8004374 <_free_r>
 8004bb8:	4625      	mov	r5, r4
 8004bba:	4628      	mov	r0, r5
 8004bbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004bc0:	f000 f81a 	bl	8004bf8 <_malloc_usable_size_r>
 8004bc4:	4284      	cmp	r4, r0
 8004bc6:	4606      	mov	r6, r0
 8004bc8:	d802      	bhi.n	8004bd0 <_realloc_r+0x34>
 8004bca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004bce:	d8f4      	bhi.n	8004bba <_realloc_r+0x1e>
 8004bd0:	4621      	mov	r1, r4
 8004bd2:	4638      	mov	r0, r7
 8004bd4:	f7ff fc3a 	bl	800444c <_malloc_r>
 8004bd8:	4680      	mov	r8, r0
 8004bda:	b908      	cbnz	r0, 8004be0 <_realloc_r+0x44>
 8004bdc:	4645      	mov	r5, r8
 8004bde:	e7ec      	b.n	8004bba <_realloc_r+0x1e>
 8004be0:	42b4      	cmp	r4, r6
 8004be2:	4622      	mov	r2, r4
 8004be4:	4629      	mov	r1, r5
 8004be6:	bf28      	it	cs
 8004be8:	4632      	movcs	r2, r6
 8004bea:	f7ff ffc9 	bl	8004b80 <memcpy>
 8004bee:	4629      	mov	r1, r5
 8004bf0:	4638      	mov	r0, r7
 8004bf2:	f7ff fbbf 	bl	8004374 <_free_r>
 8004bf6:	e7f1      	b.n	8004bdc <_realloc_r+0x40>

08004bf8 <_malloc_usable_size_r>:
 8004bf8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004bfc:	1f18      	subs	r0, r3, #4
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	bfbc      	itt	lt
 8004c02:	580b      	ldrlt	r3, [r1, r0]
 8004c04:	18c0      	addlt	r0, r0, r3
 8004c06:	4770      	bx	lr

08004c08 <_init>:
 8004c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c0a:	bf00      	nop
 8004c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c0e:	bc08      	pop	{r3}
 8004c10:	469e      	mov	lr, r3
 8004c12:	4770      	bx	lr

08004c14 <_fini>:
 8004c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c16:	bf00      	nop
 8004c18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c1a:	bc08      	pop	{r3}
 8004c1c:	469e      	mov	lr, r3
 8004c1e:	4770      	bx	lr
