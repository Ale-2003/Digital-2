
Laboratorio6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000025c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001e8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  0000025c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000028c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a33  00000000  00000000  0000035c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007fb  00000000  00000000  00000d8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005cb  00000000  00000000  0000158a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e8  00000000  00000000  00001b58  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004da  00000000  00000000  00001c40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000020e  00000000  00000000  0000211a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00002328  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 98 00 	jmp	0x130	; 0x130 <__vector_4>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 5f 00 	call	0xbe	; 0xbe <main>
  88:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <initPinChange1>:
  90:	97 b1       	in	r25, 0x07	; 7
  92:	90 7c       	andi	r25, 0xC0	; 192
  94:	97 b9       	out	0x07, r25	; 7
  96:	81 30       	cpi	r24, 0x01	; 1
  98:	21 f4       	brne	.+8      	; 0xa2 <initPinChange1+0x12>
  9a:	88 b1       	in	r24, 0x08	; 8
  9c:	80 7c       	andi	r24, 0xC0	; 192
  9e:	88 b9       	out	0x08, r24	; 8
  a0:	03 c0       	rjmp	.+6      	; 0xa8 <initPinChange1+0x18>
  a2:	88 b1       	in	r24, 0x08	; 8
  a4:	8f 63       	ori	r24, 0x3F	; 63
  a6:	88 b9       	out	0x08, r24	; 8
  a8:	e8 e6       	ldi	r30, 0x68	; 104
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	80 81       	ld	r24, Z
  ae:	82 60       	ori	r24, 0x02	; 2
  b0:	80 83       	st	Z, r24
  b2:	ec e6       	ldi	r30, 0x6C	; 108
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	8f 63       	ori	r24, 0x3F	; 63
  ba:	80 83       	st	Z, r24
  bc:	08 95       	ret

000000be <main>:
volatile uint8_t flag_interrupt = 0;

// FUNCIONES

int main(void) {
    initPinChange1(falling_edge);  // INTERRUPCIONES PC0 - PC5
  be:	80 e0       	ldi	r24, 0x00	; 0
  c0:	0e 94 48 00 	call	0x90	; 0x90 <initPinChange1>
    initUART(fast, 9600);
  c4:	40 e8       	ldi	r20, 0x80	; 128
  c6:	55 e2       	ldi	r21, 0x25	; 37
  c8:	60 e0       	ldi	r22, 0x00	; 0
  ca:	70 e0       	ldi	r23, 0x00	; 0
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	0e 94 a7 00 	call	0x14e	; 0x14e <initUART>
    sei(); // Habilitar interrupciones globales
  d2:	78 94       	sei
    while (1) {
        if (flag_interrupt) {
  d4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  d8:	88 23       	and	r24, r24
  da:	e1 f3       	breq	.-8      	; 0xd4 <main+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  dc:	2f ef       	ldi	r18, 0xFF	; 255
  de:	81 ee       	ldi	r24, 0xE1	; 225
  e0:	94 e0       	ldi	r25, 0x04	; 4
  e2:	21 50       	subi	r18, 0x01	; 1
  e4:	80 40       	sbci	r24, 0x00	; 0
  e6:	90 40       	sbci	r25, 0x00	; 0
  e8:	e1 f7       	brne	.-8      	; 0xe2 <main+0x24>
  ea:	00 c0       	rjmp	.+0      	; 0xec <main+0x2e>
  ec:	00 00       	nop
            _delay_ms(100);  // Se aplica el retraso fuera de la ISR
            
            if (!(PINC & (1 << PC0))) write_UART('A');
  ee:	30 99       	sbic	0x06, 0	; 6
  f0:	03 c0       	rjmp	.+6      	; 0xf8 <main+0x3a>
  f2:	81 e4       	ldi	r24, 0x41	; 65
  f4:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <write_UART>
            if (!(PINC & (1 << PC1))) write_UART('B');
  f8:	31 99       	sbic	0x06, 1	; 6
  fa:	03 c0       	rjmp	.+6      	; 0x102 <main+0x44>
  fc:	82 e4       	ldi	r24, 0x42	; 66
  fe:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <write_UART>
            if (!(PINC & (1 << PC2))) write_UART('U');
 102:	32 99       	sbic	0x06, 2	; 6
 104:	03 c0       	rjmp	.+6      	; 0x10c <main+0x4e>
 106:	85 e5       	ldi	r24, 0x55	; 85
 108:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <write_UART>
            if (!(PINC & (1 << PC3))) write_UART('D');
 10c:	33 99       	sbic	0x06, 3	; 6
 10e:	03 c0       	rjmp	.+6      	; 0x116 <main+0x58>
 110:	84 e4       	ldi	r24, 0x44	; 68
 112:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <write_UART>
            if (!(PINC & (1 << PC4))) write_UART('L');
 116:	34 99       	sbic	0x06, 4	; 6
 118:	03 c0       	rjmp	.+6      	; 0x120 <main+0x62>
 11a:	8c e4       	ldi	r24, 0x4C	; 76
 11c:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <write_UART>
            if (!(PINC & (1 << PC5))) write_UART('R');
 120:	35 99       	sbic	0x06, 5	; 6
 122:	03 c0       	rjmp	.+6      	; 0x12a <main+0x6c>
 124:	82 e5       	ldi	r24, 0x52	; 82
 126:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <write_UART>

            flag_interrupt = 0; // Limpiar la bandera
 12a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 12e:	d2 cf       	rjmp	.-92     	; 0xd4 <main+0x16>

00000130 <__vector_4>:
        }
    }
}

// ISR PARA INTERRUPCIONES EN PC0 - PC5
ISR (PCINT1_vect) {
 130:	1f 92       	push	r1
 132:	0f 92       	push	r0
 134:	0f b6       	in	r0, 0x3f	; 63
 136:	0f 92       	push	r0
 138:	11 24       	eor	r1, r1
 13a:	8f 93       	push	r24
    flag_interrupt = 1;  // Indicar que hubo una interrupción
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
}
 142:	8f 91       	pop	r24
 144:	0f 90       	pop	r0
 146:	0f be       	out	0x3f, r0	; 63
 148:	0f 90       	pop	r0
 14a:	1f 90       	pop	r1
 14c:	18 95       	reti

0000014e <initUART>:
 */ 
#include "UART.h"

void initUART(uint8_t Fast, uint32_t BaudRate){
	// CONFIGURAR RX Y TX
	DDRD &= ~(1 << DDD0);  // RX como entrada
 14e:	9a b1       	in	r25, 0x0a	; 10
 150:	9e 7f       	andi	r25, 0xFE	; 254
 152:	9a b9       	out	0x0a, r25	; 10
	DDRD |= (1 << DDD1);   // TX como salida
 154:	9a b1       	in	r25, 0x0a	; 10
 156:	92 60       	ori	r25, 0x02	; 2
 158:	9a b9       	out	0x0a, r25	; 10
	
	if (Fast) {
 15a:	88 23       	and	r24, r24
 15c:	31 f0       	breq	.+12     	; 0x16a <initUART+0x1c>
		// CONFIGURAR EL REGISTRO A (MODO FAST U2X0 = 1)
		UCSR0A |= (1 << U2X0);
 15e:	e0 ec       	ldi	r30, 0xC0	; 192
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	90 81       	ld	r25, Z
 164:	92 60       	ori	r25, 0x02	; 2
 166:	90 83       	st	Z, r25
 168:	05 c0       	rjmp	.+10     	; 0x174 <initUART+0x26>
	} else {
		UCSR0A &= ~(1 << U2X0);
 16a:	e0 ec       	ldi	r30, 0xC0	; 192
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	90 81       	ld	r25, Z
 170:	9d 7f       	andi	r25, 0xFD	; 253
 172:	90 83       	st	Z, r25
	}

	// CONFIGURAR BAUDRATE
	switch (BaudRate) {
 174:	40 38       	cpi	r20, 0x80	; 128
 176:	95 e2       	ldi	r25, 0x25	; 37
 178:	59 07       	cpc	r21, r25
 17a:	61 05       	cpc	r22, r1
 17c:	71 05       	cpc	r23, r1
 17e:	31 f0       	breq	.+12     	; 0x18c <initUART+0x3e>
 180:	41 15       	cp	r20, r1
 182:	52 4c       	sbci	r21, 0xC2	; 194
 184:	61 40       	sbci	r22, 0x01	; 1
 186:	71 05       	cpc	r23, r1
 188:	69 f0       	breq	.+26     	; 0x1a4 <initUART+0x56>
 18a:	18 c0       	rjmp	.+48     	; 0x1bc <initUART+0x6e>
		case 9600:
			UBRR0 = (Fast) ? 207 : 103;
 18c:	88 23       	and	r24, r24
 18e:	19 f0       	breq	.+6      	; 0x196 <initUART+0x48>
 190:	8f ec       	ldi	r24, 0xCF	; 207
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	02 c0       	rjmp	.+4      	; 0x19a <initUART+0x4c>
 196:	87 e6       	ldi	r24, 0x67	; 103
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 19e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
			break;
 1a2:	12 c0       	rjmp	.+36     	; 0x1c8 <initUART+0x7a>
		case 115200:
			UBRR0 = (Fast) ? 16 : 8;
 1a4:	88 23       	and	r24, r24
 1a6:	19 f0       	breq	.+6      	; 0x1ae <initUART+0x60>
 1a8:	80 e1       	ldi	r24, 0x10	; 16
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <initUART+0x64>
 1ae:	88 e0       	ldi	r24, 0x08	; 8
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 1b6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
			break;
 1ba:	06 c0       	rjmp	.+12     	; 0x1c8 <initUART+0x7a>
		default:
			UBRR0 = 103;  // Valor por defecto: 9600 sin U2X0
 1bc:	87 e6       	ldi	r24, 0x67	; 103
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 1c4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
			break;
	}
	
	// CONFIGURAR EL REGISTRO B (HABILITAR ISR RX, HABILITAR RX Y TX)
	UCSR0B = (1 << RXCIE0) | (1 << RXEN0) | (1 << TXEN0);
 1c8:	88 e9       	ldi	r24, 0x98	; 152
 1ca:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>

	// CONFIGURAR FRAME (8 BITS DE DATO, NO PARIDAD, 1 BIT STOP)
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
 1ce:	86 e0       	ldi	r24, 0x06	; 6
 1d0:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 1d4:	08 95       	ret

000001d6 <write_UART>:
}

void write_UART(char caracter) {
	while (!(UCSR0A & (1 << UDRE0))); // Esperar a que el buffer esté vacío
 1d6:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 1da:	95 ff       	sbrs	r25, 5
 1dc:	fc cf       	rjmp	.-8      	; 0x1d6 <write_UART>
	UDR0 = caracter;
 1de:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 1e2:	08 95       	ret

000001e4 <_exit>:
 1e4:	f8 94       	cli

000001e6 <__stop_program>:
 1e6:	ff cf       	rjmp	.-2      	; 0x1e6 <__stop_program>
